{"version":3,"file":"static/js/1106.5e29dcb5.chunk.js","mappings":"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","sources":["../../node_modules/lodash-es/min.js","../../node_modules/vscode-jsonrpc/lib/common/ral.js","../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-JEIROHC2.mjs","../../node_modules/@chevrotain/regexp-to-ast/src/utils.ts","../../node_modules/@chevrotain/regexp-to-ast/src/character-classes.ts","../../node_modules/@chevrotain/regexp-to-ast/src/regexp-parser.ts","../../node_modules/@chevrotain/regexp-to-ast/src/base-regexp-visitor.ts","../../node_modules/lodash-es/_baseLt.js","../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-T44TD3VJ.mjs","../../node_modules/chevrotain-allstar/src/atn.ts","../../node_modules/chevrotain-allstar/src/dfa.ts","../../node_modules/lodash-es/uniqBy.js","../../node_modules/chevrotain-allstar/src/all-star-lookahead.ts","../../node_modules/vscode-languageserver-types/lib/esm/main.js","../../node_modules/langium/src/parser/cst-node-builder.ts","../../node_modules/langium/src/parser/langium-parser.ts","../../node_modules/langium/src/parser/parser-builder-base.ts","../../node_modules/langium/src/parser/langium-parser-builder.ts","../../node_modules/langium/src/utils/promise-utils.ts","../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js","../../node_modules/langium/src/workspace/documents.ts","../../node_modules/langium/src/references/linker.ts","../../node_modules/langium/src/references/name-provider.ts","../../node_modules/langium/src/utils/uri-utils.ts","../../node_modules/langium/src/references/references.ts","../../node_modules/langium/src/utils/collections.ts","../../node_modules/langium/src/references/scope-computation.ts","../../node_modules/langium/src/references/scope.ts","../../node_modules/langium/src/utils/caching.ts","../../node_modules/langium/src/references/scope-provider.ts","../../node_modules/langium/src/serializer/json-serializer.ts","../../node_modules/langium/src/service-registry.ts","../../node_modules/langium/src/validation/validation-registry.ts","../../node_modules/langium/src/validation/document-validator.ts","../../node_modules/langium/src/workspace/ast-descriptions.ts","../../node_modules/langium/src/workspace/ast-node-locator.ts","../../node_modules/langium/src/utils/disposable.ts","../../node_modules/langium/src/workspace/configuration.ts","../../node_modules/langium/src/workspace/document-builder.ts","../../node_modules/langium/src/workspace/index-manager.ts","../../node_modules/langium/src/workspace/workspace-manager.ts","../../node_modules/langium/src/parser/lexer.ts","../../node_modules/langium/src/documentation/jsdoc.ts","../../node_modules/langium/src/documentation/documentation-provider.ts","../../node_modules/langium/src/documentation/comment-provider.ts","../../node_modules/langium/src/parser/async-parser.ts","../../node_modules/langium/src/workspace/workspace-lock.ts","../../node_modules/langium/src/serializer/hydrator.ts","../../node_modules/langium/src/default-module.ts","../../node_modules/langium/src/languages/grammar-config.ts","../../node_modules/langium/src/parser/completion-parser-builder.ts","../../node_modules/lodash-es/flatten.js","../../node_modules/langium/src/utils/regexp-utils.ts","../../node_modules/lodash-es/_createFind.js","../../node_modules/lodash-es/findIndex.js","../../node_modules/lodash-es/find.js","../../node_modules/langium/src/utils/ast-utils.ts","../../node_modules/langium/src/languages/generated/ast.ts","../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-BN7GFLIU.mjs","../../node_modules/lodash-es/last.js","../../node_modules/lodash-es/defaults.js","../../node_modules/lodash-es/_trimmedEndIndex.js","../../node_modules/lodash-es/_baseTrim.js","../../node_modules/lodash-es/toNumber.js","../../node_modules/lodash-es/toFinite.js","../../node_modules/vscode-jsonrpc/lib/common/events.js","../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-XRWGC2XP.mjs","../../node_modules/langium/src/utils/grammar-utils.ts","../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-WFRQ32O7.mjs","../../node_modules/lodash-es/flatMap.js","../../node_modules/langium/src/syntax-tree.ts","../../node_modules/langium/src/utils/errors.ts","../../node_modules/lodash-es/toInteger.js","../../node_modules/langium/src/utils/grammar-loader.ts","../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-4KMFLZZN.mjs","../../node_modules/lodash-es/_baseSet.js","../../node_modules/lodash-es/_basePickBy.js","../../node_modules/lodash-es/_baseExtremum.js","../../node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs","../../node_modules/@chevrotain/utils/src/to-fast-properties.ts","../../node_modules/lodash-es/_baseSlice.js","../../node_modules/lodash-es/drop.js","../../node_modules/lodash-es/assign.js","../../node_modules/lodash-es/pickBy.js","../../node_modules/lodash-es/_baseIsRegExp.js","../../node_modules/lodash-es/isRegExp.js","../../node_modules/@chevrotain/gast/src/model.ts","../../node_modules/@chevrotain/gast/src/visitor.ts","../../node_modules/lodash-es/_baseSome.js","../../node_modules/lodash-es/some.js","../../node_modules/lodash-es/includes.js","../../node_modules/lodash-es/_arrayEvery.js","../../node_modules/lodash-es/_baseEvery.js","../../node_modules/lodash-es/every.js","../../node_modules/@chevrotain/gast/src/helpers.ts","../../node_modules/chevrotain/src/parse/grammar/rest.ts","../../node_modules/lodash-es/uniq.js","../../node_modules/chevrotain/src/parse/grammar/first.ts","../../node_modules/chevrotain/src/parse/constants.ts","../../node_modules/chevrotain/src/parse/grammar/follow.ts","../../node_modules/lodash-es/negate.js","../../node_modules/lodash-es/reject.js","../../node_modules/lodash-es/indexOf.js","../../node_modules/lodash-es/_baseDifference.js","../../node_modules/lodash-es/difference.js","../../node_modules/lodash-es/compact.js","../../node_modules/lodash-es/head.js","../../node_modules/@chevrotain/utils/src/print.ts","../../node_modules/chevrotain/src/scan/reg_exp_parser.ts","../../node_modules/chevrotain/src/scan/reg_exp.ts","../../node_modules/chevrotain/src/scan/lexer.ts","../../node_modules/@chevrotain/utils/src/timer.ts","../../node_modules/chevrotain/src/scan/tokens.ts","../../node_modules/chevrotain/src/scan/lexer_errors_public.ts","../../node_modules/chevrotain/src/scan/lexer_public.ts","../../node_modules/chevrotain/src/scan/tokens_public.ts","../../node_modules/chevrotain/src/parse/errors_public.ts","../../node_modules/chevrotain/src/parse/grammar/resolver.ts","../../node_modules/lodash-es/_arrayAggregator.js","../../node_modules/lodash-es/_baseAggregator.js","../../node_modules/lodash-es/_createAggregator.js","../../node_modules/lodash-es/groupBy.js","../../node_modules/lodash-es/dropRight.js","../../node_modules/chevrotain/src/parse/grammar/interpreter.ts","../../node_modules/chevrotain/src/parse/grammar/lookahead.ts","../../node_modules/chevrotain/src/parse/grammar/checks.ts","../../node_modules/chevrotain/src/parse/grammar/gast/gast_resolver_public.ts","../../node_modules/chevrotain/src/parse/exceptions_public.ts","../../node_modules/chevrotain/src/parse/parser/traits/recoverable.ts","../../node_modules/chevrotain/src/parse/grammar/keys.ts","../../node_modules/chevrotain/src/parse/grammar/llk_lookahead.ts","../../node_modules/chevrotain/src/parse/parser/traits/looksahead.ts","../../node_modules/chevrotain/src/parse/cst/cst.ts","../../node_modules/chevrotain/src/lang/lang_extensions.ts","../../node_modules/chevrotain/src/parse/cst/cst_visitor.ts","../../node_modules/chevrotain/src/parse/parser/traits/gast_recorder.ts","../../node_modules/chevrotain/src/parse/parser/parser.ts","../../node_modules/chevrotain/src/parse/parser/utils/apply_mixins.ts","../../node_modules/chevrotain/src/parse/parser/traits/tree_builder.ts","../../node_modules/chevrotain/src/parse/parser/traits/lexer_adapter.ts","../../node_modules/chevrotain/src/parse/parser/traits/recognizer_engine.ts","../../node_modules/chevrotain/src/parse/parser/traits/recognizer_api.ts","../../node_modules/chevrotain/src/parse/parser/traits/error_handler.ts","../../node_modules/chevrotain/src/parse/parser/traits/context_assist.ts","../../node_modules/chevrotain/src/parse/parser/traits/perf_tracer.ts","../LIB/node_modules/path-browserify/index.js","../LIB/webpack/bootstrap","../LIB/webpack/runtime/define property getters","../LIB/webpack/runtime/hasOwnProperty shorthand","../LIB/webpack/runtime/make namespace object","../LIB/src/platform.ts","../LIB/src/uri.ts","../LIB/src/utils.ts","../../node_modules/langium/src/utils/stream.ts","../../node_modules/langium/src/utils/cst-utils.ts","../../node_modules/lodash-es/_baseHas.js","../../node_modules/lodash-es/has.js","../../node_modules/lodash-es/isString.js","../../node_modules/langium/src/dependency-injection.ts","../../node_modules/lodash-es/_baseMap.js","../../node_modules/langium/src/parser/value-converter.ts","../../node_modules/lodash-es/clone.js","../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-WFWHJNB7.mjs","../../node_modules/lodash-es/map.js","../../node_modules/vscode-jsonrpc/lib/common/is.js","../../node_modules/vscode-jsonrpc/lib/common/cancellation.js","../../node_modules/langium/src/parser/token-builder.ts","../../node_modules/langium/src/workspace/file-system-provider.ts","../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-KMC2YHZD.mjs"],"sourcesContent":["import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(`No runtime abstraction layer installed`);\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(`No runtime abstraction layer provided`);\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  ArchitectureGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-4KMFLZZN.mjs\";\n\n// src/language/architecture/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/architecture/tokenBuilder.ts\nvar ArchitectureTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"ArchitectureTokenBuilder\");\n  }\n  constructor() {\n    super([\"architecture\"]);\n  }\n};\n\n// src/language/architecture/valueConverter.ts\nvar ArchitectureValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"ArchitectureValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"ARCH_ICON\") {\n      return input.replace(/[()]/g, \"\").trim();\n    } else if (rule.name === \"ARCH_TEXT_ICON\") {\n      return input.replace(/[\"()]/g, \"\");\n    } else if (rule.name === \"ARCH_TITLE\") {\n      return input.replace(/[[\\]]/g, \"\").trim();\n    }\n    return void 0;\n  }\n};\n\n// src/language/architecture/module.ts\nvar ArchitectureModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new ArchitectureTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new ArchitectureValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createArchitectureServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Architecture = inject(\n    createDefaultCoreModule({ shared }),\n    ArchitectureGeneratedModule,\n    ArchitectureModule\n  );\n  shared.ServiceRegistry.register(Architecture);\n  return { shared, Architecture };\n}\n__name(createArchitectureServices, \"createArchitectureServices\");\n\nexport {\n  ArchitectureModule,\n  createArchitectureServices\n};\n","import type { Character, IRegExpAST, RegExpFlags } from \"../types\";\n\nexport function cc(char: string): number {\n  return char.charCodeAt(0);\n}\n\nexport function insertToSet<T>(item: T | T[], set: T[]) {\n  if (Array.isArray(item)) {\n    item.forEach(function (subItem) {\n      set.push(subItem);\n    });\n  } else {\n    set.push(item);\n  }\n}\n\nexport function addFlag(\n  flagObj: RegExpFlags,\n  flagKey: keyof Omit<RegExpFlags, keyof IRegExpAST>,\n) {\n  if (flagObj[flagKey] === true) {\n    throw \"duplicate flag \" + flagKey;\n  }\n\n  const x: boolean = flagObj[flagKey];\n  flagObj[flagKey] = true;\n}\n\nexport function ASSERT_EXISTS<T = Object>(obj: any): obj is T {\n  // istanbul ignore next\n  if (obj === undefined) {\n    throw Error(\"Internal Error - Should never get here!\");\n  }\n  return true;\n}\n\n// istanbul ignore next\nexport function ASSERT_NEVER_REACH_HERE(): any {\n  throw Error(\"Internal Error - Should never get here!\");\n}\n\nexport function isCharacter(obj: { type: string }): obj is Character {\n  return obj[\"type\"] === \"Character\";\n}\n","import { cc } from \"./utils.js\";\n\nexport const digitsCharCodes: number[] = [];\nfor (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n  digitsCharCodes.push(i);\n}\n\nexport const wordCharCodes: number[] = [cc(\"_\")].concat(digitsCharCodes);\nfor (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n  wordCharCodes.push(i);\n}\n\nfor (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n  wordCharCodes.push(i);\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\nexport const whitespaceCodes: number[] = [\n  cc(\" \"),\n  cc(\"\\f\"),\n  cc(\"\\n\"),\n  cc(\"\\r\"),\n  cc(\"\\t\"),\n  cc(\"\\v\"),\n  cc(\"\\t\"),\n  cc(\"\\u00a0\"),\n  cc(\"\\u1680\"),\n  cc(\"\\u2000\"),\n  cc(\"\\u2001\"),\n  cc(\"\\u2002\"),\n  cc(\"\\u2003\"),\n  cc(\"\\u2004\"),\n  cc(\"\\u2005\"),\n  cc(\"\\u2006\"),\n  cc(\"\\u2007\"),\n  cc(\"\\u2008\"),\n  cc(\"\\u2009\"),\n  cc(\"\\u200a\"),\n  cc(\"\\u2028\"),\n  cc(\"\\u2029\"),\n  cc(\"\\u202f\"),\n  cc(\"\\u205f\"),\n  cc(\"\\u3000\"),\n  cc(\"\\ufeff\"),\n];\n","import type {\n  Alternative,\n  Assertion,\n  Atom,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  Location,\n  Quantifier,\n  Range,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n  Term,\n} from \"../types\";\nimport {\n  addFlag,\n  ASSERT_EXISTS,\n  ASSERT_NEVER_REACH_HERE,\n  cc,\n  insertToSet,\n  isCharacter,\n} from \"./utils.js\";\nimport {\n  digitsCharCodes,\n  whitespaceCodes,\n  wordCharCodes,\n} from \"./character-classes.js\";\n\n// consts and utilities\nconst hexDigitPattern = /[0-9a-fA-F]/;\nconst decimalPattern = /[0-9]/;\nconst decimalPatternNoZero = /[1-9]/;\n\n// https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n// https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\nexport class RegExpParser {\n  protected idx: number = 0;\n  protected input: string = \"\";\n  protected groupIdx: number = 0;\n\n  protected saveState() {\n    return {\n      idx: this.idx,\n      input: this.input,\n      groupIdx: this.groupIdx,\n    };\n  }\n\n  protected restoreState(newState: {\n    idx: number;\n    input: string;\n    groupIdx: number;\n  }) {\n    this.idx = newState.idx;\n    this.input = newState.input;\n    this.groupIdx = newState.groupIdx;\n  }\n\n  public pattern(input: string): RegExpPattern {\n    // parser state\n    this.idx = 0;\n    this.input = input;\n    this.groupIdx = 0;\n\n    this.consumeChar(\"/\");\n    const value = this.disjunction();\n    this.consumeChar(\"/\");\n\n    const flags: RegExpFlags = {\n      type: \"Flags\",\n      loc: { begin: this.idx, end: input.length },\n      global: false,\n      ignoreCase: false,\n      multiLine: false,\n      unicode: false,\n      sticky: false,\n    };\n\n    while (this.isRegExpFlag()) {\n      switch (this.popChar()) {\n        case \"g\":\n          addFlag(flags, \"global\");\n          break;\n        case \"i\":\n          addFlag(flags, \"ignoreCase\");\n          break;\n        case \"m\":\n          addFlag(flags, \"multiLine\");\n          break;\n        case \"u\":\n          addFlag(flags, \"unicode\");\n          break;\n        case \"y\":\n          addFlag(flags, \"sticky\");\n          break;\n      }\n    }\n\n    if (this.idx !== this.input.length) {\n      throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n    }\n    return {\n      type: \"Pattern\",\n      flags: flags,\n      value: value,\n      loc: this.loc(0),\n    };\n  }\n\n  protected disjunction(): Disjunction {\n    const alts = [];\n    const begin = this.idx;\n\n    alts.push(this.alternative());\n\n    while (this.peekChar() === \"|\") {\n      this.consumeChar(\"|\");\n      alts.push(this.alternative());\n    }\n\n    return { type: \"Disjunction\", value: alts, loc: this.loc(begin) };\n  }\n\n  protected alternative(): Alternative {\n    const terms = [];\n    const begin = this.idx;\n\n    while (this.isTerm()) {\n      terms.push(this.term());\n    }\n\n    return { type: \"Alternative\", value: terms, loc: this.loc(begin) };\n  }\n\n  protected term(): Term {\n    if (this.isAssertion()) {\n      return this.assertion();\n    } else {\n      return this.atom();\n    }\n  }\n\n  protected assertion(): Assertion {\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"^\":\n        return {\n          type: \"StartAnchor\",\n          loc: this.loc(begin),\n        };\n      case \"$\":\n        return { type: \"EndAnchor\", loc: this.loc(begin) };\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.popChar()) {\n          case \"b\":\n            return {\n              type: \"WordBoundary\",\n              loc: this.loc(begin),\n            };\n          case \"B\":\n            return {\n              type: \"NonWordBoundary\",\n              loc: this.loc(begin),\n            };\n        }\n        // istanbul ignore next\n        throw Error(\"Invalid Assertion Escape\");\n      // '(?=' or '(?!'\n      case \"(\":\n        this.consumeChar(\"?\");\n\n        let type: \"Lookahead\" | \"NegativeLookahead\" | undefined;\n        switch (this.popChar()) {\n          case \"=\":\n            type = \"Lookahead\";\n            break;\n          case \"!\":\n            type = \"NegativeLookahead\";\n            break;\n        }\n        ASSERT_EXISTS(type);\n\n        const disjunction = this.disjunction();\n\n        this.consumeChar(\")\");\n\n        return {\n          type: type!,\n          value: disjunction,\n          loc: this.loc(begin),\n        };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected quantifier(\n    isBacktracking: boolean = false,\n  ): Quantifier | undefined {\n    let range: Partial<Quantifier> | undefined = undefined;\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"*\":\n        range = {\n          atLeast: 0,\n          atMost: Infinity,\n        };\n        break;\n      case \"+\":\n        range = {\n          atLeast: 1,\n          atMost: Infinity,\n        };\n        break;\n      case \"?\":\n        range = {\n          atLeast: 0,\n          atMost: 1,\n        };\n        break;\n      case \"{\":\n        const atLeast = this.integerIncludingZero();\n        switch (this.popChar()) {\n          case \"}\":\n            range = {\n              atLeast: atLeast,\n              atMost: atLeast,\n            };\n            break;\n          case \",\":\n            let atMost;\n            if (this.isDigit()) {\n              atMost = this.integerIncludingZero();\n              range = {\n                atLeast: atLeast,\n                atMost: atMost,\n              };\n            } else {\n              range = {\n                atLeast: atLeast,\n                atMost: Infinity,\n              };\n            }\n            this.consumeChar(\"}\");\n            break;\n        }\n        // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n        // causes severe performance degradations\n        if (isBacktracking === true && range === undefined) {\n          return undefined;\n        }\n        ASSERT_EXISTS(range);\n        break;\n    }\n\n    // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n    // causes severe performance degradations\n    if (isBacktracking === true && range === undefined) {\n      return undefined;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(range)) {\n      if (this.peekChar(0) === \"?\") {\n        this.consumeChar(\"?\");\n        range.greedy = false;\n      } else {\n        range.greedy = true;\n      }\n\n      range.type = \"Quantifier\";\n      range.loc = this.loc(begin);\n      return range as Quantifier;\n    }\n  }\n\n  protected atom(): Atom {\n    let atom: Omit<Atom, \"loc\" | \"type\"> | undefined;\n    const begin = this.idx;\n    switch (this.peekChar()) {\n      case \".\":\n        atom = this.dotAll();\n        break;\n      case \"\\\\\":\n        atom = this.atomEscape();\n        break;\n      case \"[\":\n        atom = this.characterClass();\n        break;\n      case \"(\":\n        atom = this.group();\n        break;\n    }\n\n    if (atom === undefined && this.isPatternCharacter()) {\n      atom = this.patternCharacter();\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS<Atom>(atom)) {\n      atom.loc = this.loc(begin);\n\n      if (this.isQuantifier()) {\n        atom.quantifier = this.quantifier();\n      }\n\n      return atom;\n    }\n\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected dotAll(): Omit<Set, \"loc\"> {\n    this.consumeChar(\".\");\n    return {\n      type: \"Set\",\n      complement: true,\n      value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")],\n    };\n  }\n\n  protected atomEscape(): Omit<GroupBackReference | Set | Character, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n\n    switch (this.peekChar()) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        return this.decimalEscapeAtom();\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected decimalEscapeAtom(): Omit<GroupBackReference, \"loc\"> {\n    const value = this.positiveInteger();\n\n    return { type: \"GroupBackReference\", value: value };\n  }\n\n  protected characterClassEscape(): Omit<Set, \"loc\"> {\n    let set: (number | Range)[] | undefined;\n    let complement = false;\n    switch (this.popChar()) {\n      case \"d\":\n        set = digitsCharCodes;\n        break;\n      case \"D\":\n        set = digitsCharCodes;\n        complement = true;\n        break;\n      case \"s\":\n        set = whitespaceCodes;\n        break;\n      case \"S\":\n        set = whitespaceCodes;\n        complement = true;\n        break;\n      case \"w\":\n        set = wordCharCodes;\n        break;\n      case \"W\":\n        set = wordCharCodes;\n        complement = true;\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(set)) {\n      return { type: \"Set\", value: set, complement: complement };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlEscapeAtom(): Omit<Character, \"loc\"> {\n    let escapeCode;\n    switch (this.popChar()) {\n      case \"f\":\n        escapeCode = cc(\"\\f\");\n        break;\n      case \"n\":\n        escapeCode = cc(\"\\n\");\n        break;\n      case \"r\":\n        escapeCode = cc(\"\\r\");\n        break;\n      case \"t\":\n        escapeCode = cc(\"\\t\");\n        break;\n      case \"v\":\n        escapeCode = cc(\"\\v\");\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(escapeCode)) {\n      return { type: \"Character\", value: escapeCode };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlLetterEscapeAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"c\");\n    const letter = this.popChar();\n    if (/[a-zA-Z]/.test(letter) === false) {\n      throw Error(\"Invalid \");\n    }\n\n    const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n    return { type: \"Character\", value: letterCode };\n  }\n\n  protected nulCharacterAtom(): Omit<Character, \"loc\"> {\n    // TODO implement '[lookahead ∉ DecimalDigit]'\n    // TODO: for the deprecated octal escape sequence\n    this.consumeChar(\"0\");\n    return { type: \"Character\", value: cc(\"\\0\") };\n  }\n\n  protected hexEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"x\");\n    return this.parseHexDigits(2);\n  }\n\n  protected regExpUnicodeEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"u\");\n    return this.parseHexDigits(4);\n  }\n\n  protected identityEscapeAtom(): Omit<Character, \"loc\"> {\n    // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n    // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n    const escapedChar = this.popChar();\n    return { type: \"Character\", value: cc(escapedChar) };\n  }\n\n  protected classPatternCharacterAtom(): Omit<Character, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \"]\":\n        throw Error(\"TBD\");\n      default:\n        const nextChar = this.popChar();\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n\n  protected characterClass(): Omit<Set, \"loc\"> {\n    const set: (number | Range)[] = [];\n    let complement = false;\n    this.consumeChar(\"[\");\n    if (this.peekChar(0) === \"^\") {\n      this.consumeChar(\"^\");\n      complement = true;\n    }\n\n    while (this.isClassAtom()) {\n      const from = this.classAtom();\n      const isFromSingleChar = from.type === \"Character\";\n      if (isCharacter(from) && this.isRangeDash()) {\n        this.consumeChar(\"-\");\n        const to = this.classAtom();\n        const isToSingleChar = to.type === \"Character\";\n\n        // a range can only be used when both sides are single characters\n        if (isCharacter(to)) {\n          if (to.value < from.value) {\n            throw Error(\"Range out of order in character class\");\n          }\n          set.push({ from: from.value, to: to.value });\n        } else {\n          // literal dash\n          insertToSet(from.value, set);\n          set.push(cc(\"-\"));\n          insertToSet(to.value, set);\n        }\n      } else {\n        insertToSet(from.value, set);\n      }\n    }\n\n    this.consumeChar(\"]\");\n\n    return { type: \"Set\", complement: complement, value: set };\n  }\n\n  protected classAtom(): Omit<Character | Set, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"]\":\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n        throw Error(\"TBD\");\n      case \"\\\\\":\n        return this.classEscape();\n      default:\n        return this.classPatternCharacterAtom();\n    }\n  }\n\n  protected classEscape(): Omit<Character | Set, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n    switch (this.peekChar()) {\n      // Matches a backspace.\n      // (Not to be confused with \\b word boundary outside characterClass)\n      case \"b\":\n        this.consumeChar(\"b\");\n        return { type: \"Character\", value: cc(\"\\u0008\") };\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected group(): Omit<Group, \"loc\"> {\n    let capturing = true;\n    this.consumeChar(\"(\");\n    switch (this.peekChar(0)) {\n      case \"?\":\n        this.consumeChar(\"?\");\n        this.consumeChar(\":\");\n        capturing = false;\n        break;\n      default:\n        this.groupIdx++;\n        break;\n    }\n    const value = this.disjunction();\n    this.consumeChar(\")\");\n\n    const groupAst: Omit<Group, \"loc\"> = {\n      type: \"Group\",\n      capturing: capturing,\n      value: value,\n    };\n\n    if (capturing) {\n      groupAst[\"idx\"] = this.groupIdx;\n    }\n\n    return groupAst;\n  }\n\n  protected positiveInteger(): number {\n    let number = this.popChar();\n\n    // istanbul ignore next - can't ever get here due to previous lookahead checks\n    // still implementing this error checking in case this ever changes.\n    if (decimalPatternNoZero.test(number) === false) {\n      throw Error(\"Expecting a positive integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected integerIncludingZero(): number {\n    let number = this.popChar();\n    if (decimalPattern.test(number) === false) {\n      throw Error(\"Expecting an integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected patternCharacter(): Omit<Character, \"loc\"> {\n    const nextChar = this.popChar();\n    switch (nextChar) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"^\":\n      // istanbul ignore next\n      case \"$\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \".\":\n      // istanbul ignore next\n      case \"*\":\n      // istanbul ignore next\n      case \"+\":\n      // istanbul ignore next\n      case \"?\":\n      // istanbul ignore next\n      case \"(\":\n      // istanbul ignore next\n      case \")\":\n      // istanbul ignore next\n      case \"[\":\n      // istanbul ignore next\n      case \"|\":\n        // istanbul ignore next\n        throw Error(\"TBD\");\n      default:\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n  protected isRegExpFlag(): boolean {\n    switch (this.peekChar(0)) {\n      case \"g\":\n      case \"i\":\n      case \"m\":\n      case \"u\":\n      case \"y\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isRangeDash(): boolean {\n    return this.peekChar() === \"-\" && this.isClassAtom(1);\n  }\n\n  protected isDigit(): boolean {\n    return decimalPattern.test(this.peekChar(0));\n  }\n\n  protected isClassAtom(howMuch = 0): boolean {\n    switch (this.peekChar(howMuch)) {\n      case \"]\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected isTerm() {\n    return this.isAtom() || this.isAssertion();\n  }\n\n  protected isAtom(): boolean {\n    if (this.isPatternCharacter()) {\n      return true;\n    }\n\n    switch (this.peekChar(0)) {\n      case \".\":\n      case \"\\\\\": // atomEscape\n      case \"[\": // characterClass\n      // TODO: isAtom must be called before isAssertion - disambiguate\n      case \"(\": // group\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isAssertion(): boolean {\n    switch (this.peekChar(0)) {\n      case \"^\":\n      case \"$\":\n        return true;\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.peekChar(1)) {\n          case \"b\":\n          case \"B\":\n            return true;\n          default:\n            return false;\n        }\n      // '(?=' or '(?!'\n      case \"(\":\n        return (\n          this.peekChar(1) === \"?\" &&\n          (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\")\n        );\n      default:\n        return false;\n    }\n  }\n\n  protected isQuantifier(): boolean {\n    const prevState = this.saveState();\n    try {\n      return this.quantifier(true) !== undefined;\n    } catch (e) {\n      return false;\n    } finally {\n      this.restoreState(prevState);\n    }\n  }\n\n  protected isPatternCharacter(): boolean {\n    switch (this.peekChar()) {\n      case \"^\":\n      case \"$\":\n      case \"\\\\\":\n      case \".\":\n      case \"*\":\n      case \"+\":\n      case \"?\":\n      case \"(\":\n      case \")\":\n      case \"[\":\n      case \"|\":\n      case \"/\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected parseHexDigits(howMany: number): Omit<Character, \"loc\"> {\n    let hexString = \"\";\n    for (let i = 0; i < howMany; i++) {\n      const hexChar = this.popChar();\n      if (hexDigitPattern.test(hexChar) === false) {\n        throw Error(\"Expecting a HexDecimal digits\");\n      }\n      hexString += hexChar;\n    }\n    const charCode = parseInt(hexString, 16);\n    return { type: \"Character\", value: charCode };\n  }\n\n  protected peekChar(howMuch = 0): string {\n    return this.input[this.idx + howMuch];\n  }\n\n  protected popChar(): string {\n    const nextChar = this.peekChar(0);\n    this.consumeChar(undefined);\n    return nextChar;\n  }\n\n  protected consumeChar(char: string | undefined): void {\n    if (char !== undefined && this.input[this.idx] !== char) {\n      throw Error(\n        \"Expected: '\" +\n          char +\n          \"' but found: '\" +\n          this.input[this.idx] +\n          \"' at offset: \" +\n          this.idx,\n      );\n    }\n\n    if (this.idx >= this.input.length) {\n      throw Error(\"Unexpected end of input\");\n    }\n    this.idx++;\n  }\n\n  protected loc(begin: number): Location {\n    return { begin: begin, end: this.idx };\n  }\n}\n","import type {\n  Alternative,\n  Assertion,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  IRegExpAST,\n  Quantifier,\n  RegExpAstPart,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n} from \"../types\";\n\nexport class BaseRegExpVisitor {\n  public visitChildren(node: IRegExpAST) {\n    for (const key in node) {\n      const child = (node as any)[key];\n      /* istanbul ignore else */\n      if (node.hasOwnProperty(key)) {\n        if (child.type !== undefined) {\n          this.visit(child);\n        } else if (Array.isArray(child)) {\n          child.forEach((subChild) => {\n            this.visit(subChild);\n          }, this);\n        }\n      }\n    }\n  }\n\n  public visit(node: RegExpAstPart): void {\n    switch (node.type) {\n      case \"Pattern\":\n        this.visitPattern(node);\n        break;\n      case \"Flags\":\n        this.visitFlags(node);\n        break;\n      case \"Disjunction\":\n        this.visitDisjunction(node);\n        break;\n      case \"Alternative\":\n        this.visitAlternative(node);\n        break;\n      case \"StartAnchor\":\n        this.visitStartAnchor(node);\n        break;\n      case \"EndAnchor\":\n        this.visitEndAnchor(node);\n        break;\n      case \"WordBoundary\":\n        this.visitWordBoundary(node);\n        break;\n      case \"NonWordBoundary\":\n        this.visitNonWordBoundary(node);\n        break;\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        break;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        break;\n      case \"Character\":\n        this.visitCharacter(node);\n        break;\n      case \"Set\":\n        this.visitSet(node);\n        break;\n      case \"Group\":\n        this.visitGroup(node);\n        break;\n      case \"GroupBackReference\":\n        this.visitGroupBackReference(node);\n        break;\n      case \"Quantifier\":\n        this.visitQuantifier(node);\n        break;\n    }\n\n    this.visitChildren(node);\n  }\n\n  public visitPattern(node: RegExpPattern): void {}\n\n  public visitFlags(node: RegExpFlags): void {}\n\n  public visitDisjunction(node: Disjunction): void {}\n\n  public visitAlternative(node: Alternative): void {}\n\n  // Assertion\n  public visitStartAnchor(node: Assertion): void {}\n\n  public visitEndAnchor(node: Assertion): void {}\n\n  public visitWordBoundary(node: Assertion): void {}\n\n  public visitNonWordBoundary(node: Assertion): void {}\n\n  public visitLookahead(node: Assertion): void {}\n\n  public visitNegativeLookahead(node: Assertion): void {}\n\n  // atoms\n  public visitCharacter(node: Character): void {}\n\n  public visitSet(node: Set): void {}\n\n  public visitGroup(node: Group): void {}\n\n  public visitGroupBackReference(node: GroupBackReference): void {}\n\n  public visitQuantifier(node: Quantifier): void {}\n}\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  InfoGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-4KMFLZZN.mjs\";\n\n// src/language/info/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/info/tokenBuilder.ts\nvar InfoTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"InfoTokenBuilder\");\n  }\n  constructor() {\n    super([\"info\", \"showInfo\"]);\n  }\n};\n\n// src/language/info/module.ts\nvar InfoModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new InfoTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createInfoServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Info = inject(\n    createDefaultCoreModule({ shared }),\n    InfoGeneratedModule,\n    InfoModule\n  );\n  shared.ServiceRegistry.register(Info);\n  return { shared, Info };\n}\n__name(createInfoServices, \"createInfoServices\");\n\nexport {\n  InfoModule,\n  createInfoServices\n};\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport filter from \"lodash-es/filter.js\"\r\nimport {\r\n    IProduction,\r\n    IProductionWithOccurrence,\r\n    TokenType,\r\n    Alternation,\r\n    NonTerminal,\r\n    Rule,\r\n    Option,\r\n    RepetitionMandatory,\r\n    Repetition,\r\n    Terminal,\r\n    Alternative,\r\n    RepetitionWithSeparator,\r\n    RepetitionMandatoryWithSeparator,\r\n    LookaheadProductionType\r\n} from \"chevrotain\"\r\n\r\nexport function buildATNKey(rule: Rule, type: LookaheadProductionType, occurrence: number): string {\r\n    return `${rule.name}_${type}_${occurrence}`;\r\n}\r\n\r\nexport interface ATN {\r\n    decisionMap: Record<string, DecisionState>\r\n    states: ATNState[]\r\n    decisionStates: DecisionState[]\r\n    ruleToStartState: Map<Rule, RuleStartState>\r\n    ruleToStopState: Map<Rule, RuleStopState>\r\n}\r\n\r\nexport const ATN_INVALID_TYPE = 0\r\nexport const ATN_BASIC = 1\r\nexport const ATN_RULE_START = 2\r\nexport const ATN_PLUS_BLOCK_START = 4\r\nexport const ATN_STAR_BLOCK_START = 5\r\n// Currently unused as the ATN is not used for lexing\r\nexport const ATN_TOKEN_START = 6\r\nexport const ATN_RULE_STOP = 7\r\nexport const ATN_BLOCK_END = 8\r\nexport const ATN_STAR_LOOP_BACK = 9\r\nexport const ATN_STAR_LOOP_ENTRY = 10\r\nexport const ATN_PLUS_LOOP_BACK = 11\r\nexport const ATN_LOOP_END = 12\r\n\r\nexport type ATNState =\r\n    | BasicState\r\n    | BasicBlockStartState\r\n    | PlusBlockStartState\r\n    | PlusLoopbackState\r\n    | StarBlockStartState\r\n    | StarLoopbackState\r\n    | StarLoopEntryState\r\n    | BlockEndState\r\n    | RuleStartState\r\n    | RuleStopState\r\n    | LoopEndState\r\n\r\nexport interface ATNBaseState {\r\n    atn: ATN\r\n    production: IProductionWithOccurrence\r\n    stateNumber: number\r\n    rule: Rule\r\n    epsilonOnlyTransitions: boolean\r\n    transitions: Transition[]\r\n    nextTokenWithinRule: number[]\r\n}\r\n\r\nexport interface BasicState extends ATNBaseState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface BlockStartState extends DecisionState {\r\n    end: BlockEndState\r\n}\r\n\r\nexport interface BasicBlockStartState extends BlockStartState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface PlusBlockStartState extends BlockStartState {\r\n    loopback: PlusLoopbackState\r\n    type: typeof ATN_PLUS_BLOCK_START\r\n}\r\n\r\nexport interface PlusLoopbackState extends DecisionState {\r\n    type: typeof ATN_PLUS_LOOP_BACK\r\n}\r\n\r\nexport interface StarBlockStartState extends BlockStartState {\r\n    type: typeof ATN_STAR_BLOCK_START\r\n}\r\n\r\nexport interface StarLoopbackState extends ATNBaseState {\r\n    type: typeof ATN_STAR_LOOP_BACK\r\n}\r\n\r\nexport interface StarLoopEntryState extends DecisionState {\r\n    loopback: StarLoopbackState\r\n    type: typeof ATN_STAR_LOOP_ENTRY\r\n}\r\n\r\nexport interface BlockEndState extends ATNBaseState {\r\n    start: BlockStartState\r\n    type: typeof ATN_BLOCK_END\r\n}\r\n\r\nexport interface DecisionState extends ATNBaseState {\r\n    decision: number\r\n}\r\n\r\nexport interface LoopEndState extends ATNBaseState {\r\n    loopback: ATNState\r\n    type: typeof ATN_LOOP_END\r\n}\r\n\r\nexport interface RuleStartState extends ATNBaseState {\r\n    stop: RuleStopState\r\n    type: typeof ATN_RULE_START\r\n}\r\n\r\nexport interface RuleStopState extends ATNBaseState {\r\n    type: typeof ATN_RULE_STOP\r\n}\r\n\r\nexport interface Transition {\r\n    target: ATNState\r\n    isEpsilon(): boolean\r\n}\r\n\r\nexport abstract class AbstractTransition implements Transition {\r\n    target: ATNState\r\n\r\n    constructor(target: ATNState) {\r\n        this.target = target\r\n    }\r\n\r\n    isEpsilon() {\r\n        return false\r\n    }\r\n}\r\n\r\nexport class AtomTransition extends AbstractTransition {\r\n    tokenType: TokenType\r\n\r\n    constructor(target: ATNState, tokenType: TokenType) {\r\n        super(target)\r\n        this.tokenType = tokenType\r\n    }\r\n}\r\n\r\nexport class EpsilonTransition extends AbstractTransition {\r\n    constructor(target: ATNState) {\r\n        super(target)\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\nexport class RuleTransition extends AbstractTransition {\r\n    rule: Rule\r\n    followState: ATNState\r\n\r\n    constructor(ruleStart: RuleStartState, rule: Rule, followState: ATNState) {\r\n        super(ruleStart)\r\n        this.rule = rule\r\n        this.followState = followState\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\ninterface ATNHandle {\r\n    left: ATNState\r\n    right: ATNState\r\n}\r\n\r\nexport function createATN(rules: Rule[]): ATN {\r\n    const atn: ATN = {\r\n        decisionMap: {},\r\n        decisionStates: [],\r\n        ruleToStartState: new Map(),\r\n        ruleToStopState: new Map(),\r\n        states: []\r\n    }\r\n    createRuleStartAndStopATNStates(atn, rules)\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const ruleBlock = block(atn, rule, rule)\r\n        if (ruleBlock === undefined) {\r\n            continue\r\n        }\r\n        buildRuleHandle(atn, rule, ruleBlock)\r\n    }\r\n    return atn\r\n}\r\n\r\nfunction createRuleStartAndStopATNStates(atn: ATN, rules: Rule[]): void {\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const start = newState<RuleStartState>(atn, rule, undefined, {\r\n            type: ATN_RULE_START\r\n        })\r\n        const stop = newState<RuleStopState>(atn, rule, undefined, {\r\n            type: ATN_RULE_STOP\r\n        })\r\n        start.stop = stop\r\n        atn.ruleToStartState.set(rule, start)\r\n        atn.ruleToStopState.set(rule, stop)\r\n    }\r\n}\r\n\r\nfunction atom(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProduction\r\n): ATNHandle | undefined {\r\n    if (production instanceof Terminal) {\r\n        return tokenRef(atn, rule, production.terminalType, production)\r\n    } else if (production instanceof NonTerminal) {\r\n        return ruleRef(atn, rule, production)\r\n    } else if (production instanceof Alternation) {\r\n        return alternation(atn, rule, production)\r\n    } else if (production instanceof Option) {\r\n        return option(atn, rule, production)\r\n    } else if (production instanceof Repetition) {\r\n        return repetition(atn, rule, production)\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return repetitionSep(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return repetitionMandatory(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return repetitionMandatorySep(atn, rule, production)\r\n    } else {\r\n        return block(atn, rule, production as Alternative)\r\n    }\r\n}\r\n\r\nfunction repetition(atn: ATN, rule: Rule, repetition: Repetition): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return star(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionSep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionWithSeparator\r\n): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return star(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction repetitionMandatory(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatory\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return plus(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionMandatorySep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatoryWithSeparator\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return plus(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction alternation(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    alternation: Alternation\r\n): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, alternation, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const alts = map(alternation.definition, (e) => atom(atn, rule, e))\r\n    const handle = makeAlts(atn, rule, start, alternation, ...alts)\r\n    return handle\r\n}\r\n\r\nfunction option(atn: ATN, rule: Rule, option: Option): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, option, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const handle = makeAlts(atn, rule, start, option, block(atn, rule, option))\r\n    return optional(atn, rule, option, handle)\r\n}\r\n\r\nfunction block(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    block: { definition: IProduction[] }\r\n): ATNHandle | undefined {\r\n    const handles = filter(\r\n        map(block.definition, (e) => atom(atn, rule, e)),\r\n        (e) => e !== undefined\r\n    ) as ATNHandle[]\r\n    if (handles.length === 1) {\r\n        return handles[0]\r\n    } else if (handles.length === 0) {\r\n        return undefined\r\n    } else {\r\n        return makeBlock(atn, handles)\r\n    }\r\n}\r\n\r\nfunction plus(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    plus: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const blkStart = handle.left as PlusBlockStartState\r\n    const blkEnd = handle.right\r\n\r\n    const loop = newState<PlusLoopbackState>(atn, rule, plus, {\r\n        type: ATN_PLUS_LOOP_BACK\r\n    })\r\n    defineDecisionState(atn, loop)\r\n    const end = newState<LoopEndState>(atn, rule, plus, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    blkStart.loopback = loop\r\n    end.loopback = loop\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionMandatoryWithSeparator' : 'RepetitionMandatory', plus.idx)] = loop;\r\n    epsilon(blkEnd, loop) // block can see loop back\r\n\r\n    // Depending on whether we have a separator we put the exit transition at index 1 or 0\r\n    // This influences the chosen option in the lookahead DFA\r\n    if (sep === undefined) {\r\n        epsilon(loop, blkStart) // loop back to start\r\n        epsilon(loop, end) // exit\r\n    } else {\r\n        epsilon(loop, end) // exit\r\n        // loop back to start with separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, blkStart)\r\n    }\r\n\r\n    return {\r\n        left: blkStart,\r\n        right: end\r\n    }\r\n}\r\n\r\nfunction star(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    star: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const start = handle.left\r\n    const end = handle.right\r\n\r\n    const entry = newState<StarLoopEntryState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_ENTRY\r\n    })\r\n    defineDecisionState(atn, entry)\r\n    const loopEnd = newState<LoopEndState>(atn, rule, star, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    const loop = newState<StarLoopbackState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_BACK\r\n    })\r\n    entry.loopback = loop\r\n    loopEnd.loopback = loop\r\n\r\n    epsilon(entry, start) // loop enter edge (alt 2)\r\n    epsilon(entry, loopEnd) // bypass loop edge (alt 1)\r\n    epsilon(end, loop) // block end hits loop back\r\n\r\n    if (sep !== undefined) {\r\n        epsilon(loop, loopEnd) // end loop\r\n        // loop back to start of handle using separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, start)\r\n    } else {\r\n        epsilon(loop, entry) // loop back to entry/exit decision\r\n    }\r\n\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionWithSeparator' : 'Repetition', star.idx)] = entry;\r\n    return {\r\n        left: entry,\r\n        right: loopEnd\r\n    }\r\n}\r\n\r\nfunction optional(atn: ATN, rule: Rule, optional: Option, handle: ATNHandle): ATNHandle {\r\n    const start = handle.left as DecisionState\r\n    const end = handle.right\r\n\r\n    epsilon(start, end)\r\n\r\n    atn.decisionMap[buildATNKey(rule, 'Option', optional.idx)] = start;\r\n    return handle\r\n}\r\n\r\nfunction defineDecisionState(atn: ATN, state: DecisionState): number {\r\n    atn.decisionStates.push(state)\r\n    state.decision = atn.decisionStates.length - 1\r\n    return state.decision\r\n}\r\n\r\nfunction makeAlts(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    start: BlockStartState,\r\n    production: IProductionWithOccurrence,\r\n    ...alts: (ATNHandle | undefined)[]\r\n): ATNHandle {\r\n    const end = newState<BlockEndState>(atn, rule, production, {\r\n        type: ATN_BLOCK_END,\r\n        start\r\n    })\r\n    start.end = end\r\n    for (const alt of alts) {\r\n        if (alt !== undefined) {\r\n            // hook alts up to decision block\r\n            epsilon(start, alt.left)\r\n            epsilon(alt.right, end)\r\n        } else {\r\n            epsilon(start, end)\r\n        }\r\n    }\r\n\r\n    const handle: ATNHandle = {\r\n        left: start as ATNState,\r\n        right: end\r\n    }\r\n    atn.decisionMap[buildATNKey(rule, getProdType(production), production.idx)] = start\r\n    return handle\r\n}\r\n\r\nfunction getProdType(production: IProduction): LookaheadProductionType {\r\n    if (production instanceof Alternation) {\r\n        return 'Alternation';\r\n    } else if (production instanceof Option) {\r\n        return 'Option';\r\n    } else if (production instanceof Repetition) {\r\n        return 'Repetition';\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return 'RepetitionWithSeparator';\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return 'RepetitionMandatory';\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return 'RepetitionMandatoryWithSeparator';\r\n    } else {\r\n        throw new Error('Invalid production type encountered');\r\n    }\r\n}\r\n\r\nfunction makeBlock(atn: ATN, alts: ATNHandle[]): ATNHandle {\r\n    const altsLength = alts.length\r\n    for (let i = 0; i < altsLength - 1; i++) {\r\n        const handle = alts[i]\r\n        let transition: Transition | undefined\r\n        if (handle.left.transitions.length === 1) {\r\n            transition = handle.left.transitions[0]\r\n        }\r\n        const isRuleTransition = transition instanceof RuleTransition\r\n        const ruleTransition = transition as RuleTransition\r\n        const next = alts[i + 1].left\r\n        if (\r\n            handle.left.type === ATN_BASIC &&\r\n            handle.right.type === ATN_BASIC &&\r\n            transition !== undefined &&\r\n            ((isRuleTransition && ruleTransition.followState === handle.right) ||\r\n                transition.target === handle.right)\r\n        ) {\r\n            // we can avoid epsilon edge to next element\r\n            if (isRuleTransition) {\r\n                ruleTransition.followState = next\r\n            } else {\r\n                transition.target = next\r\n            }\r\n            removeState(atn, handle.right) // we skipped over this state\r\n        } else {\r\n            // need epsilon if previous block's right end node is complex\r\n            epsilon(handle.right, next)\r\n        }\r\n    }\r\n\r\n    const first = alts[0]\r\n    const last = alts[altsLength - 1]\r\n    return {\r\n        left: first.left,\r\n        right: last.right\r\n    }\r\n}\r\n\r\nfunction tokenRef(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    tokenType: TokenType,\r\n    production: IProductionWithOccurrence\r\n): ATNHandle {\r\n    const left = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    addTransition(left, new AtomTransition(right, tokenType))\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction ruleRef(\r\n    atn: ATN,\r\n    currentRule: Rule,\r\n    nonTerminal: NonTerminal\r\n): ATNHandle {\r\n    const rule = nonTerminal.referencedRule\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    const left = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n\r\n    const call = new RuleTransition(start, rule, right)\r\n    addTransition(left, call)\r\n\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction buildRuleHandle(atn: ATN, rule: Rule, block: ATNHandle): ATNHandle {\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    epsilon(start, block.left)\r\n    const stop = atn.ruleToStopState.get(rule)!\r\n    epsilon(block.right, stop)\r\n    const handle: ATNHandle = {\r\n        left: start,\r\n        right: stop\r\n    }\r\n    return handle\r\n}\r\n\r\nfunction epsilon(a: ATNBaseState, b: ATNBaseState): void {\r\n    const transition = new EpsilonTransition(b as ATNState)\r\n    addTransition(a, transition)\r\n}\r\n\r\nfunction newState<T extends ATNState>(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProductionWithOccurrence | undefined,\r\n    partial: Partial<T>\r\n): T {\r\n    const t: T = {\r\n        atn,\r\n        production,\r\n        epsilonOnlyTransitions: false,\r\n        rule,\r\n        transitions: [],\r\n        nextTokenWithinRule: [],\r\n        stateNumber: atn.states.length,\r\n        ...partial\r\n    } as unknown as T\r\n    atn.states.push(t)\r\n    return t\r\n}\r\n\r\nfunction addTransition(state: ATNBaseState, transition: Transition) {\r\n    // A single ATN state can only contain epsilon transitions or non-epsilon transitions\r\n    // Because they are never mixed, only setting the property for the first transition is fine\r\n    if (state.transitions.length === 0) {\r\n        state.epsilonOnlyTransitions = transition.isEpsilon()\r\n    }\r\n    state.transitions.push(transition)\r\n}\r\n\r\nfunction removeState(atn: ATN, state: ATNState): void {\r\n    atn.states.splice(atn.states.indexOf(state), 1)\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport { ATNState, DecisionState } from \"./atn.js\"\r\n\r\nexport interface DFA {\r\n  start?: DFAState\r\n  states: Record<string, DFAState>\r\n  decision: number\r\n  atnStartState: DecisionState\r\n}\r\n\r\nexport interface DFAState {\r\n  configs: ATNConfigSet\r\n  edges: Record<number, DFAState>\r\n  isAcceptState: boolean\r\n  prediction: number\r\n}\r\n\r\nexport const DFA_ERROR = {} as DFAState\r\n\r\nexport interface ATNConfig {\r\n  state: ATNState\r\n  alt: number\r\n  stack: ATNState[]\r\n}\r\n\r\nexport class ATNConfigSet {\r\n  private map: Record<string, number> = {}\r\n  private configs: ATNConfig[] = []\r\n\r\n  uniqueAlt: number | undefined\r\n\r\n  get size(): number {\r\n    return this.configs.length\r\n  }\r\n\r\n  finalize(): void {\r\n    // Empties the map to free up memory\r\n    this.map = {}\r\n  }\r\n\r\n  add(config: ATNConfig): void {\r\n    const key = getATNConfigKey(config)\r\n    // Only add configs which don't exist in our map already\r\n    // While this does not influence the actual algorithm, adding them anyway would massively increase memory consumption\r\n    if (!(key in this.map)) {\r\n      this.map[key] = this.configs.length\r\n      this.configs.push(config)\r\n    }\r\n  }\r\n\r\n  get elements(): readonly ATNConfig[] {\r\n    return this.configs\r\n  }\r\n\r\n  get alts(): number[] {\r\n    return map(this.configs, (e) => e.alt)\r\n  }\r\n\r\n  get key(): string {\r\n    let value = \"\"\r\n    for (const k in this.map) {\r\n      value += k + \":\"\r\n    }\r\n    return value\r\n  }\r\n}\r\n\r\nexport function getATNConfigKey(config: ATNConfig, alt = true) {\r\n  return `${alt ? `a${config.alt}` : \"\"}s${\r\n    config.state.stateNumber\r\n  }:${config.stack.map((e) => e.stateNumber.toString()).join(\"_\")}`\r\n}\r\n","import baseIteratee from './_baseIteratee.js';\nimport baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nexport default uniqBy;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport {\r\n    IToken,\r\n    TokenType,\r\n    tokenMatcher,\r\n    tokenLabel,\r\n    Rule,\r\n    IProductionWithOccurrence,\r\n    NonTerminal,\r\n    Alternation,\r\n    Option,\r\n    RepetitionMandatory,\r\n    RepetitionMandatoryWithSeparator,\r\n    RepetitionWithSeparator,\r\n    Repetition,\r\n    Terminal,\r\n    BaseParser,\r\n    LLkLookaheadStrategy,\r\n    ILookaheadValidationError,\r\n    IOrAlt,\r\n    getLookaheadPaths,\r\n    OptionalProductionType\r\n} from \"chevrotain\";\r\nimport {\r\n    ATN,\r\n    ATNState,\r\n    ATN_RULE_STOP,\r\n    AtomTransition,\r\n    buildATNKey,\r\n    createATN,\r\n    DecisionState,\r\n    EpsilonTransition,\r\n    RuleTransition,\r\n    Transition\r\n} from \"./atn.js\";\r\nimport {\r\n    ATNConfig,\r\n    ATNConfigSet,\r\n    DFA,\r\n    DFAState,\r\n    DFA_ERROR,\r\n    getATNConfigKey\r\n} from \"./dfa.js\";\r\nimport min from \"lodash-es/min.js\";\r\nimport flatMap from \"lodash-es/flatMap.js\";\r\nimport uniqBy from \"lodash-es/uniqBy.js\";\r\nimport map from \"lodash-es/map.js\";\r\nimport flatten from \"lodash-es/flatten.js\";\r\nimport forEach from \"lodash-es/forEach.js\";\r\nimport isEmpty from \"lodash-es/isEmpty.js\";\r\nimport reduce from \"lodash-es/reduce.js\";\r\n\r\ntype DFACache = (predicateSet: PredicateSet) => DFA\r\n\r\nexport type AmbiguityReport = (message: string) => void;\r\n\r\nfunction createDFACache(startState: DecisionState, decision: number): DFACache {\r\n    const map: Record<string, DFA | undefined> = {}\r\n    return (predicateSet) => {\r\n        const key = predicateSet.toString()\r\n        let existing = map[key]\r\n        if (existing !== undefined) {\r\n            return existing\r\n        } else {\r\n            existing = {\r\n                atnStartState: startState,\r\n                decision,\r\n                states: {}\r\n            }\r\n            map[key] = existing\r\n            return existing\r\n        }\r\n    }\r\n}\r\n\r\nclass PredicateSet {\r\n    private predicates: boolean[] = []\r\n\r\n    is(index: number): boolean {\r\n        return index >= this.predicates.length || this.predicates[index]\r\n    }\r\n\r\n    set(index: number, value: boolean) {\r\n        this.predicates[index] = value\r\n    }\r\n\r\n    toString(): string {\r\n        let value = \"\"\r\n        const size = this.predicates.length\r\n        for (let i = 0; i < size; i++) {\r\n            value += this.predicates[i] === true ? \"1\" : \"0\"\r\n        }\r\n        return value\r\n    }\r\n}\r\n\r\ninterface AdaptivePredictError {\r\n    tokenPath: IToken[]\r\n    possibleTokenTypes: TokenType[]\r\n    actualToken: IToken\r\n}\r\n\r\nconst EMPTY_PREDICATES = new PredicateSet()\r\n\r\nexport interface LLStarLookaheadOptions {\r\n    logging?: AmbiguityReport\r\n}\r\n\r\nexport class LLStarLookaheadStrategy extends LLkLookaheadStrategy {\r\n\r\n    private atn: ATN;\r\n    private dfas: DFACache[];\r\n    private logging: AmbiguityReport;\r\n\r\n    constructor(options?: LLStarLookaheadOptions) {\r\n        super();\r\n        this.logging = options?.logging ?? ((message) => console.log(message));\r\n    }\r\n\r\n    override initialize(options: { rules: Rule[] }): void {\r\n        this.atn = createATN(options.rules);\r\n        this.dfas = initATNSimulator(this.atn);\r\n    }\r\n\r\n    override validateAmbiguousAlternationAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override validateEmptyOrAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override buildLookaheadForAlternation(options: {\r\n        prodOccurrence: number;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        hasPredicates: boolean;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser, orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\r\n        const { prodOccurrence, rule, hasPredicates, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, 'Alternation', prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const partialAlts: (TokenType | undefined)[][] = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType: \"Alternation\",\r\n                rule: rule\r\n            }),\r\n            (currAlt) => map(currAlt, (path) => path[0])\r\n        )\r\n\r\n        if (isLL1Sequence(partialAlts, false) && !dynamicTokensEnabled) {\r\n            const choiceToAlt = reduce(\r\n                partialAlts,\r\n                (result, currAlt, idx) => {\r\n                    forEach(currAlt, (currTokType) => {\r\n                        if (currTokType) {\r\n                            result[currTokType.tokenTypeIdx!] = idx\r\n                            forEach(currTokType.categoryMatches!, (currExtendingType) => {\r\n                                result[currExtendingType] = idx\r\n                            })\r\n                        }\r\n                    })\r\n                    return result\r\n                },\r\n                {} as Record<number, number>\r\n            )\r\n\r\n            if (hasPredicates) {\r\n                return function (this: BaseParser, orAlts) {\r\n                    const nextToken = this.LA(1)\r\n                    const prediction: number | undefined = choiceToAlt[nextToken.tokenTypeIdx]\r\n                    if (orAlts !== undefined && prediction !== undefined) {\r\n                        const gate = orAlts[prediction]?.GATE\r\n                        if (gate !== undefined && gate.call(this) === false) {\r\n                            return undefined;\r\n                        }\r\n                    }\r\n                    return prediction\r\n                }\r\n            } else {\r\n                return function (this: BaseParser): number | undefined {\r\n                    const nextToken = this.LA(1)\r\n                    return choiceToAlt[nextToken.tokenTypeIdx];\r\n                }\r\n            }\r\n        } else if (hasPredicates) {\r\n            return function (this: BaseParser, orAlts) {\r\n                const predicates = new PredicateSet()\r\n                const length = orAlts === undefined ? 0 : orAlts.length\r\n                for (let i = 0; i < length; i++) {\r\n                    const gate = orAlts?.[i].GATE\r\n                    predicates.set(i, gate === undefined || gate.call(this))\r\n                }\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, predicates, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        } else {\r\n            return function (this: BaseParser) {\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    override buildLookaheadForOptional(options: {\r\n        prodOccurrence: number;\r\n        prodType: OptionalProductionType;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser) => boolean {\r\n        const { prodOccurrence, rule, prodType, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, prodType, prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const alts = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType,\r\n                rule\r\n            }),\r\n            (e) => {\r\n              return map(e, (g) => g[0])\r\n            }\r\n          )\r\n        \r\n          if (isLL1Sequence(alts) && alts[0][0] && !dynamicTokensEnabled) {\r\n            const alt = alts[0]\r\n            const singleTokensTypes = flatten(alt)\r\n        \r\n            if (\r\n              singleTokensTypes.length === 1 &&\r\n              isEmpty(singleTokensTypes[0].categoryMatches)\r\n            ) {\r\n              const expectedTokenType = singleTokensTypes[0]\r\n              const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey\r\n              }\r\n            } else {\r\n              const choiceToAlt = reduce(\r\n                singleTokensTypes,\r\n                (result, currTokType) => {\r\n                  if (currTokType !== undefined) {\r\n                    result[currTokType.tokenTypeIdx!] = true\r\n                    forEach(currTokType.categoryMatches, (currExtendingType) => {\r\n                      result[currExtendingType] = true\r\n                    })\r\n                  }\r\n                  return result\r\n                },\r\n                {} as Record<number, boolean>\r\n              )\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                const nextToken = this.LA(1)\r\n                return choiceToAlt[nextToken.tokenTypeIdx] === true\r\n              }\r\n            }\r\n          }\r\n          return function (this: BaseParser) {\r\n            const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging)\r\n              return typeof result === \"object\" ? false : result === 0;\r\n          }\r\n    }\r\n\r\n}\r\n\r\nfunction isLL1Sequence(sequences: (TokenType | undefined)[][], allowEmpty = true): boolean {\r\n    const fullSet = new Set<number>()\r\n\r\n    for (const alt of sequences) {\r\n        const altSet = new Set<number>()\r\n        for (const tokType of alt) {\r\n            if (tokType === undefined) {\r\n                if (allowEmpty) {\r\n                    // Epsilon production encountered\r\n                    break\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            const indices = [tokType.tokenTypeIdx!].concat(tokType.categoryMatches!)\r\n            for (const index of indices) {\r\n                if (fullSet.has(index)) {\r\n                    if (!altSet.has(index)) {\r\n                        return false\r\n                    }\r\n                } else {\r\n                    fullSet.add(index)\r\n                    altSet.add(index)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction initATNSimulator(atn: ATN): DFACache[] {\r\n    const decisionLength = atn.decisionStates.length\r\n    const decisionToDFA: DFACache[] = Array(decisionLength)\r\n    for (let i = 0; i < decisionLength; i++) {\r\n        decisionToDFA[i] = createDFACache(atn.decisionStates[i], i)\r\n    }\r\n    return decisionToDFA;\r\n}\r\n\r\nfunction adaptivePredict(\r\n    this: BaseParser,\r\n    dfaCaches: DFACache[],\r\n    decision: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    const dfa = dfaCaches[decision](predicateSet)\r\n    let start = dfa.start\r\n    if (start === undefined) {\r\n        const closure = computeStartState(dfa.atnStartState as ATNState)\r\n        start = addDFAState(dfa, newDFAState(closure))\r\n        dfa.start = start\r\n    }\r\n\r\n    const alt = performLookahead.apply(this, [dfa, start, predicateSet, logging])\r\n    return alt\r\n}\r\n\r\nfunction performLookahead(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    s0: DFAState,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    let previousD = s0\r\n\r\n    let i = 1\r\n    const path: IToken[] = []\r\n    let t = this.LA(i++)\r\n\r\n    while (true) {\r\n        let d = getExistingTargetState(previousD, t)\r\n        if (d === undefined) {\r\n            d = computeLookaheadTarget.apply(this, [dfa, previousD, t, i, predicateSet, logging])\r\n        }\r\n\r\n        if (d === DFA_ERROR) {\r\n            return buildAdaptivePredictError(path, previousD, t)\r\n        }\r\n\r\n        if (d.isAcceptState === true) {\r\n            return d.prediction\r\n        }\r\n\r\n        previousD = d\r\n        path.push(t)\r\n        t = this.LA(i++)\r\n    }\r\n}\r\n\r\nfunction computeLookaheadTarget(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    previousD: DFAState,\r\n    token: IToken,\r\n    lookahead: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): DFAState {\r\n    const reach = computeReachSet(previousD.configs, token, predicateSet)\r\n    if (reach.size === 0) {\r\n        addDFAEdge(dfa, previousD, token, DFA_ERROR)\r\n        return DFA_ERROR\r\n    }\r\n\r\n    let newState = newDFAState(reach)\r\n    const predictedAlt = getUniqueAlt(reach, predicateSet)\r\n\r\n    if (predictedAlt !== undefined) {\r\n        newState.isAcceptState = true\r\n        newState.prediction = predictedAlt\r\n        newState.configs.uniqueAlt = predictedAlt\r\n    } else if (hasConflictTerminatingPrediction(reach)) {\r\n        const prediction = min(reach.alts)!\r\n        newState.isAcceptState = true\r\n        newState.prediction = prediction\r\n        newState.configs.uniqueAlt = prediction\r\n        reportLookaheadAmbiguity.apply(this, [dfa, lookahead, reach.alts, logging])\r\n    }\r\n\r\n    newState = addDFAEdge(dfa, previousD, token, newState)\r\n    return newState\r\n}\r\n\r\nfunction reportLookaheadAmbiguity(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    lookahead: number,\r\n    ambiguityIndices: number[],\r\n    logging: AmbiguityReport\r\n) {\r\n    const prefixPath: TokenType[] = []\r\n    for (let i = 1; i <= lookahead; i++) {\r\n        prefixPath.push(this.LA(i).tokenType)\r\n    }\r\n    const atnState = dfa.atnStartState\r\n    const topLevelRule = atnState.rule\r\n    const production = atnState.production\r\n    const message = buildAmbiguityError({\r\n        topLevelRule,\r\n        ambiguityIndices,\r\n        production,\r\n        prefixPath\r\n    })\r\n    logging(message)\r\n}\r\n\r\nfunction buildAmbiguityError(options: {\r\n    topLevelRule: Rule\r\n    prefixPath: TokenType[]\r\n    ambiguityIndices: number[]\r\n    production: IProductionWithOccurrence\r\n}): string {\r\n    const pathMsg = map(options.prefixPath, (currtok) =>\r\n        tokenLabel(currtok)\r\n    ).join(\", \")\r\n    const occurrence =\r\n        options.production.idx === 0 ? \"\" : options.production.idx\r\n    let currMessage =\r\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\r\n            \", \"\r\n        )}> in <${getProductionDslName(options.production)}${occurrence}>` +\r\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\r\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`\r\n\r\n    currMessage =\r\n        currMessage +\r\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\r\n        `For Further details.`\r\n    return currMessage\r\n}\r\n\r\nfunction getProductionDslName(prod: IProductionWithOccurrence): string {\r\n    if (prod instanceof NonTerminal) {\r\n        return \"SUBRULE\"\r\n    } else if (prod instanceof Option) {\r\n        return \"OPTION\"\r\n    } else if (prod instanceof Alternation) {\r\n        return \"OR\"\r\n    } else if (prod instanceof RepetitionMandatory) {\r\n        return \"AT_LEAST_ONE\"\r\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\r\n        return \"AT_LEAST_ONE_SEP\"\r\n    } else if (prod instanceof RepetitionWithSeparator) {\r\n        return \"MANY_SEP\"\r\n    } else if (prod instanceof Repetition) {\r\n        return \"MANY\"\r\n    } else if (prod instanceof Terminal) {\r\n        return \"CONSUME\"\r\n    } else {\r\n        throw Error(\"non exhaustive match\")\r\n    }\r\n}\r\n\r\nfunction buildAdaptivePredictError(\r\n    path: IToken[],\r\n    previous: DFAState,\r\n    current: IToken\r\n): AdaptivePredictError {\r\n    const nextTransitions = flatMap(\r\n        previous.configs.elements,\r\n        (e) => e.state.transitions\r\n    )\r\n    const nextTokenTypes = uniqBy(\r\n        nextTransitions\r\n            .filter((e): e is AtomTransition => e instanceof AtomTransition)\r\n            .map((e) => e.tokenType),\r\n        (e) => e.tokenTypeIdx\r\n    )\r\n    return {\r\n        actualToken: current,\r\n        possibleTokenTypes: nextTokenTypes,\r\n        tokenPath: path\r\n    }\r\n}\r\n\r\nfunction getExistingTargetState(\r\n    state: DFAState,\r\n    token: IToken\r\n): DFAState | undefined {\r\n    return state.edges[token.tokenTypeIdx]\r\n}\r\n\r\nfunction computeReachSet(\r\n    configs: ATNConfigSet,\r\n    token: IToken,\r\n    predicateSet: PredicateSet\r\n): ATNConfigSet {\r\n    const intermediate = new ATNConfigSet()\r\n    const skippedStopStates: ATNConfig[] = []\r\n\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === false) {\r\n            continue\r\n        }\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            skippedStopStates.push(c)\r\n            continue\r\n        }\r\n        const transitionLength = c.state.transitions.length\r\n        for (let i = 0; i < transitionLength; i++) {\r\n            const transition = c.state.transitions[i]\r\n            const target = getReachableTarget(transition, token)\r\n            if (target !== undefined) {\r\n                intermediate.add({\r\n                    state: target,\r\n                    alt: c.alt,\r\n                    stack: c.stack\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let reach: ATNConfigSet | undefined\r\n\r\n    if (skippedStopStates.length === 0 && intermediate.size === 1) {\r\n        reach = intermediate\r\n    }\r\n\r\n    if (reach === undefined) {\r\n        reach = new ATNConfigSet()\r\n        for (const c of intermediate.elements) {\r\n            closure(c, reach)\r\n        }\r\n    }\r\n\r\n    if (skippedStopStates.length > 0 && !hasConfigInRuleStopState(reach)) {\r\n        for (const c of skippedStopStates) {\r\n            reach.add(c)\r\n        }\r\n    }\r\n\r\n    return reach\r\n}\r\n\r\nfunction getReachableTarget(\r\n    transition: Transition,\r\n    token: IToken\r\n): ATNState | undefined {\r\n    if (\r\n        transition instanceof AtomTransition &&\r\n        tokenMatcher(token, transition.tokenType)\r\n    ) {\r\n        return transition.target\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction getUniqueAlt(\r\n    configs: ATNConfigSet,\r\n    predicateSet: PredicateSet\r\n): number | undefined {\r\n    let alt: number | undefined\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === true) {\r\n            if (alt === undefined) {\r\n                alt = c.alt\r\n            } else if (alt !== c.alt) {\r\n                return undefined\r\n            }\r\n        }\r\n    }\r\n    return alt\r\n}\r\n\r\nfunction newDFAState(closure: ATNConfigSet): DFAState {\r\n    return {\r\n        configs: closure,\r\n        edges: {},\r\n        isAcceptState: false,\r\n        prediction: -1\r\n    }\r\n}\r\n\r\nfunction addDFAEdge(\r\n    dfa: DFA,\r\n    from: DFAState,\r\n    token: IToken,\r\n    to: DFAState\r\n): DFAState {\r\n    to = addDFAState(dfa, to)\r\n    from.edges[token.tokenTypeIdx] = to\r\n    return to\r\n}\r\n\r\nfunction addDFAState(dfa: DFA, state: DFAState): DFAState {\r\n    if (state === DFA_ERROR) {\r\n        return state\r\n    }\r\n    // Repetitions have the same config set\r\n    // Therefore, storing the key of the config in a map allows us to create a loop in our DFA\r\n    const mapKey = state.configs.key\r\n    const existing = dfa.states[mapKey]\r\n    if (existing !== undefined) {\r\n        return existing\r\n    }\r\n    state.configs.finalize()\r\n    dfa.states[mapKey] = state\r\n    return state\r\n}\r\n\r\nfunction computeStartState(atnState: ATNState): ATNConfigSet {\r\n    const configs = new ATNConfigSet()\r\n\r\n    const numberOfTransitions = atnState.transitions.length\r\n    for (let i = 0; i < numberOfTransitions; i++) {\r\n        const target = atnState.transitions[i].target\r\n        const config: ATNConfig = {\r\n            state: target,\r\n            alt: i,\r\n            stack: []\r\n        }\r\n        closure(config, configs)\r\n    }\r\n\r\n    return configs\r\n}\r\n\r\nfunction closure(config: ATNConfig, configs: ATNConfigSet): void {\r\n    const p = config.state\r\n\r\n    if (p.type === ATN_RULE_STOP) {\r\n        if (config.stack.length > 0) {\r\n            const atnStack = [...config.stack]\r\n            const followState = atnStack.pop()!\r\n            const followConfig: ATNConfig = {\r\n                state: followState,\r\n                alt: config.alt,\r\n                stack: atnStack\r\n            }\r\n            closure(followConfig, configs)\r\n        } else {\r\n            // Dipping into outer context, simply add the config\r\n            // This will stop computation once every config is at the rule stop state\r\n            configs.add(config)\r\n        }\r\n        return\r\n    }\r\n\r\n    if (!p.epsilonOnlyTransitions) {\r\n        configs.add(config)\r\n    }\r\n\r\n    const transitionLength = p.transitions.length\r\n    for (let i = 0; i < transitionLength; i++) {\r\n        const transition = p.transitions[i]\r\n        const c = getEpsilonTarget(config, transition)\r\n\r\n        if (c !== undefined) {\r\n            closure(c, configs)\r\n        }\r\n    }\r\n}\r\n\r\nfunction getEpsilonTarget(\r\n    config: ATNConfig,\r\n    transition: Transition\r\n): ATNConfig | undefined {\r\n    if (transition instanceof EpsilonTransition) {\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack: config.stack\r\n        }\r\n    } else if (transition instanceof RuleTransition) {\r\n        const stack = [...config.stack, transition.followState]\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack\r\n        }\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction hasConfigInRuleStopState(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction allConfigsInRuleStopStates(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type !== ATN_RULE_STOP) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction hasConflictTerminatingPrediction(configs: ATNConfigSet): boolean {\r\n    if (allConfigsInRuleStopStates(configs)) {\r\n        return true\r\n    }\r\n    const altSets = getConflictingAltSets(configs.elements)\r\n    const heuristic =\r\n        hasConflictingAltSet(altSets) && !hasStateAssociatedWithOneAlt(altSets)\r\n    return heuristic\r\n}\r\n\r\nfunction getConflictingAltSets(\r\n    configs: readonly ATNConfig[]\r\n): Map<string, Record<number, boolean>> {\r\n    const configToAlts = new Map<string, Record<number, boolean>>()\r\n    for (const c of configs) {\r\n        const key = getATNConfigKey(c, false)\r\n        let alts = configToAlts.get(key)\r\n        if (alts === undefined) {\r\n            alts = {}\r\n            configToAlts.set(key, alts)\r\n        }\r\n        alts[c.alt] = true\r\n    }\r\n    return configToAlts\r\n}\r\n\r\nfunction hasConflictingAltSet(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length > 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction hasStateAssociatedWithOneAlt(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length === 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nexport var DocumentUri;\n(function (DocumentUri) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    DocumentUri.is = is;\n})(DocumentUri || (DocumentUri = {}));\nexport var URI;\n(function (URI) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    URI.is = is;\n})(URI || (URI = {}));\nexport var integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;\n    }\n    integer.is = is;\n})(integer || (integer = {}));\nexport var uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;\n    }\n    uinteger.is = is;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * {@link Position} literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line, character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Position} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * {@link Range} literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Range} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * {@link Location} literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri, range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Location} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * {@link LocationLink} literals.\n */\nexport var LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition's uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link LocationLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && Range.is(candidate.targetSelectionRange)\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link Color} literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red,\n            green,\n            blue,\n            alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Color} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * {@link ColorInformation} literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range,\n            color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link ColorPresentation} literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label,\n            textEdit,\n            additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * A set of predefined range kinds.\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind.Comment = 'comment';\n    /**\n     * Folding range for an import or include\n     */\n    FoldingRangeKind.Imports = 'imports';\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind.Region = 'region';\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * {@link FoldingRange} literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n        const result = {\n            startLine,\n            endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        if (Is.defined(collapsedText)) {\n            result.collapsedText = collapsedText;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FoldingRange} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * {@link DiagnosticRelatedInformation} literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location,\n            message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nexport var DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nexport var CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * {@link Diagnostic} literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        let result = { range, message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Diagnostic} interface.\n     */\n    function is(value) {\n        var _a;\n        let candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * {@link Command} literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command, ...args) {\n        let result = { title, command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Command} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range, newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates an insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nexport var ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        const result = { label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nexport var ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate);\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nexport var AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range, newText: '', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument, edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'create',\n            uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nexport var RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        let result = {\n            kind: 'rename',\n            oldUri,\n            newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nexport var DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'delete',\n            uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nclass TextEditChangeImpl {\n    constructor(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    insert(position, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    replace(range, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    delete(range, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    add(edit) {\n        this.edits.push(edit);\n    }\n    all() {\n        return this.edits;\n    }\n    clear() {\n        this.edits.splice(0, this.edits.length);\n    }\n    assertChangeAnnotations(value) {\n        if (value === undefined) {\n            throw new Error(`Text edit change is not configured to manage change annotations.`);\n        }\n    }\n}\n/**\n * A helper class\n */\nclass ChangeAnnotations {\n    constructor(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    all() {\n        return this._annotations;\n    }\n    get size() {\n        return this._size;\n    }\n    manage(idOrAnnotation, annotation) {\n        let id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error(`Id ${id} is already in use.`);\n        }\n        if (annotation === undefined) {\n            throw new Error(`No annotation provided for id ${id}`);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    }\n    nextId() {\n        this._counter++;\n        return this._counter.toString();\n    }\n}\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nexport class WorkspaceChange {\n    constructor(workspaceEdit) {\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach((change) => {\n                    if (TextDocumentEdit.is(change)) {\n                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);\n                        this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach((key) => {\n                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    /**\n     * Returns the underlying {@link WorkspaceEdit} literal\n     * use to be returned from a workspace edit operation like rename.\n     */\n    get edit() {\n        this.initDocumentChanges();\n        if (this._changeAnnotations !== undefined) {\n            if (this._changeAnnotations.size === 0) {\n                this._workspaceEdit.changeAnnotations = undefined;\n            }\n            else {\n                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n            }\n        }\n        return this._workspaceEdit;\n    }\n    getTextEditChange(key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error('Workspace edit is not configured for document changes.');\n            }\n            const textDocument = { uri: key.uri, version: key.version };\n            let result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                const edits = [];\n                const textDocumentEdit = {\n                    textDocument,\n                    edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            let result = this._textEditChanges[key];\n            if (!result) {\n                let edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    }\n    initDocumentChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    }\n    initChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    }\n    createFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    renameFile(oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    deleteFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n}\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * {@link TextDocumentIdentifier} literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link VersionedTextDocumentIdentifier} literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link OptionalVersionedTextDocumentIdentifier} literals.\n */\nexport var OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * {@link TextDocumentItem} literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri, languageId, version, text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n    /**\n     * Checks whether the given value is a value of the {@link MarkupKind} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the {@link MarkupContent} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nexport var InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText, insert, replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nexport var InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nexport var CompletionItemLabelDetails;\n(function (CompletionItemLabelDetails) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    CompletionItemLabelDetails.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the {@link MarkedString} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the {@link Hover} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * {@link ParameterInformation} literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label, documentation } : { label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * {@link SignatureInformation} literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation, ...parameters) {\n        let result = { label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * {@link DocumentHighlight} literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     * @param kind The highlight kind\n     */\n    function create(range, kind) {\n        let result = { range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n *\n * @since 3.16\n */\nexport var SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        let result = {\n            name,\n            kind,\n            location: { uri, range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nexport var WorkspaceSymbol;\n(function (WorkspaceSymbol) {\n    /**\n     * Create a new workspace symbol.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param uri The resource of the location of the symbol.\n     * @param range An options range of the location.\n     * @returns A WorkspaceSymbol.\n     */\n    function create(name, kind, uri, range) {\n        return range !== undefined\n            ? { name, kind, location: { uri, range } }\n            : { name, kind, location: { uri } };\n    }\n    WorkspaceSymbol.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nexport var DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        let result = {\n            name,\n            detail,\n            kind,\n            range,\n            selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = '';\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = 'source.fixAll';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The reason why code actions were requested.\n *\n * @since 3.17.0\n */\nexport var CodeActionTriggerKind;\n(function (CodeActionTriggerKind) {\n    /**\n     * Code actions were explicitly requested by the user or by an extension.\n     */\n    CodeActionTriggerKind.Invoked = 1;\n    /**\n     * Code actions were requested automatically.\n     *\n     * This typically happens when current selection in a file changes, but can\n     * also be triggered when file content changes.\n     */\n    CodeActionTriggerKind.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * {@link CodeActionContext} literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only, triggerKind) {\n        let result = { diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        if (triggerKind !== undefined && triggerKind !== null) {\n            result.triggerKind = triggerKind;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)\n            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))\n            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        let result = { title };\n        let checkKind = true;\n        if (typeof kindOrCommandOrEdit === 'string') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * {@link CodeLens} literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        let result = { range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeLens} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * {@link FormattingOptions} literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize, insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * {@link DocumentLink} literals.\n */\nexport var DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range, target, data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nexport var SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range, parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\n/**\n * A set of predefined token types. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenTypes;\n(function (SemanticTokenTypes) {\n    SemanticTokenTypes[\"namespace\"] = \"namespace\";\n    /**\n     * Represents a generic type. Acts as a fallback for types which can't be mapped to\n     * a specific type like class or enum.\n     */\n    SemanticTokenTypes[\"type\"] = \"type\";\n    SemanticTokenTypes[\"class\"] = \"class\";\n    SemanticTokenTypes[\"enum\"] = \"enum\";\n    SemanticTokenTypes[\"interface\"] = \"interface\";\n    SemanticTokenTypes[\"struct\"] = \"struct\";\n    SemanticTokenTypes[\"typeParameter\"] = \"typeParameter\";\n    SemanticTokenTypes[\"parameter\"] = \"parameter\";\n    SemanticTokenTypes[\"variable\"] = \"variable\";\n    SemanticTokenTypes[\"property\"] = \"property\";\n    SemanticTokenTypes[\"enumMember\"] = \"enumMember\";\n    SemanticTokenTypes[\"event\"] = \"event\";\n    SemanticTokenTypes[\"function\"] = \"function\";\n    SemanticTokenTypes[\"method\"] = \"method\";\n    SemanticTokenTypes[\"macro\"] = \"macro\";\n    SemanticTokenTypes[\"keyword\"] = \"keyword\";\n    SemanticTokenTypes[\"modifier\"] = \"modifier\";\n    SemanticTokenTypes[\"comment\"] = \"comment\";\n    SemanticTokenTypes[\"string\"] = \"string\";\n    SemanticTokenTypes[\"number\"] = \"number\";\n    SemanticTokenTypes[\"regexp\"] = \"regexp\";\n    SemanticTokenTypes[\"operator\"] = \"operator\";\n    /**\n     * @since 3.17.0\n     */\n    SemanticTokenTypes[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\n/**\n * A set of predefined token modifiers. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenModifiers;\n(function (SemanticTokenModifiers) {\n    SemanticTokenModifiers[\"declaration\"] = \"declaration\";\n    SemanticTokenModifiers[\"definition\"] = \"definition\";\n    SemanticTokenModifiers[\"readonly\"] = \"readonly\";\n    SemanticTokenModifiers[\"static\"] = \"static\";\n    SemanticTokenModifiers[\"deprecated\"] = \"deprecated\";\n    SemanticTokenModifiers[\"abstract\"] = \"abstract\";\n    SemanticTokenModifiers[\"async\"] = \"async\";\n    SemanticTokenModifiers[\"modification\"] = \"modification\";\n    SemanticTokenModifiers[\"documentation\"] = \"documentation\";\n    SemanticTokenModifiers[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\n/**\n * @since 3.16.0\n */\nexport var SemanticTokens;\n(function (SemanticTokens) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&\n            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');\n    }\n    SemanticTokens.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\n/**\n * The InlineValueText namespace provides functions to deal with InlineValueTexts.\n *\n * @since 3.17.0\n */\nexport var InlineValueText;\n(function (InlineValueText) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, text) {\n        return { range, text };\n    }\n    InlineValueText.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n    }\n    InlineValueText.is = is;\n})(InlineValueText || (InlineValueText = {}));\n/**\n * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.\n *\n * @since 3.17.0\n */\nexport var InlineValueVariableLookup;\n(function (InlineValueVariableLookup) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, variableName, caseSensitiveLookup) {\n        return { range, variableName, caseSensitiveLookup };\n    }\n    InlineValueVariableLookup.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)\n            && (Is.string(candidate.variableName) || candidate.variableName === undefined);\n    }\n    InlineValueVariableLookup.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\n/**\n * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.\n *\n * @since 3.17.0\n */\nexport var InlineValueEvaluatableExpression;\n(function (InlineValueEvaluatableExpression) {\n    /**\n     * Creates a new InlineValueEvaluatableExpression literal.\n     */\n    function create(range, expression) {\n        return { range, expression };\n    }\n    InlineValueEvaluatableExpression.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range)\n            && (Is.string(candidate.expression) || candidate.expression === undefined);\n    }\n    InlineValueEvaluatableExpression.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\n/**\n * The InlineValueContext namespace provides helper functions to work with\n * {@link InlineValueContext} literals.\n *\n * @since 3.17.0\n */\nexport var InlineValueContext;\n(function (InlineValueContext) {\n    /**\n     * Creates a new InlineValueContext literal.\n     */\n    function create(frameId, stoppedLocation) {\n        return { frameId, stoppedLocation };\n    }\n    InlineValueContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.defined(candidate) && Range.is(value.stoppedLocation);\n    }\n    InlineValueContext.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\n/**\n * Inlay hint kinds.\n *\n * @since 3.17.0\n */\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    /**\n     * An inlay hint that for a type annotation.\n     */\n    InlayHintKind.Type = 1;\n    /**\n     * An inlay hint that is for a parameter.\n     */\n    InlayHintKind.Parameter = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    InlayHintKind.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nexport var InlayHintLabelPart;\n(function (InlayHintLabelPart) {\n    function create(value) {\n        return { value };\n    }\n    InlayHintLabelPart.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.location === undefined || Location.is(candidate.location))\n            && (candidate.command === undefined || Command.is(candidate.command));\n    }\n    InlayHintLabelPart.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nexport var InlayHint;\n(function (InlayHint) {\n    function create(position, label, kind) {\n        const result = { position, label };\n        if (kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    InlayHint.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.position)\n            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))\n            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))\n            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))\n            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));\n    }\n    InlayHint.is = is;\n})(InlayHint || (InlayHint = {}));\nexport var StringValue;\n(function (StringValue) {\n    function createSnippet(value) {\n        return { kind: 'snippet', value };\n    }\n    StringValue.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nexport var InlineCompletionItem;\n(function (InlineCompletionItem) {\n    function create(insertText, filterText, range, command) {\n        return { insertText, filterText, range, command };\n    }\n    InlineCompletionItem.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nexport var InlineCompletionList;\n(function (InlineCompletionList) {\n    function create(items) {\n        return { items };\n    }\n    InlineCompletionList.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\n/**\n * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n *\n * @since 3.18.0\n * @proposed\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     */\n    InlineCompletionTriggerKind.Invoked = 0;\n    /**\n     * Completion was triggered automatically while editing.\n     */\n    InlineCompletionTriggerKind.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SelectedCompletionInfo;\n(function (SelectedCompletionInfo) {\n    function create(range, text) {\n        return { range, text };\n    }\n    SelectedCompletionInfo.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nexport var InlineCompletionContext;\n(function (InlineCompletionContext) {\n    function create(triggerKind, selectedCompletionInfo) {\n        return { triggerKind, selectedCompletionInfo };\n    }\n    InlineCompletionContext.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nexport var WorkspaceFolder;\n(function (WorkspaceFolder) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n    }\n    WorkspaceFolder.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nexport const EOL = ['\\n', '\\r\\n', '\\r'];\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId The document's language Id.\n     * @param version The document's version.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ITextDocument} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits, (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = text.length;\n        for (let i = sortedEdits.length - 1; i >= 0; i--) {\n            let e = sortedEdits[i];\n            let startOffset = document.offsetAt(e.range.start);\n            let endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Overlapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        const p = (data.length / 2) | 0;\n        const left = data.slice(0, p);\n        const right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        let leftIdx = 0;\n        let rightIdx = 0;\n        let i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            let ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            let start = this.offsetAt(range.start);\n            let end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            let lineOffsets = [];\n            let text = this._content;\n            let isLineStart = true;\n            for (let i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                let ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n}\nvar Is;\n(function (Is) {\n    const toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === '[object Number]' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IToken, TokenType } from 'chevrotain';\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { AbstractElement } from '../languages/generated/ast.js';\r\nimport type { AstNode, CompositeCstNode, CstNode, LeafCstNode, RootCstNode } from '../syntax-tree.js';\r\nimport { Position } from 'vscode-languageserver-types';\r\nimport { tokenToRange } from '../utils/cst-utils.js';\r\n\r\nexport class CstNodeBuilder {\r\n\r\n    private rootNode!: RootCstNodeImpl;\r\n    private nodeStack: CompositeCstNodeImpl[] = [];\r\n\r\n    get current(): CompositeCstNodeImpl {\r\n        return this.nodeStack[this.nodeStack.length - 1] ?? this.rootNode;\r\n    }\r\n\r\n    buildRootNode(input: string): RootCstNode {\r\n        this.rootNode = new RootCstNodeImpl(input);\r\n        this.rootNode.root = this.rootNode;\r\n        this.nodeStack = [this.rootNode];\r\n        return this.rootNode;\r\n    }\r\n\r\n    buildCompositeNode(feature: AbstractElement): CompositeCstNode {\r\n        const compositeNode = new CompositeCstNodeImpl();\r\n        compositeNode.grammarSource = feature;\r\n        compositeNode.root = this.rootNode;\r\n        this.current.content.push(compositeNode);\r\n        this.nodeStack.push(compositeNode);\r\n        return compositeNode;\r\n    }\r\n\r\n    buildLeafNode(token: IToken, feature?: AbstractElement): LeafCstNode {\r\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, !feature);\r\n        leafNode.grammarSource = feature;\r\n        leafNode.root = this.rootNode;\r\n        this.current.content.push(leafNode);\r\n        return leafNode;\r\n    }\r\n\r\n    removeNode(node: CstNode): void {\r\n        const parent = node.container;\r\n        if (parent) {\r\n            const index = parent.content.indexOf(node);\r\n            if (index >= 0) {\r\n                parent.content.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    addHiddenNodes(tokens: IToken[]): void {\r\n        const nodes: LeafCstNode[] = [];\r\n        for (const token of tokens) {\r\n            const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, true);\r\n            leafNode.root = this.rootNode;\r\n            nodes.push(leafNode);\r\n        }\r\n        let current: CompositeCstNode = this.current;\r\n        let added = false;\r\n        // If we are within a composite node, we add the hidden nodes to the content\r\n        if (current.content.length > 0) {\r\n            current.content.push(...nodes);\r\n            return;\r\n        }\r\n        // Otherwise we are at a newly created node\r\n        // Instead of adding the hidden nodes here, we search for the first parent node with content\r\n        while (current.container) {\r\n            const index = current.container.content.indexOf(current);\r\n            if (index > 0) {\r\n                // Add the hidden nodes before the current node\r\n                current.container.content.splice(index, 0, ...nodes);\r\n                added = true;\r\n                break;\r\n            }\r\n            current = current.container;\r\n        }\r\n        // If we arrive at the root node, we add the hidden nodes at the beginning\r\n        // This is the case if the hidden nodes are the first nodes in the tree\r\n        if (!added) {\r\n            this.rootNode.content.unshift(...nodes);\r\n        }\r\n    }\r\n\r\n    construct(item: { $type: string | symbol | undefined, $cstNode: CstNode }): void {\r\n        const current: CstNode = this.current;\r\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\r\n        // Only if the $type is a string, we actually assign the element\r\n        if (typeof item.$type === 'string') {\r\n            this.current.astNode = <AstNode>item;\r\n        }\r\n        item.$cstNode = current;\r\n        const node = this.nodeStack.pop();\r\n        // Empty composite nodes are not valid\r\n        // Simply remove the node from the tree\r\n        if (node?.content.length === 0) {\r\n            this.removeNode(node);\r\n        }\r\n    }\r\n}\r\n\r\nexport abstract class AbstractCstNode implements CstNode {\r\n    abstract get offset(): number;\r\n    abstract get length(): number;\r\n    abstract get end(): number;\r\n    abstract get range(): Range;\r\n\r\n    container?: CompositeCstNode;\r\n    grammarSource?: AbstractElement;\r\n    root: RootCstNode;\r\n    private _astNode?: AstNode;\r\n\r\n    /** @deprecated use `container` instead. */\r\n    get parent(): CompositeCstNode | undefined {\r\n        return this.container;\r\n    }\r\n\r\n    /** @deprecated use `grammarSource` instead. */\r\n    get feature(): AbstractElement | undefined {\r\n        return this.grammarSource;\r\n    }\r\n\r\n    get hidden(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get astNode(): AstNode {\r\n        const node = typeof this._astNode?.$type === 'string' ? this._astNode : this.container?.astNode;\r\n        if (!node) {\r\n            throw new Error('This node has no associated AST element');\r\n        }\r\n        return node;\r\n    }\r\n\r\n    set astNode(value: AstNode | undefined) {\r\n        this._astNode = value;\r\n    }\r\n\r\n    /** @deprecated use `astNode` instead. */\r\n    get element(): AstNode {\r\n        return this.astNode;\r\n    }\r\n\r\n    get text(): string {\r\n        return this.root.fullText.substring(this.offset, this.end);\r\n    }\r\n}\r\n\r\nexport class LeafCstNodeImpl extends AbstractCstNode implements LeafCstNode {\r\n    get offset(): number {\r\n        return this._offset;\r\n    }\r\n\r\n    get length(): number {\r\n        return this._length;\r\n    }\r\n\r\n    get end(): number {\r\n        return this._offset + this._length;\r\n    }\r\n\r\n    override get hidden(): boolean {\r\n        return this._hidden;\r\n    }\r\n\r\n    get tokenType(): TokenType {\r\n        return this._tokenType;\r\n    }\r\n\r\n    get range(): Range {\r\n        return this._range;\r\n    }\r\n\r\n    private _hidden: boolean;\r\n    private _offset: number;\r\n    private _length: number;\r\n    private _range: Range;\r\n    private _tokenType: TokenType;\r\n\r\n    constructor(offset: number, length: number, range: Range, tokenType: TokenType, hidden = false) {\r\n        super();\r\n        this._hidden = hidden;\r\n        this._offset = offset;\r\n        this._tokenType = tokenType;\r\n        this._length = length;\r\n        this._range = range;\r\n    }\r\n}\r\n\r\nexport class CompositeCstNodeImpl extends AbstractCstNode implements CompositeCstNode {\r\n    readonly content: CstNode[] = new CstNodeContainer(this);\r\n    private _rangeCache?: Range;\r\n\r\n    /** @deprecated use `content` instead. */\r\n    get children(): CstNode[] {\r\n        return this.content;\r\n    }\r\n\r\n    get offset(): number {\r\n        return this.firstNonHiddenNode?.offset ?? 0;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.end - this.offset;\r\n    }\r\n\r\n    get end(): number {\r\n        return this.lastNonHiddenNode?.end ?? 0;\r\n    }\r\n\r\n    get range(): Range {\r\n        const firstNode = this.firstNonHiddenNode;\r\n        const lastNode = this.lastNonHiddenNode;\r\n        if (firstNode && lastNode) {\r\n            if (this._rangeCache === undefined) {\r\n                const { range: firstRange } = firstNode;\r\n                const { range: lastRange } = lastNode;\r\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\r\n            }\r\n            return this._rangeCache;\r\n        } else {\r\n            return { start: Position.create(0, 0), end: Position.create(0, 0) };\r\n        }\r\n    }\r\n\r\n    private get firstNonHiddenNode(): CstNode | undefined {\r\n        for (const child of this.content) {\r\n            if (!child.hidden) {\r\n                return child;\r\n            }\r\n        }\r\n        return this.content[0];\r\n    }\r\n\r\n    private get lastNonHiddenNode(): CstNode | undefined {\r\n        for (let i = this.content.length - 1; i >= 0; i--) {\r\n            const child = this.content[i];\r\n            if (!child.hidden) {\r\n                return child;\r\n            }\r\n        }\r\n        return this.content[this.content.length - 1];\r\n    }\r\n}\r\n\r\nclass CstNodeContainer extends Array<CstNode> {\r\n    readonly parent: CompositeCstNode;\r\n\r\n    constructor(parent: CompositeCstNode) {\r\n        super();\r\n        this.parent = parent;\r\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\r\n    }\r\n\r\n    override push(...items: CstNode[]): number {\r\n        this.addParents(items);\r\n        return super.push(...items);\r\n    }\r\n\r\n    override unshift(...items: CstNode[]): number {\r\n        this.addParents(items);\r\n        return super.unshift(...items);\r\n    }\r\n\r\n    override splice(start: number, count: number, ...items: CstNode[]): CstNode[] {\r\n        this.addParents(items);\r\n        return super.splice(start, count, ...items);\r\n    }\r\n\r\n    private addParents(items: CstNode[]): void {\r\n        for (const item of items) {\r\n            (<AbstractCstNode>item).container = this.parent;\r\n        }\r\n    }\r\n}\r\n\r\nexport class RootCstNodeImpl extends CompositeCstNodeImpl implements RootCstNode {\r\n    private _text = '';\r\n\r\n    override get text(): string {\r\n        return this._text.substring(this.offset, this.end);\r\n    }\r\n\r\n    get fullText(): string {\r\n        return this._text;\r\n    }\r\n\r\n    constructor(input?: string) {\r\n        super();\r\n        this._text = input ?? '';\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { DSLMethodOpts, ILexingError, IOrAlt, IParserErrorMessageProvider, IRecognitionException, IToken, TokenType, TokenVocabulary } from 'chevrotain';\r\nimport type { AbstractElement, Action, Assignment, ParserRule } from '../languages/generated/ast.js';\r\nimport type { Linker } from '../references/linker.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstReflection, CompositeCstNode, CstNode } from '../syntax-tree.js';\r\nimport type { Lexer, LexerResult } from './lexer.js';\r\nimport type { IParserConfig } from './parser-config.js';\r\nimport type { ValueConverter } from './value-converter.js';\r\nimport { defaultParserErrorProvider, EmbeddedActionsParser, LLkLookaheadStrategy } from 'chevrotain';\r\nimport { LLStarLookaheadStrategy } from 'chevrotain-allstar';\r\nimport { isAssignment, isCrossReference, isKeyword } from '../languages/generated/ast.js';\r\nimport { getExplicitRuleType, isDataTypeRule } from '../utils/grammar-utils.js';\r\nimport { assignMandatoryProperties, getContainerOfType, linkContentToContainer } from '../utils/ast-utils.js';\r\nimport { CstNodeBuilder } from './cst-node-builder.js';\r\nimport type { LexingReport } from './token-builder.js';\r\n\r\nexport type ParseResult<T = AstNode> = {\r\n    value: T,\r\n    parserErrors: IRecognitionException[],\r\n    lexerErrors: ILexingError[],\r\n    lexerReport?: LexingReport\r\n}\r\n\r\nexport const DatatypeSymbol = Symbol('Datatype');\r\n\r\ninterface DataTypeNode {\r\n    $cstNode: CompositeCstNode\r\n    /** Instead of a string, this node is uniquely identified by the `Datatype` symbol */\r\n    $type: symbol\r\n    /** Used as a storage for all parsed terminals, keywords and sub-datatype rules */\r\n    value: string\r\n}\r\n\r\nfunction isDataTypeNode(node: { $type: string | symbol | undefined }): node is DataTypeNode {\r\n    return node.$type === DatatypeSymbol;\r\n}\r\n\r\ntype RuleResult = (args: Args) => any;\r\n\r\ntype Args = Record<string, boolean>;\r\n\r\ntype RuleImpl = (args: Args) => any;\r\n\r\ninterface AssignmentElement {\r\n    assignment?: Assignment\r\n    isCrossRef: boolean\r\n}\r\n\r\n/**\r\n * Base interface for all parsers. Mainly used by the `parser-builder-base.ts` to perform work on different kinds of parsers.\r\n * The main use cases are:\r\n * * AST parser: Based on a string, create an AST for the current grammar\r\n * * Completion parser: Based on a partial string, identify the current position of the input within the grammar\r\n */\r\nexport interface BaseParser {\r\n    /**\r\n     * Adds a new parser rule to the parser\r\n     */\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult;\r\n    /**\r\n     * Returns the executable rule function for the specified rule name\r\n     */\r\n    getRule(name: string): RuleResult | undefined;\r\n    /**\r\n     * Performs alternatives parsing (the `|` operation in EBNF/Langium)\r\n     */\r\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void;\r\n    /**\r\n     * Parses the callback as optional (the `?` operation in EBNF/Langium)\r\n     */\r\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Parses the callback 0 or more times (the `*` operation in EBNF/Langium)\r\n     */\r\n    many(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Parses the callback 1 or more times (the `+` operation in EBNF/Langium)\r\n     */\r\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Consumes a specific token type from the token input stream.\r\n     * Requires a unique index within the rule for a specific token type.\r\n     */\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\r\n    /**\r\n     * Invokes the executable function for a given parser rule.\r\n     * Requires a unique index within the rule for a specific sub rule.\r\n     * Arguments can be supplied to the rule invocation for semantic predicates\r\n     */\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void;\r\n    /**\r\n     * Executes a grammar action that modifies the currently active AST node\r\n     */\r\n    action($type: string, action: Action): void;\r\n    /**\r\n     * Finishes construction of the current AST node. Only used by the AST parser.\r\n     */\r\n    construct(): unknown;\r\n    /**\r\n     * Whether the parser is currently actually in use or in \"recording mode\".\r\n     * Recording mode is activated once when the parser is analyzing itself.\r\n     * During this phase, no input exists and therefore no AST should be constructed\r\n     */\r\n    isRecording(): boolean;\r\n    /**\r\n     * Current state of the unordered groups\r\n     */\r\n    get unorderedGroups(): Map<string, boolean[]>;\r\n    /**\r\n     * The rule stack indicates the indices of rules that are currently invoked,\r\n     * in order of their invocation.\r\n     */\r\n    getRuleStack(): number[];\r\n}\r\n\r\nconst ruleSuffix = '\\u200B';\r\nconst withRuleSuffix = (name: string): string => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\r\n\r\nexport abstract class AbstractLangiumParser implements BaseParser {\r\n\r\n    protected readonly lexer: Lexer;\r\n    protected readonly wrapper: ChevrotainWrapper;\r\n    protected _unorderedGroups: Map<string, boolean[]> = new Map<string, boolean[]>();\r\n\r\n    protected allRules = new Map<string, RuleResult>();\r\n    protected mainRule!: RuleResult;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.lexer = services.parser.Lexer;\r\n        const tokens = this.lexer.definition;\r\n        const production = services.LanguageMetaData.mode === 'production';\r\n        this.wrapper = new ChevrotainWrapper(tokens, {\r\n            ...services.parser.ParserConfig,\r\n            skipValidations: production,\r\n            errorMessageProvider: services.parser.ParserErrorMessageProvider\r\n        });\r\n    }\r\n\r\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void {\r\n        this.wrapper.wrapOr(idx, choices);\r\n    }\r\n\r\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapOption(idx, callback);\r\n    }\r\n\r\n    many(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapMany(idx, callback);\r\n    }\r\n\r\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapAtLeastOne(idx, callback);\r\n    }\r\n\r\n    abstract rule(rule: ParserRule, impl: RuleImpl): RuleResult;\r\n    abstract consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\r\n    abstract subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void;\r\n    abstract action($type: string, action: Action): void;\r\n    abstract construct(): unknown;\r\n\r\n    getRule(name: string): RuleResult | undefined {\r\n        return this.allRules.get(name);\r\n    }\r\n\r\n    isRecording(): boolean {\r\n        return this.wrapper.IS_RECORDING;\r\n    }\r\n\r\n    get unorderedGroups(): Map<string, boolean[]> {\r\n        return this._unorderedGroups;\r\n    }\r\n\r\n    getRuleStack(): number[] {\r\n        return (this.wrapper as any).RULE_STACK;\r\n    }\r\n\r\n    finalize(): void {\r\n        this.wrapper.wrapSelfAnalysis();\r\n    }\r\n}\r\n\r\nexport interface ParserOptions {\r\n    rule?: string\r\n}\r\n\r\nexport class LangiumParser extends AbstractLangiumParser {\r\n    private readonly linker: Linker;\r\n    private readonly converter: ValueConverter;\r\n    private readonly astReflection: AstReflection;\r\n    private readonly nodeBuilder = new CstNodeBuilder();\r\n    private lexerResult?: LexerResult;\r\n    private stack: any[] = [];\r\n    private assignmentMap = new Map<AbstractElement, AssignmentElement | undefined>();\r\n\r\n    private get current(): any {\r\n        return this.stack[this.stack.length - 1];\r\n    }\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        super(services);\r\n        this.linker = services.references.Linker;\r\n        this.converter = services.parser.ValueConverter;\r\n        this.astReflection = services.shared.AstReflection;\r\n    }\r\n\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\r\n        const type = this.computeRuleType(rule);\r\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\r\n        this.allRules.set(rule.name, ruleMethod);\r\n        if (rule.entry) {\r\n            this.mainRule = ruleMethod;\r\n        }\r\n        return ruleMethod;\r\n    }\r\n\r\n    private computeRuleType(rule: ParserRule): string | symbol | undefined {\r\n        if (rule.fragment) {\r\n            return undefined;\r\n        } else if (isDataTypeRule(rule)) {\r\n            return DatatypeSymbol;\r\n        } else {\r\n            const explicit = getExplicitRuleType(rule);\r\n            return explicit ?? rule.name;\r\n        }\r\n    }\r\n\r\n    parse<T extends AstNode = AstNode>(input: string, options: ParserOptions = {}): ParseResult<T> {\r\n        this.nodeBuilder.buildRootNode(input);\r\n        const lexerResult = this.lexerResult = this.lexer.tokenize(input);\r\n        this.wrapper.input = lexerResult.tokens;\r\n        const ruleMethod = options.rule ? this.allRules.get(options.rule) : this.mainRule;\r\n        if (!ruleMethod) {\r\n            throw new Error(options.rule ? `No rule found with name '${options.rule}'` : 'No main rule available.');\r\n        }\r\n        const result = ruleMethod.call(this.wrapper, {});\r\n        this.nodeBuilder.addHiddenNodes(lexerResult.hidden);\r\n        this.unorderedGroups.clear();\r\n        this.lexerResult = undefined;\r\n        return {\r\n            value: result,\r\n            lexerErrors: lexerResult.errors,\r\n            lexerReport: lexerResult.report,\r\n            parserErrors: this.wrapper.errors\r\n        };\r\n    }\r\n\r\n    private startImplementation($type: string | symbol | undefined, implementation: RuleImpl): RuleImpl {\r\n        return (args) => {\r\n            // Only create a new AST node in case the calling rule is not a fragment rule\r\n            const createNode = !this.isRecording() && $type !== undefined;\r\n            if (createNode) {\r\n                const node: any = { $type };\r\n                this.stack.push(node);\r\n                if ($type === DatatypeSymbol) {\r\n                    node.value = '';\r\n                }\r\n            }\r\n            let result: unknown;\r\n            try {\r\n                result = implementation(args);\r\n            } catch (err) {\r\n                result = undefined;\r\n            }\r\n            if (result === undefined && createNode) {\r\n                result = this.construct();\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n\r\n    private extractHiddenTokens(token: IToken): IToken[] {\r\n        const hiddenTokens = this.lexerResult!.hidden;\r\n        if (!hiddenTokens.length) {\r\n            return [];\r\n        }\r\n        const offset = token.startOffset;\r\n        for (let i = 0; i < hiddenTokens.length; i++) {\r\n            const token = hiddenTokens[i];\r\n            if (token.startOffset > offset) {\r\n                return hiddenTokens.splice(0, i);\r\n            }\r\n        }\r\n        return hiddenTokens.splice(0, hiddenTokens.length);\r\n    }\r\n\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\r\n        const token = this.wrapper.wrapConsume(idx, tokenType);\r\n        if (!this.isRecording() && this.isValidToken(token)) {\r\n            const hiddenTokens = this.extractHiddenTokens(token);\r\n            this.nodeBuilder.addHiddenNodes(hiddenTokens);\r\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\r\n            const { assignment, isCrossRef } = this.getAssignment(feature);\r\n            const current = this.current;\r\n            if (assignment) {\r\n                const convertedValue = isKeyword(feature) ? token.image : this.converter.convert(token.image, leafNode);\r\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\r\n            } else if (isDataTypeNode(current)) {\r\n                let text = token.image;\r\n                if (!isKeyword(feature)) {\r\n                    text = this.converter.convert(text, leafNode).toString();\r\n                }\r\n                current.value += text;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\r\n     *\r\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\r\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\r\n     */\r\n    private isValidToken(token: IToken): boolean {\r\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\r\n    }\r\n\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void {\r\n        let cstNode: CompositeCstNode | undefined;\r\n        if (!this.isRecording() && !fragment) {\r\n            // We only want to create a new CST node if the subrule actually creates a new AST node.\r\n            // In other cases like calls of fragment rules the current CST/AST is populated further.\r\n            // Note that skipping this initialization and leaving cstNode unassigned also skips the subrule assignment later on.\r\n            // This is intended, as fragment rules only enrich the current AST node\r\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\r\n        }\r\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args) as any;\r\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\r\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\r\n        }\r\n    }\r\n\r\n    private performSubruleAssignment(result: any, feature: AbstractElement, cstNode: CompositeCstNode): void {\r\n        const { assignment, isCrossRef } = this.getAssignment(feature);\r\n        if (assignment) {\r\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\r\n        } else if (!assignment) {\r\n            // If we call a subrule without an assignment we either:\r\n            // 1. append the result of the subrule (data type rule)\r\n            // 2. override the current object with the newly parsed object\r\n            // If the current element is an AST node and the result of the subrule\r\n            // is a data type rule, we can safely discard the results.\r\n            const current = this.current;\r\n            if (isDataTypeNode(current)) {\r\n                current.value += result.toString();\r\n            } else if (typeof result === 'object' && result) {\r\n                const object = this.assignWithoutOverride(result, current);\r\n                const newItem = object;\r\n                this.stack.pop();\r\n                this.stack.push(newItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    action($type: string, action: Action): void {\r\n        if (!this.isRecording()) {\r\n            let last = this.current;\r\n            if (action.feature && action.operator) {\r\n                last = this.construct();\r\n                this.nodeBuilder.removeNode(last.$cstNode);\r\n                const node = this.nodeBuilder.buildCompositeNode(action);\r\n                node.content.push(last.$cstNode);\r\n                const newItem = { $type };\r\n                this.stack.push(newItem);\r\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\r\n            } else {\r\n                last.$type = $type;\r\n            }\r\n        }\r\n    }\r\n\r\n    construct(): unknown {\r\n        if (this.isRecording()) {\r\n            return undefined;\r\n        }\r\n        const obj = this.current;\r\n        linkContentToContainer(obj);\r\n        this.nodeBuilder.construct(obj);\r\n        this.stack.pop();\r\n        if (isDataTypeNode(obj)) {\r\n            return this.converter.convert(obj.value, obj.$cstNode);\r\n        } else {\r\n            assignMandatoryProperties(this.astReflection, obj);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    private getAssignment(feature: AbstractElement): AssignmentElement {\r\n        if (!this.assignmentMap.has(feature)) {\r\n            const assignment = getContainerOfType(feature, isAssignment);\r\n            this.assignmentMap.set(feature, {\r\n                assignment: assignment,\r\n                isCrossRef: assignment ? isCrossReference(assignment.terminal) : false\r\n            });\r\n        }\r\n        return this.assignmentMap.get(feature)!;\r\n    }\r\n\r\n    private assign(operator: string, feature: string, value: unknown, cstNode: CstNode, isCrossRef: boolean): void {\r\n        const obj = this.current;\r\n        let item: unknown;\r\n        if (isCrossRef && typeof value === 'string') {\r\n            item = this.linker.buildReference(obj, feature, cstNode, value);\r\n        } else {\r\n            item = value;\r\n        }\r\n        switch (operator) {\r\n            case '=': {\r\n                obj[feature] = item;\r\n                break;\r\n            }\r\n            case '?=': {\r\n                obj[feature] = true;\r\n                break;\r\n            }\r\n            case '+=': {\r\n                if (!Array.isArray(obj[feature])) {\r\n                    obj[feature] = [];\r\n                }\r\n                obj[feature].push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    private assignWithoutOverride(target: any, source: any): any {\r\n        for (const [name, existingValue] of Object.entries(source)) {\r\n            const newValue = target[name];\r\n            if (newValue === undefined) {\r\n                target[name] = existingValue;\r\n            } else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\r\n                existingValue.push(...newValue);\r\n                target[name] = existingValue;\r\n            }\r\n        }\r\n        // The target was parsed from a unassigned subrule\r\n        // After the subrule construction, it received a cst node\r\n        // This CST node will later be overriden by the cst node builder\r\n        // To prevent references to stale AST nodes in the CST,\r\n        // we need to remove the reference here\r\n        const targetCstNode = target.$cstNode;\r\n        if (targetCstNode) {\r\n            targetCstNode.astNode = undefined;\r\n            target.$cstNode = undefined;\r\n        }\r\n        return target;\r\n    }\r\n\r\n    get definitionErrors(): IParserDefinitionError[] {\r\n        return this.wrapper.definitionErrors;\r\n    }\r\n}\r\n\r\nexport interface IParserDefinitionError {\r\n    message: string\r\n    type: number\r\n    ruleName?: string\r\n}\r\n\r\nexport abstract class AbstractParserErrorMessageProvider implements IParserErrorMessageProvider {\r\n\r\n    buildMismatchTokenMessage(options: {\r\n        expected: TokenType\r\n        actual: IToken\r\n        previous: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildMismatchTokenMessage(options);\r\n    }\r\n\r\n    buildNotAllInputParsedMessage(options: {\r\n        firstRedundant: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\r\n    }\r\n\r\n    buildNoViableAltMessage(options: {\r\n        expectedPathsPerAlt: TokenType[][][]\r\n        actual: IToken[]\r\n        previous: IToken\r\n        customUserDescription: string\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildNoViableAltMessage(options);\r\n    }\r\n\r\n    buildEarlyExitMessage(options: {\r\n        expectedIterationPaths: TokenType[][]\r\n        actual: IToken[]\r\n        previous: IToken\r\n        customUserDescription: string\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildEarlyExitMessage(options);\r\n    }\r\n\r\n}\r\n\r\nexport class LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\r\n\r\n    override buildMismatchTokenMessage({ expected, actual }: {\r\n        expected: TokenType\r\n        actual: IToken\r\n        previous: IToken\r\n        ruleName: string\r\n    }): string {\r\n        const expectedMsg = expected.LABEL\r\n            ? '`' + expected.LABEL + '`'\r\n            : expected.name.endsWith(':KW')\r\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\r\n                : `token of type '${expected.name}'`;\r\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\r\n    }\r\n\r\n    override buildNotAllInputParsedMessage({ firstRedundant }: {\r\n        firstRedundant: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\r\n    }\r\n}\r\n\r\nexport interface CompletionParserResult {\r\n    tokens: IToken[]\r\n    elementStack: AbstractElement[]\r\n    tokenIndex: number\r\n}\r\n\r\nexport class LangiumCompletionParser extends AbstractLangiumParser {\r\n    private tokens: IToken[] = [];\r\n\r\n    private elementStack: AbstractElement[] = [];\r\n    private lastElementStack: AbstractElement[] = [];\r\n    private nextTokenIndex = 0;\r\n    private stackSize = 0;\r\n\r\n    action(): void {\r\n        // NOOP\r\n    }\r\n\r\n    construct(): unknown {\r\n        // NOOP\r\n        return undefined;\r\n    }\r\n\r\n    parse(input: string): CompletionParserResult {\r\n        this.resetState();\r\n        const tokens = this.lexer.tokenize(input, { mode: 'partial' });\r\n        this.tokens = tokens.tokens;\r\n        this.wrapper.input = [...this.tokens];\r\n        this.mainRule.call(this.wrapper, {});\r\n        this.unorderedGroups.clear();\r\n        return {\r\n            tokens: this.tokens,\r\n            elementStack: [...this.lastElementStack],\r\n            tokenIndex: this.nextTokenIndex\r\n        };\r\n    }\r\n\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\r\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\r\n        this.allRules.set(rule.name, ruleMethod);\r\n        if (rule.entry) {\r\n            this.mainRule = ruleMethod;\r\n        }\r\n        return ruleMethod;\r\n    }\r\n\r\n    private resetState(): void {\r\n        this.elementStack = [];\r\n        this.lastElementStack = [];\r\n        this.nextTokenIndex = 0;\r\n        this.stackSize = 0;\r\n    }\r\n\r\n    private startImplementation(implementation: RuleImpl): RuleImpl {\r\n        return (args) => {\r\n            const size = this.keepStackSize();\r\n            try {\r\n                implementation(args);\r\n            } finally {\r\n                this.resetStackSize(size);\r\n            }\r\n        };\r\n    }\r\n\r\n    private removeUnexpectedElements(): void {\r\n        this.elementStack.splice(this.stackSize);\r\n    }\r\n\r\n    keepStackSize(): number {\r\n        const size = this.elementStack.length;\r\n        this.stackSize = size;\r\n        return size;\r\n    }\r\n\r\n    resetStackSize(size: number): void {\r\n        this.removeUnexpectedElements();\r\n        this.stackSize = size;\r\n    }\r\n\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\r\n        this.wrapper.wrapConsume(idx, tokenType);\r\n        if (!this.isRecording()) {\r\n            this.lastElementStack = [...this.elementStack, feature];\r\n            this.nextTokenIndex = this.currIdx + 1;\r\n        }\r\n    }\r\n\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void {\r\n        this.before(feature);\r\n        this.wrapper.wrapSubrule(idx, rule, args);\r\n        this.after(feature);\r\n    }\r\n\r\n    before(element: AbstractElement): void {\r\n        if (!this.isRecording()) {\r\n            this.elementStack.push(element);\r\n        }\r\n    }\r\n\r\n    after(element: AbstractElement): void {\r\n        if (!this.isRecording()) {\r\n            const index = this.elementStack.lastIndexOf(element);\r\n            if (index >= 0) {\r\n                this.elementStack.splice(index);\r\n            }\r\n        }\r\n    }\r\n\r\n    get currIdx(): number {\r\n        return (this.wrapper as any).currIdx;\r\n    }\r\n}\r\n\r\nconst defaultConfig: IParserConfig = {\r\n    recoveryEnabled: true,\r\n    nodeLocationTracking: 'full',\r\n    skipValidations: true,\r\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\r\n};\r\n\r\n/**\r\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\r\n * This way, we can build the `LangiumParser` as a composition.\r\n */\r\nclass ChevrotainWrapper extends EmbeddedActionsParser {\r\n\r\n    // This array is set in the base implementation of Chevrotain.\r\n    definitionErrors: IParserDefinitionError[];\r\n\r\n    constructor(tokens: TokenVocabulary, config: IParserConfig) {\r\n        const useDefaultLookahead = config && 'maxLookahead' in config;\r\n        super(tokens, {\r\n            ...defaultConfig,\r\n            lookaheadStrategy: useDefaultLookahead\r\n                ? new LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\r\n                : new LLStarLookaheadStrategy({\r\n                    // If validations are skipped, don't log the lookahead warnings\r\n                    logging: config.skipValidations ? () => { } : undefined\r\n                }),\r\n            ...config,\r\n        });\r\n    }\r\n\r\n    get IS_RECORDING(): boolean {\r\n        return this.RECORDING_PHASE;\r\n    }\r\n\r\n    DEFINE_RULE(name: string, impl: RuleImpl): RuleResult {\r\n        return this.RULE(name, impl);\r\n    }\r\n\r\n    wrapSelfAnalysis(): void {\r\n        this.performSelfAnalysis();\r\n    }\r\n\r\n    wrapConsume(idx: number, tokenType: TokenType): IToken {\r\n        return this.consume(idx, tokenType);\r\n    }\r\n\r\n    wrapSubrule(idx: number, rule: RuleResult, args: Args): unknown {\r\n        return this.subrule(idx, rule, {\r\n            ARGS: [args]\r\n        });\r\n    }\r\n\r\n    wrapOr(idx: number, choices: Array<IOrAlt<any>>): void {\r\n        this.or(idx, choices);\r\n    }\r\n\r\n    wrapOption(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.option(idx, callback);\r\n    }\r\n\r\n    wrapMany(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.many(idx, callback);\r\n    }\r\n\r\n    wrapAtLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.atLeastOne(idx, callback);\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IOrAlt, TokenType, TokenTypeDictionary } from 'chevrotain';\r\nimport type { AbstractElement, Action, Alternatives, Condition, CrossReference, Grammar, Group, Keyword, NamedArgument, ParserRule, RuleCall, UnorderedGroup } from '../languages/generated/ast.js';\r\nimport type { BaseParser } from './langium-parser.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { Cardinality } from '../utils/grammar-utils.js';\r\nimport { EMPTY_ALT, EOF } from 'chevrotain';\r\nimport { isAction, isAlternatives, isEndOfFile, isAssignment, isConjunction, isCrossReference, isDisjunction, isGroup, isKeyword, isNegation, isParameterReference, isParserRule, isRuleCall, isTerminalRule, isUnorderedGroup, isBooleanLiteral } from '../languages/generated/ast.js';\r\nimport { assertUnreachable, ErrorWithLocation } from '../utils/errors.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { findNameAssignment, getAllReachableRules, getTypeName } from '../utils/grammar-utils.js';\r\n\r\ntype RuleContext = {\r\n    optional: number,\r\n    consume: number,\r\n    subrule: number,\r\n    many: number,\r\n    or: number\r\n} & ParserContext;\r\n\r\ntype ParserContext = {\r\n    parser: BaseParser\r\n    tokens: TokenTypeDictionary\r\n    ruleNames: Map<AstNode, string>\r\n}\r\n\r\ntype Rule = (args: Args) => unknown;\r\n\r\ntype Args = Record<string, boolean>;\r\n\r\ntype Predicate = (args: Args) => boolean;\r\n\r\ntype Method = (args: Args) => void;\r\n\r\nexport function createParser<T extends BaseParser>(grammar: Grammar, parser: T, tokens: TokenTypeDictionary): T {\r\n    const parserContext: ParserContext = {\r\n        parser,\r\n        tokens,\r\n        ruleNames: new Map()\r\n    };\r\n    buildRules(parserContext, grammar);\r\n    return parser;\r\n}\r\n\r\nfunction buildRules(parserContext: ParserContext, grammar: Grammar): void {\r\n    const reachable = getAllReachableRules(grammar, false);\r\n    const parserRules = stream(grammar.rules).filter(isParserRule).filter(rule => reachable.has(rule));\r\n    for (const rule of parserRules) {\r\n        const ctx: RuleContext = {\r\n            ...parserContext,\r\n            consume: 1,\r\n            optional: 1,\r\n            subrule: 1,\r\n            many: 1,\r\n            or: 1\r\n        };\r\n        parserContext.parser.rule(rule, buildElement(ctx, rule.definition));\r\n    }\r\n}\r\n\r\nfunction buildElement(ctx: RuleContext, element: AbstractElement, ignoreGuard = false): Method {\r\n    let method: Method;\r\n    if (isKeyword(element)) {\r\n        method = buildKeyword(ctx, element);\r\n    } else if (isAction(element)) {\r\n        method = buildAction(ctx, element);\r\n    } else if (isAssignment(element)) {\r\n        method = buildElement(ctx, element.terminal);\r\n    } else if (isCrossReference(element)) {\r\n        method = buildCrossReference(ctx, element);\r\n    } else if (isRuleCall(element)) {\r\n        method = buildRuleCall(ctx, element);\r\n    } else if (isAlternatives(element)) {\r\n        method = buildAlternatives(ctx, element);\r\n    } else if (isUnorderedGroup(element)) {\r\n        method = buildUnorderedGroup(ctx, element);\r\n    } else if (isGroup(element)) {\r\n        method = buildGroup(ctx, element);\r\n    } else if(isEndOfFile(element)) {\r\n        const idx = ctx.consume++;\r\n        method = () => ctx.parser.consume(idx, EOF, element);\r\n    } else {\r\n        throw new ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\r\n    }\r\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\r\n}\r\n\r\nfunction buildAction(ctx: RuleContext, action: Action): Method {\r\n    const actionType = getTypeName(action);\r\n    return () => ctx.parser.action(actionType, action);\r\n}\r\n\r\nfunction buildRuleCall(ctx: RuleContext, ruleCall: RuleCall): Method {\r\n    const rule = ruleCall.rule.ref;\r\n    if (isParserRule(rule)) {\r\n        const idx = ctx.subrule++;\r\n        const fragment = rule.fragment;\r\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\r\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), fragment, ruleCall, predicate(args));\r\n    } else if (isTerminalRule(rule)) {\r\n        const idx = ctx.consume++;\r\n        const method = getToken(ctx, rule.name);\r\n        return () => ctx.parser.consume(idx, method, ruleCall);\r\n    } else if (!rule) {\r\n        throw new ErrorWithLocation(ruleCall.$cstNode, `Undefined rule: ${ruleCall.rule.$refText}`);\r\n    } else {\r\n        assertUnreachable(rule);\r\n    }\r\n}\r\n\r\nfunction buildRuleCallPredicate(rule: ParserRule, namedArgs: NamedArgument[]): (args: Args) => Args {\r\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\r\n    return (args) => {\r\n        const ruleArgs: Args = {};\r\n        for (let i = 0; i < predicates.length; i++) {\r\n            const ruleTarget = rule.parameters[i];\r\n            const predicate = predicates[i];\r\n            ruleArgs[ruleTarget.name] = predicate(args);\r\n        }\r\n        return ruleArgs;\r\n    };\r\n}\r\n\r\ninterface PredicatedMethod {\r\n    ALT: Method,\r\n    GATE?: Predicate\r\n}\r\n\r\nfunction buildPredicate(condition: Condition): Predicate {\r\n    if (isDisjunction(condition)) {\r\n        const left = buildPredicate(condition.left);\r\n        const right = buildPredicate(condition.right);\r\n        return (args) => (left(args) || right(args));\r\n    } else if (isConjunction(condition)) {\r\n        const left = buildPredicate(condition.left);\r\n        const right = buildPredicate(condition.right);\r\n        return (args) => (left(args) && right(args));\r\n    } else if (isNegation(condition)) {\r\n        const value = buildPredicate(condition.value);\r\n        return (args) => !value(args);\r\n    } else if (isParameterReference(condition)) {\r\n        const name = condition.parameter.ref!.name;\r\n        return (args) => args !== undefined && args[name] === true;\r\n    } else if (isBooleanLiteral(condition)) {\r\n        const value = Boolean(condition.true);\r\n        return () => value;\r\n    }\r\n    assertUnreachable(condition);\r\n}\r\n\r\nfunction buildAlternatives(ctx: RuleContext, alternatives: Alternatives): Method {\r\n    if (alternatives.elements.length === 1) {\r\n        return buildElement(ctx, alternatives.elements[0]);\r\n    } else {\r\n        const methods: PredicatedMethod[] = [];\r\n\r\n        for (const element of alternatives.elements) {\r\n            const predicatedMethod: PredicatedMethod = {\r\n                // Since we handle the guard condition in the alternative already\r\n                // We can ignore the group guard condition inside\r\n                ALT: buildElement(ctx, element, true)\r\n            };\r\n            const guard = getGuardCondition(element);\r\n            if (guard) {\r\n                predicatedMethod.GATE = buildPredicate(guard);\r\n            }\r\n            methods.push(predicatedMethod);\r\n        }\r\n\r\n        const idx = ctx.or++;\r\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\r\n            const alt: IOrAlt<unknown> = {\r\n                ALT: () => method.ALT(args)\r\n            };\r\n            const gate = method.GATE;\r\n            if (gate) {\r\n                alt.GATE = () => gate(args);\r\n            }\r\n            return alt;\r\n        }));\r\n    }\r\n}\r\n\r\nfunction buildUnorderedGroup(ctx: RuleContext, group: UnorderedGroup): Method {\r\n    if (group.elements.length === 1) {\r\n        return buildElement(ctx, group.elements[0]);\r\n    }\r\n    const methods: PredicatedMethod[] = [];\r\n\r\n    for (const element of group.elements) {\r\n        const predicatedMethod: PredicatedMethod = {\r\n            // Since we handle the guard condition in the alternative already\r\n            // We can ignore the group guard condition inside\r\n            ALT: buildElement(ctx, element, true)\r\n        };\r\n        const guard = getGuardCondition(element);\r\n        if (guard) {\r\n            predicatedMethod.GATE = buildPredicate(guard);\r\n        }\r\n        methods.push(predicatedMethod);\r\n    }\r\n\r\n    const orIdx = ctx.or++;\r\n\r\n    const idFunc = (groupIdx: number, lParser: BaseParser) => {\r\n        const stackId = lParser.getRuleStack().join('-');\r\n        return `uGroup_${groupIdx}_${stackId}`;\r\n    };\r\n    const alternatives: Method = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\r\n        const alt: IOrAlt<unknown> = { ALT: () => true };\r\n        const parser = ctx.parser;\r\n        alt.ALT = () => {\r\n            method.ALT(args);\r\n            if (!parser.isRecording()) {\r\n                const key = idFunc(orIdx, parser);\r\n                if (!parser.unorderedGroups.get(key)) {\r\n                    // init after clear state\r\n                    parser.unorderedGroups.set(key, []);\r\n                }\r\n                const groupState = parser.unorderedGroups.get(key)!;\r\n                if (typeof groupState?.[idx] === 'undefined') {\r\n                    // Not accessed yet\r\n                    groupState[idx] = true;\r\n                }\r\n            }\r\n        };\r\n        const gate = method.GATE;\r\n        if (gate) {\r\n            alt.GATE = () => gate(args);\r\n        } else {\r\n            alt.GATE = () => {\r\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\r\n                const allow = !trackedAlternatives?.[idx];\r\n                return allow;\r\n            };\r\n        }\r\n        return alt;\r\n    }));\r\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\r\n    return (args) => {\r\n        wrapped(args);\r\n        if (!ctx.parser.isRecording()) {\r\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\r\n        }\r\n    };\r\n}\r\n\r\nfunction buildGroup(ctx: RuleContext, group: Group): Method {\r\n    const methods = group.elements.map(e => buildElement(ctx, e));\r\n    return (args) => methods.forEach(method => method(args));\r\n}\r\n\r\nfunction getGuardCondition(element: AbstractElement): Condition | undefined {\r\n    if (isGroup(element)) {\r\n        return element.guardCondition;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction buildCrossReference(ctx: RuleContext, crossRef: CrossReference, terminal = crossRef.terminal): Method {\r\n    if (!terminal) {\r\n        if (!crossRef.type.ref) {\r\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\r\n        }\r\n        const assignment = findNameAssignment(crossRef.type.ref);\r\n        const assignTerminal = assignment?.terminal;\r\n        if (!assignTerminal) {\r\n            throw new Error('Could not find name assignment for type: ' + getTypeName(crossRef.type.ref));\r\n        }\r\n        return buildCrossReference(ctx, crossRef, assignTerminal);\r\n    } else if (isRuleCall(terminal) && isParserRule(terminal.rule.ref)) {\r\n        // The terminal is a data type rule here. Everything else will result in a validation error.\r\n        const rule = terminal.rule.ref;\r\n        const idx = ctx.subrule++;\r\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), false, crossRef, args);\r\n    } else if (isRuleCall(terminal) && isTerminalRule(terminal.rule.ref)) {\r\n        const idx = ctx.consume++;\r\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\r\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\r\n    } else if (isKeyword(terminal)) {\r\n        const idx = ctx.consume++;\r\n        const keyword = getToken(ctx, terminal.value);\r\n        return () => ctx.parser.consume(idx, keyword, crossRef);\r\n    }\r\n    else {\r\n        throw new Error('Could not build cross reference parser');\r\n    }\r\n}\r\n\r\nfunction buildKeyword(ctx: RuleContext, keyword: Keyword): Method {\r\n    const idx = ctx.consume++;\r\n    const token = ctx.tokens[keyword.value];\r\n    if (!token) {\r\n        throw new Error('Could not find token for keyword: ' + keyword.value);\r\n    }\r\n    return () => ctx.parser.consume(idx, token, keyword);\r\n}\r\n\r\nfunction wrap(ctx: RuleContext, guard: Condition | undefined, method: Method, cardinality: Cardinality): Method {\r\n    const gate = guard && buildPredicate(guard);\r\n\r\n    if (!cardinality) {\r\n        if (gate) {\r\n            const idx = ctx.or++;\r\n            return (args) => ctx.parser.alternatives(idx, [\r\n                {\r\n                    ALT: () => method(args),\r\n                    GATE: () => gate(args)\r\n                },\r\n                {\r\n                    ALT: EMPTY_ALT(),\r\n                    GATE: () => !gate(args)\r\n                }\r\n            ]);\r\n        } else {\r\n            return method;\r\n        }\r\n    }\r\n\r\n    if (cardinality === '*') {\r\n        const idx = ctx.many++;\r\n        return (args) => ctx.parser.many(idx, {\r\n            DEF: () => method(args),\r\n            GATE: gate ? () => gate(args) : undefined\r\n        });\r\n    } else if (cardinality === '+') {\r\n        const idx = ctx.many++;\r\n        if (gate) {\r\n            const orIdx = ctx.or++;\r\n            // In the case of a guard condition for the `+` group\r\n            // We combine it with an empty alternative\r\n            // If the condition returns true, it needs to parse at least a single iteration\r\n            // If its false, it is not allowed to parse anything\r\n            return (args) => ctx.parser.alternatives(orIdx, [\r\n                {\r\n                    ALT: () => ctx.parser.atLeastOne(idx, {\r\n                        DEF: () => method(args)\r\n                    }),\r\n                    GATE: () => gate(args)\r\n                },\r\n                {\r\n                    ALT: EMPTY_ALT(),\r\n                    GATE: () => !gate(args)\r\n                }\r\n            ]);\r\n        } else {\r\n            return (args) => ctx.parser.atLeastOne(idx, {\r\n                DEF: () => method(args),\r\n            });\r\n        }\r\n    } else if (cardinality === '?') {\r\n        const idx = ctx.optional++;\r\n        return (args) => ctx.parser.optional(idx, {\r\n            DEF: () => method(args),\r\n            GATE: gate ? () => gate(args) : undefined\r\n        });\r\n    } else {\r\n        assertUnreachable(cardinality);\r\n    }\r\n}\r\n\r\nfunction getRule(ctx: ParserContext, element: ParserRule | AbstractElement): Rule {\r\n    const name = getRuleName(ctx, element);\r\n    const rule = ctx.parser.getRule(name);\r\n    if (!rule) throw new Error(`Rule \"${name}\" not found.\"`);\r\n    return rule;\r\n}\r\n\r\nfunction getRuleName(ctx: ParserContext, element: ParserRule | AbstractElement): string {\r\n    if (isParserRule(element)) {\r\n        return element.name;\r\n    } else if (ctx.ruleNames.has(element)) {\r\n        return ctx.ruleNames.get(element)!;\r\n    } else {\r\n        let item: AstNode = element;\r\n        let parent: AstNode = item.$container!;\r\n        let ruleName: string = element.$type;\r\n        while (!isParserRule(parent)) {\r\n            if (isGroup(parent) || isAlternatives(parent) || isUnorderedGroup(parent)) {\r\n                const index = parent.elements.indexOf(item as AbstractElement);\r\n                ruleName = index.toString() + ':' + ruleName;\r\n            }\r\n            item = parent;\r\n            parent = parent.$container!;\r\n        }\r\n        const rule = parent as ParserRule;\r\n        ruleName = rule.name + ':' + ruleName;\r\n        ctx.ruleNames.set(element, ruleName);\r\n        return ruleName;\r\n    }\r\n}\r\n\r\nfunction getToken(ctx: ParserContext, name: string): TokenType {\r\n    const token = ctx.tokens[name];\r\n    if (!token) throw new Error(`Token \"${name}\" not found.\"`);\r\n    return token;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { LangiumParser } from './langium-parser.js';\r\nimport { createParser } from './parser-builder-base.js';\r\n\r\n/**\r\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\r\n * available at `services.Grammar`.\r\n */\r\nexport function createLangiumParser(services: LangiumCoreServices): LangiumParser {\r\n    const parser = prepareLangiumParser(services);\r\n    parser.finalize();\r\n    return parser;\r\n}\r\n\r\n/**\r\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\r\n * information when the parser is initially validated.\r\n */\r\nexport function prepareLangiumParser(services: LangiumCoreServices): LangiumParser {\r\n    const grammar = services.Grammar;\r\n    const lexer = services.parser.Lexer;\r\n    const parser = new LangiumParser(services);\r\n    return createParser(grammar, parser, lexer.definition);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { CancellationToken, CancellationTokenSource, type AbstractCancellationTokenSource } from '../utils/cancellation.js';\r\n\r\nexport type MaybePromise<T> = T | Promise<T>\r\n\r\n/**\r\n * Delays the execution of the current code to the next tick of the event loop.\r\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\r\n */\r\nexport function delayNextTick(): Promise<void> {\r\n    return new Promise(resolve => {\r\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\r\n        // Using `setTimeout` of the browser API accomplishes the same result.\r\n        if (typeof setImmediate === 'undefined') {\r\n            setTimeout(resolve, 0);\r\n        } else {\r\n            setImmediate(resolve);\r\n        }\r\n    });\r\n}\r\n\r\nlet lastTick = 0;\r\nlet globalInterruptionPeriod = 10;\r\n\r\n/**\r\n * Reset the global interruption period and create a cancellation token source.\r\n */\r\nexport function startCancelableOperation(): AbstractCancellationTokenSource {\r\n    lastTick = performance.now();\r\n    return new CancellationTokenSource();\r\n}\r\n\r\n/**\r\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\r\n * The default value is 10ms.\r\n */\r\nexport function setInterruptionPeriod(period: number): void {\r\n    globalInterruptionPeriod = period;\r\n}\r\n\r\n/**\r\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\r\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\r\n * this symbol as rejection reason.\r\n */\r\nexport const OperationCancelled = Symbol('OperationCancelled');\r\n\r\n/**\r\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\r\n * has been cancelled.\r\n */\r\nexport function isOperationCancelled(err: unknown): err is typeof OperationCancelled {\r\n    return err === OperationCancelled;\r\n}\r\n\r\n/**\r\n * This function does two things:\r\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\r\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\r\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\r\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\r\n *\r\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\r\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\r\n * the promise) to avoid that event being exposed as an error.\r\n */\r\nexport async function interruptAndCheck(token: CancellationToken): Promise<void> {\r\n    if (token === CancellationToken.None) {\r\n        // Early exit in case cancellation was disabled by the caller\r\n        return;\r\n    }\r\n    const current = performance.now();\r\n    if (current - lastTick >= globalInterruptionPeriod) {\r\n        lastTick = current;\r\n        await delayNextTick();\r\n        // prevent calling delayNextTick every iteration of loop\r\n        // where delayNextTick takes up the majority or all of the\r\n        // globalInterruptionPeriod itself\r\n        lastTick = performance.now();\r\n    }\r\n    if (token.isCancellationRequested) {\r\n        throw OperationCancelled;\r\n    }\r\n}\r\n\r\n/**\r\n * Simple implementation of the deferred pattern.\r\n * An object that exposes a promise and functions to resolve and reject it.\r\n */\r\nexport class Deferred<T = void> {\r\n    resolve: (value: T) => this;\r\n    reject: (err?: unknown) => this;\r\n\r\n    promise = new Promise<T>((resolve, reject) => {\r\n        this.resolve = (arg) => {\r\n            resolve(arg);\r\n            return this;\r\n        };\r\n        this.reject = (err) => {\r\n            reject(err);\r\n            return this;\r\n        };\r\n    });\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            const start = this.offsetAt(range.start);\n            const end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(changes, version) {\n        for (const change of changes) {\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                const range = getWellformedRange(change.range);\n                // update content\n                const startOffset = this.offsetAt(range.start);\n                const endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                const startLine = Math.max(range.start.line, 0);\n                const endLine = Math.max(range.end.line, 0);\n                let lineOffsets = this._lineOffsets;\n                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                const diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error('Unknown change event received');\n            }\n        }\n        this._version = version;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        const lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        const line = low - 1;\n        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);\n        return { line, character: offset - lineOffsets[line] };\n    }\n    offsetAt(position) {\n        const lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        const lineOffset = lineOffsets[position.line];\n        if (position.character <= 0) {\n            return lineOffset;\n        }\n        const nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        const offset = Math.min(lineOffset + position.character, nextLineOffset);\n        return this.ensureBeforeEOL(offset, lineOffset);\n    }\n    ensureBeforeEOL(offset, lineOffset) {\n        while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {\n            offset--;\n        }\n        return offset;\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n    static isIncremental(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    static isFull(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n}\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param version The document's initial version number.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifying its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @param version the changes version for the document.\n     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error('TextDocument.update: document must be created by TextDocument.create');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        const text = document.getText();\n        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n            const diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = 0;\n        const spans = [];\n        for (const e of sortedEdits) {\n            const startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error('Overlapping edit');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join('');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(TextDocument || (TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    const p = (data.length / 2) | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        const ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n    const result = isAtLineStart ? [textOffset] : [];\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charCodeAt(i);\n        if (isEOL(ch)) {\n            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction isEOL(char) {\n    return char === 13 /* CharCode.CarriageReturn */ || char === 10 /* CharCode.LineFeed */;\n}\nfunction getWellformedRange(range) {\n    const start = range.start;\n    const end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    const range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range };\n    }\n    return textEdit;\n}\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/**\r\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\r\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\r\n *  the overhead is very small, just a few kilobytes.\r\n * Everything else of that package (at the time contributing) is also defined\r\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\r\n */\r\nexport { TextDocument } from 'vscode-languageserver-textdocument';\r\n\r\nimport type { Diagnostic, Range } from 'vscode-languageserver-types';\r\nimport type { FileSystemProvider } from './file-system-provider.js';\r\nimport type { ParseResult, ParserOptions } from '../parser/langium-parser.js';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, Mutable, Reference } from '../syntax-tree.js';\r\nimport type { MultiMap } from '../utils/collections.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { TextDocument } from './documents.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { URI } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * A Langium document holds the parse result (AST and CST) and any additional state that is derived\r\n * from the AST, e.g. the result of scope precomputation.\r\n */\r\nexport interface LangiumDocument<T extends AstNode = AstNode> {\r\n    /** The Uniform Resource Identifier (URI) of the document */\r\n    readonly uri: URI;\r\n    /** The text document used to convert between offsets and positions */\r\n    readonly textDocument: TextDocument;\r\n    /** The current state of the document */\r\n    state: DocumentState;\r\n    /** The parse result holds the Abstract Syntax Tree (AST) and potentially also parser / lexer errors */\r\n    parseResult: ParseResult<T>;\r\n    /** Result of the scope precomputation phase */\r\n    precomputedScopes?: PrecomputedScopes;\r\n    /** An array of all cross-references found in the AST while linking */\r\n    references: Reference[];\r\n    /** Result of the validation phase */\r\n    diagnostics?: Diagnostic[]\r\n}\r\n\r\n/**\r\n * A document is subject to several phases that are run in predefined order. Any state value implies that\r\n * smaller state values are finished as well.\r\n */\r\nexport enum DocumentState {\r\n    /**\r\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\r\n     * document instance is no longer valid.\r\n     */\r\n    Changed = 0,\r\n    /**\r\n     * An AST has been created from the text content. The document structure can be traversed,\r\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\r\n     * at this stage as a preprocessing step.\r\n     */\r\n    Parsed = 1,\r\n    /**\r\n     * The `IndexManager` service has processed AST nodes of this document. This means the\r\n     * exported symbols are available in the global scope and can be resolved from other documents.\r\n     */\r\n    IndexedContent = 2,\r\n    /**\r\n     * The `ScopeComputation` service has processed this document. This means the local symbols\r\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\r\n     * Once a document has reached this state, you may follow every reference - it will lazily\r\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\r\n     * the target is not in scope.\r\n     */\r\n    ComputedScopes = 3,\r\n    /**\r\n     * The `Linker` service has processed this document. All outgoing references have been\r\n     * resolved or marked as erroneous.\r\n     */\r\n    Linked = 4,\r\n    /**\r\n     * The `IndexManager` service has processed AST node references of this document. This is\r\n     * necessary to determine which documents are affected by a change in one of the workspace\r\n     * documents.\r\n     */\r\n    IndexedReferences = 5,\r\n    /**\r\n     * The `DocumentValidator` service has processed this document. The language server listens\r\n     * to the results of this phase and sends diagnostics to the client.\r\n     */\r\n    Validated = 6\r\n}\r\n\r\n/**\r\n * Result of the scope precomputation phase (`ScopeComputation` service).\r\n * It maps every AST node to the set of symbols that are visible in the subtree of that node.\r\n */\r\nexport type PrecomputedScopes = MultiMap<AstNode, AstNodeDescription>\r\n\r\nexport interface DocumentSegment {\r\n    readonly range: Range\r\n    readonly offset: number\r\n    readonly length: number\r\n    readonly end: number\r\n}\r\n\r\n/**\r\n * Surrogate definition of the `TextDocuments` interface from the `vscode-languageserver` package.\r\n * No implementation object is expected to be offered by `LangiumCoreServices`, but only by `LangiumLSPServices`.\r\n */\r\nexport type TextDocumentProvider = {\r\n    get(uri: string | URI): TextDocument | undefined\r\n}\r\n\r\n/**\r\n * Shared service for creating `LangiumDocument` instances.\r\n *\r\n * Register a custom implementation if special (additional) behavior is required for your language(s).\r\n * Note: If you specialize {@link fromString} or {@link fromTextDocument} you probably might want to\r\n * specialize {@link update}, too!\r\n */\r\nexport interface LangiumDocumentFactory {\r\n    /**\r\n     * Create a Langium document from a `TextDocument` (usually associated with a file).\r\n     */\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    /**\r\n     * Create a Langium document from a `TextDocument` asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\r\n     */\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Create an Langium document from an in-memory string.\r\n     */\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    /**\r\n     * Create a Langium document from an in-memory string asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\r\n     */\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Create an Langium document from a model that has been constructed in memory.\r\n     */\r\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T>;\r\n\r\n    /**\r\n     * Create an Langium document from a specified `URI`. The factory will use the `FileSystemAccess` service to read the file.\r\n     */\r\n    fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Update the given document after changes in the corresponding textual representation.\r\n     * Method is called by the document builder after it has been requested to build an existing\r\n     * document and the document's state is {@link DocumentState.Changed}.\r\n     * The text parsing is expected to be done the same way as in {@link fromTextDocument}\r\n     * and {@link fromString}.\r\n     */\r\n    update<T extends AstNode = AstNode>(document: LangiumDocument<T>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>\r\n}\r\n\r\nexport class DefaultLangiumDocumentFactory implements LangiumDocumentFactory {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly textDocuments?: TextDocumentProvider;\r\n    protected readonly fileSystemProvider: FileSystemProvider;\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.textDocuments = services.workspace.TextDocuments;\r\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\r\n    }\r\n\r\n    async fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken = CancellationToken.None): Promise<LangiumDocument<T>> {\r\n        const content = await this.fileSystemProvider.readFile(uri);\r\n        return this.createAsync<T>(uri, content, cancellationToken);\r\n    }\r\n\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, token?: CancellationToken | ParserOptions): LangiumDocument<T> | Promise<LangiumDocument<T>> {\r\n        uri = uri ?? URI.parse(textDocument.uri);\r\n        if (CancellationToken.is(token)) {\r\n            return this.createAsync<T>(uri, textDocument, token);\r\n        } else {\r\n            return this.create<T>(uri, textDocument, token);\r\n        }\r\n    }\r\n\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, token?: CancellationToken | ParserOptions): LangiumDocument<T> | Promise<LangiumDocument<T>> {\r\n        if (CancellationToken.is(token)) {\r\n            return this.createAsync<T>(uri, text, token);\r\n        } else {\r\n            return this.create<T>(uri, text, token);\r\n        }\r\n    }\r\n\r\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T> {\r\n        return this.create<T>(uri, { $model: model });\r\n    }\r\n\r\n    protected create<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument | { $model: T }, options?: ParserOptions): LangiumDocument<T> {\r\n        if (typeof content === 'string') {\r\n            const parseResult = this.parse<T>(uri, content, options);\r\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\r\n\r\n        } else if ('$model' in content) {\r\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\r\n            return this.createLangiumDocument<T>(parseResult, uri);\r\n\r\n        } else {\r\n            const parseResult = this.parse<T>(uri, content.getText(), options);\r\n            return this.createLangiumDocument(parseResult, uri, content);\r\n        }\r\n    }\r\n\r\n    protected async createAsync<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument, cancelToken: CancellationToken): Promise<LangiumDocument<T>> {\r\n        if (typeof content === 'string') {\r\n            const parseResult = await this.parseAsync<T>(uri, content, cancelToken);\r\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\r\n        } else {\r\n            const parseResult = await this.parseAsync<T>(uri, content.getText(), cancelToken);\r\n            return this.createLangiumDocument(parseResult, uri, content);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a LangiumDocument from a given parse result.\r\n     *\r\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\r\n     * should not be necessary because the main purpose of the TextDocument is to convert between\r\n     * text ranges and offsets, which is done solely in LSP request handling.\r\n     *\r\n     * With the introduction of {@link update} below this method is supposed to be mainly called\r\n     * during workspace initialization and on addition/recognition of new files, while changes in\r\n     * existing documents are processed via {@link update}.\r\n     */\r\n    protected createLangiumDocument<T extends AstNode = AstNode>(parseResult: ParseResult<T>, uri: URI, textDocument?: TextDocument, text?: string): LangiumDocument<T> {\r\n        let document: LangiumDocument<T>;\r\n        if (textDocument) {\r\n            document = {\r\n                parseResult,\r\n                uri,\r\n                state: DocumentState.Parsed,\r\n                references: [],\r\n                textDocument\r\n            };\r\n        } else {\r\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\r\n            document = {\r\n                parseResult,\r\n                uri,\r\n                state: DocumentState.Parsed,\r\n                references: [],\r\n                get textDocument() {\r\n                    return textDocumentGetter();\r\n                }\r\n            };\r\n        }\r\n        (parseResult.value as Mutable<AstNode>).$document = document;\r\n        return document;\r\n    }\r\n\r\n    async update<T extends AstNode = AstNode>(document: Mutable<LangiumDocument<T>>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>> {\r\n        // The CST full text property contains the original text that was used to create the AST.\r\n        const oldText = document.parseResult.value.$cstNode?.root.fullText;\r\n        const textDocument = this.textDocuments?.get(document.uri.toString());\r\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\r\n\r\n        if (textDocument) {\r\n            Object.defineProperty(\r\n                document,\r\n                'textDocument',\r\n                {\r\n                    value: textDocument\r\n                }\r\n            );\r\n        } else {\r\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\r\n            Object.defineProperty(\r\n                document,\r\n                'textDocument',\r\n                {\r\n                    get: textDocumentGetter\r\n                }\r\n            );\r\n        }\r\n\r\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\r\n        // Therefore, we only parse if the text has actually changed.\r\n        if (oldText !== text) {\r\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\r\n            (document.parseResult.value as Mutable<AstNode>).$document = document;\r\n        }\r\n        document.state = DocumentState.Parsed;\r\n        return document;\r\n    }\r\n\r\n    protected parse<T extends AstNode>(uri: URI, text: string, options?: ParserOptions): ParseResult<T> {\r\n        const services = this.serviceRegistry.getServices(uri);\r\n        return services.parser.LangiumParser.parse<T>(text, options);\r\n    }\r\n\r\n    protected parseAsync<T extends AstNode>(uri: URI, text: string, cancellationToken: CancellationToken): Promise<ParseResult<T>> {\r\n        const services = this.serviceRegistry.getServices(uri);\r\n        return services.parser.AsyncParser.parse<T>(text, cancellationToken);\r\n    }\r\n\r\n    protected createTextDocumentGetter(uri: URI, text?: string): () => TextDocument {\r\n        const serviceRegistry = this.serviceRegistry;\r\n        let textDoc: TextDocument | undefined = undefined;\r\n        return () => {\r\n            return textDoc ??= TextDocument.create(\r\n                uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text ?? ''\r\n            );\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Shared service for managing Langium documents.\r\n */\r\nexport interface LangiumDocuments {\r\n\r\n    /**\r\n     * A stream of all documents managed under this service.\r\n     */\r\n    readonly all: Stream<LangiumDocument>\r\n\r\n    /**\r\n     * Manage a new document under this service.\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    addDocument(document: LangiumDocument): void;\r\n\r\n    /**\r\n     * Retrieve the document with the given URI, if present. Otherwise returns `undefined`.\r\n     */\r\n    getDocument(uri: URI): LangiumDocument | undefined;\r\n\r\n    /**\r\n     * Retrieve the document with the given URI. If not present, a new one will be created using the file system access.\r\n     * The new document will be added to the list of documents managed under this service.\r\n     */\r\n    getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument>;\r\n\r\n    /**\r\n     * Creates a new document with the given URI and text content.\r\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\r\n     *\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    createDocument(uri: URI, text: string): LangiumDocument;\r\n\r\n    /**\r\n     * Creates a new document with the given URI and text content asynchronously.\r\n     * The process can be interrupted with a cancellation token.\r\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\r\n     *\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\r\n\r\n    /**\r\n     * Returns `true` if a document with the given URI is managed under this service.\r\n     */\r\n    hasDocument(uri: URI): boolean;\r\n\r\n    /**\r\n     * Flag the document with the given URI as `Changed`, if present, meaning that its content\r\n     * is no longer valid. The content (parseResult) stays untouched, while internal data may\r\n     * be dropped to reduce memory footprint.\r\n     *\r\n     * @returns the affected {@link LangiumDocument} if existing for convenience\r\n     */\r\n    invalidateDocument(uri: URI): LangiumDocument | undefined;\r\n\r\n    /**\r\n     * Remove the document with the given URI, if present, and mark it as `Changed`, meaning\r\n     * that its content is no longer valid. The next call to `getOrCreateDocument` with the same\r\n     * URI will create a new document instance.\r\n     *\r\n     * @returns the affected {@link LangiumDocument} if existing for convenience\r\n     */\r\n    deleteDocument(uri: URI): LangiumDocument | undefined;\r\n}\r\n\r\nexport class DefaultLangiumDocuments implements LangiumDocuments {\r\n\r\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n\r\n    protected readonly documentMap: Map<string, LangiumDocument> = new Map();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    get all(): Stream<LangiumDocument> {\r\n        return stream(this.documentMap.values());\r\n    }\r\n\r\n    addDocument(document: LangiumDocument): void {\r\n        const uriString = document.uri.toString();\r\n        if (this.documentMap.has(uriString)) {\r\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\r\n        }\r\n        this.documentMap.set(uriString, document);\r\n    }\r\n\r\n    getDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        return this.documentMap.get(uriString);\r\n    }\r\n\r\n    async getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument> {\r\n        let document = this.getDocument(uri);\r\n        if (document) {\r\n            return document;\r\n        }\r\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\r\n        this.addDocument(document);\r\n        return document;\r\n    }\r\n\r\n    createDocument(uri: URI, text: string): LangiumDocument;\r\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\r\n    createDocument(uri: URI, text: string, cancellationToken?: CancellationToken): LangiumDocument | Promise<LangiumDocument> {\r\n        if (cancellationToken) {\r\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\r\n                this.addDocument(document);\r\n                return document;\r\n            });\r\n        } else {\r\n            const document = this.langiumDocumentFactory.fromString(text, uri);\r\n            this.addDocument(document);\r\n            return document;\r\n        }\r\n    }\r\n\r\n    hasDocument(uri: URI): boolean {\r\n        return this.documentMap.has(uri.toString());\r\n    }\r\n\r\n    invalidateDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        const langiumDoc = this.documentMap.get(uriString);\r\n        if (langiumDoc) {\r\n            const linker = this.serviceRegistry.getServices(uri).references.Linker;\r\n            linker.unlink(langiumDoc);\r\n            langiumDoc.state = DocumentState.Changed;\r\n            langiumDoc.precomputedScopes = undefined;\r\n            langiumDoc.diagnostics = undefined;\r\n        }\r\n        return langiumDoc;\r\n    }\r\n\r\n    deleteDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        const langiumDoc = this.documentMap.get(uriString);\r\n        if (langiumDoc) {\r\n            langiumDoc.state = DocumentState.Changed;\r\n            this.documentMap.delete(uriString);\r\n        }\r\n        return langiumDoc;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection, CstNode, LinkingError, Reference, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\r\nimport type { ScopeProvider } from './scope-provider.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { isAstNode, isAstNodeDescription, isLinkingError } from '../syntax-tree.js';\r\nimport { findRootNode, streamAst, streamReferences } from '../utils/ast-utils.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { DocumentState } from '../workspace/documents.js';\r\n\r\n/**\r\n * Language-specific service for resolving cross-references in the AST.\r\n */\r\nexport interface Linker {\r\n\r\n    /**\r\n     * Links all cross-references within the specified document. The default implementation loads only target\r\n     * elements from documents that are present in the `LangiumDocuments` service. The linked references are\r\n     * stored in the document's `references` property.\r\n     *\r\n     * @param document A LangiumDocument that shall be linked.\r\n     * @param cancelToken A token for cancelling the operation.\r\n     *\r\n     * @throws `OperationCancelled` if a cancellation event is detected\r\n     */\r\n    link(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Unlinks all references within the specified document and removes them from the list of `references`.\r\n     *\r\n     * @param document A LangiumDocument that shall be unlinked.\r\n     */\r\n    unlink(document: LangiumDocument): void;\r\n\r\n    /**\r\n     * Determines a candidate AST node description for linking the given reference.\r\n     *\r\n     * @param refInfo Information about the reference.\r\n     */\r\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError;\r\n\r\n    /**\r\n     * Creates a cross reference node being aware of its containing AstNode, the corresponding CstNode,\r\n     * the cross reference text denoting the target AstNode being already extracted of the document text,\r\n     * as well as the unique cross reference identifier.\r\n     *\r\n     * Default behavior:\r\n     *  - The returned Reference's 'ref' property pointing to the target AstNode is populated lazily on its\r\n     *    first visit.\r\n     *  - If the target AstNode cannot be resolved on the first visit, an error indicator will be installed\r\n     *    and further resolution attempts will *not* be performed.\r\n     *\r\n     * @param node The containing AST node\r\n     * @param property The AST node property being referenced\r\n     * @param refNode The corresponding CST node\r\n     * @param refText The cross reference text denoting the target AstNode\r\n     * @returns the desired Reference node, whose behavior wrt. resolving the cross reference is implementation specific.\r\n     */\r\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference;\r\n\r\n}\r\n\r\nconst ref_resolving = Symbol('ref_resolving');\r\n\r\ninterface DefaultReference extends Reference {\r\n    _ref?: AstNode | LinkingError | typeof ref_resolving;\r\n    _nodeDescription?: AstNodeDescription;\r\n}\r\n\r\nexport class DefaultLinker implements Linker {\r\n    protected readonly reflection: AstReflection;\r\n    protected readonly scopeProvider: ScopeProvider;\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly langiumDocuments: () => LangiumDocuments;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\r\n        this.scopeProvider = services.references.ScopeProvider;\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    async link(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        for (const node of streamAst(document.parseResult.value)) {\r\n            await interruptAndCheck(cancelToken);\r\n            streamReferences(node).forEach(ref => this.doLink(ref, document));\r\n        }\r\n    }\r\n\r\n    protected doLink(refInfo: ReferenceInfo, document: LangiumDocument): void {\r\n        const ref = refInfo.reference as DefaultReference;\r\n        // The reference may already have been resolved lazily by accessing its `ref` property.\r\n        if (ref._ref === undefined) {\r\n            ref._ref = ref_resolving;\r\n            try {\r\n                const description = this.getCandidate(refInfo);\r\n                if (isLinkingError(description)) {\r\n                    ref._ref = description;\r\n                } else {\r\n                    ref._nodeDescription = description;\r\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\r\n                        // The target document is already loaded\r\n                        const linkedNode = this.loadAstNode(description);\r\n                        ref._ref = linkedNode ?? this.createLinkingError(refInfo, description);\r\n                    } else {\r\n                        // Try to load the target AST node later using the already provided description\r\n                        ref._ref = undefined;\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error(`An error occurred while resolving reference to '${ref.$refText}':`, err);\r\n                const errorMessage = (err as Error).message ?? String(err);\r\n                ref._ref = {\r\n                    ...refInfo,\r\n                    message: `An error occurred while resolving reference to '${ref.$refText}': ${errorMessage}`\r\n                };\r\n            }\r\n            // Add the reference to the document's array of references\r\n            // Only add if the reference has been not been resolved earlier\r\n            // Otherwise we end up with duplicates\r\n            // See also implementation of `buildReference`\r\n            document.references.push(ref);\r\n        }\r\n    }\r\n\r\n    unlink(document: LangiumDocument): void {\r\n        for (const ref of document.references) {\r\n            delete (ref as DefaultReference)._ref;\r\n            delete (ref as DefaultReference)._nodeDescription;\r\n        }\r\n        document.references = [];\r\n    }\r\n\r\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError {\r\n        const scope = this.scopeProvider.getScope(refInfo);\r\n        const description = scope.getElement(refInfo.reference.$refText);\r\n        return description ?? this.createLinkingError(refInfo);\r\n    }\r\n\r\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference {\r\n        // See behavior description in doc of Linker, update that on changes in here.\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const linker = this;\r\n        const reference: DefaultReference = {\r\n            $refNode: refNode,\r\n            $refText: refText,\r\n\r\n            get ref() {\r\n                if (isAstNode(this._ref)) {\r\n                    // Most frequent case: the target is already resolved.\r\n                    return this._ref;\r\n                } else if (isAstNodeDescription(this._nodeDescription)) {\r\n                    // A candidate has been found before, but it is not loaded yet.\r\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\r\n                    this._ref = linkedNode ??\r\n                        linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\r\n                } else if (this._ref === undefined) {\r\n                    // The reference has not been linked yet, so do that now.\r\n                    this._ref = ref_resolving;\r\n                    const document = findRootNode(node).$document;\r\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\r\n                    if (refData.error && document && document.state < DocumentState.ComputedScopes) {\r\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\r\n                        return this._ref = undefined;\r\n                    }\r\n                    this._ref = refData.node ?? refData.error;\r\n                    this._nodeDescription = refData.descr;\r\n                    document?.references.push(this);\r\n                } else if (this._ref === ref_resolving) {\r\n                    throw new Error(`Cyclic reference resolution detected: ${linker.astNodeLocator.getAstNodePath(node)}/${property} (symbol '${refText}')`);\r\n                }\r\n                return isAstNode(this._ref) ? this._ref : undefined;\r\n            },\r\n            get $nodeDescription() {\r\n                return this._nodeDescription;\r\n            },\r\n            get error() {\r\n                return isLinkingError(this._ref) ? this._ref : undefined;\r\n            }\r\n        };\r\n        return reference;\r\n    }\r\n\r\n    protected getLinkedNode(refInfo: ReferenceInfo): { node?: AstNode, descr?: AstNodeDescription, error?: LinkingError } {\r\n        try {\r\n            const description = this.getCandidate(refInfo);\r\n            if (isLinkingError(description)) {\r\n                return { error: description };\r\n            }\r\n            const linkedNode = this.loadAstNode(description);\r\n            if (linkedNode) {\r\n                return { node: linkedNode, descr: description };\r\n            }\r\n            else {\r\n                return {\r\n                    descr: description,\r\n                    error:\r\n                        this.createLinkingError(refInfo, description)\r\n                };\r\n            }\r\n        } catch (err) {\r\n            console.error(`An error occurred while resolving reference to '${refInfo.reference.$refText}':`, err);\r\n            const errorMessage = (err as Error).message ?? String(err);\r\n            return {\r\n                error: {\r\n                    ...refInfo,\r\n                    message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${errorMessage}`\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    protected loadAstNode(nodeDescription: AstNodeDescription): AstNode | undefined {\r\n        if (nodeDescription.node) {\r\n            return nodeDescription.node;\r\n        }\r\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\r\n        if (!doc) {\r\n            return undefined;\r\n        }\r\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\r\n    }\r\n\r\n    protected createLinkingError(refInfo: ReferenceInfo, targetDescription?: AstNodeDescription): LinkingError {\r\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\r\n        // in the language implementation.\r\n        const document = findRootNode(refInfo.container).$document;\r\n        if (document && document.state < DocumentState.ComputedScopes) {\r\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\r\n        }\r\n        const referenceType = this.reflection.getReferenceType(refInfo);\r\n        return {\r\n            ...refInfo,\r\n            message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`,\r\n            targetDescription\r\n        };\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\r\n\r\nexport interface NamedAstNode extends AstNode {\r\n    name: string;\r\n}\r\n\r\nexport function isNamed(node: AstNode): node is NamedAstNode {\r\n    return typeof (node as NamedAstNode).name === 'string';\r\n}\r\n\r\n/**\r\n * Utility service for retrieving the `name` of an `AstNode` or the `CstNode` containing a `name`.\r\n */\r\nexport interface NameProvider {\r\n    /**\r\n     * Returns the `name` of a given AstNode.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getName(node: AstNode): string | undefined;\r\n    /**\r\n     * Returns the `CstNode` which contains the parsed value of the `name` assignment.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getNameNode(node: AstNode): CstNode | undefined;\r\n}\r\n\r\nexport class DefaultNameProvider implements NameProvider {\r\n    getName(node: AstNode): string | undefined {\r\n        if (isNamed(node)) {\r\n            return node.name;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getNameNode(node: AstNode): CstNode | undefined {\r\n        return findNodeForProperty(node.$cstNode, 'name');\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { URI, Utils } from 'vscode-uri';\r\n\r\nexport { URI };\r\n\r\nexport namespace UriUtils {\r\n\r\n    export const basename = Utils.basename;\r\n    export const dirname = Utils.dirname;\r\n    export const extname = Utils.extname;\r\n    export const joinPath = Utils.joinPath;\r\n    export const resolvePath = Utils.resolvePath;\r\n\r\n    export function equals(a?: URI | string, b?: URI | string): boolean {\r\n        return a?.toString() === b?.toString();\r\n    }\r\n\r\n    export function relative(from: URI | string, to: URI | string): string {\r\n        const fromPath = typeof from === 'string' ? from : from.path;\r\n        const toPath = typeof to === 'string' ? to : to.path;\r\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\r\n        const toParts = toPath.split('/').filter(e => e.length > 0);\r\n        let i = 0;\r\n        for (; i < fromParts.length; i++) {\r\n            if (fromParts[i] !== toParts[i]) {\r\n                break;\r\n            }\r\n        }\r\n        const backPart = '../'.repeat(fromParts.length - i);\r\n        const toPart = toParts.slice(i).join('/');\r\n        return backPart + toPart;\r\n    }\r\n\r\n    export function normalize(uri: URI | string): string {\r\n        return URI.parse(uri.toString()).toString();\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode, GenericAstNode } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport type { ReferenceDescription } from '../workspace/ast-descriptions.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { findAssignment } from '../utils/grammar-utils.js';\r\nimport { isReference } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { isChildNode, toDocumentSegment } from '../utils/cst-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * Language-specific service for finding references and declaration of a given `CstNode`.\r\n */\r\nexport interface References {\r\n\r\n    /**\r\n     * If the CstNode is a reference node the target CstNode will be returned.\r\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\r\n     *\r\n     * @param sourceCstNode CstNode that points to a AstNode\r\n     */\r\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined;\r\n\r\n    /**\r\n     * If the CstNode is a reference node the target CstNode will be returned.\r\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\r\n     *\r\n     * @param sourceCstNode CstNode that points to a AstNode\r\n     */\r\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined;\r\n\r\n    /**\r\n     * Finds all references to the target node as references (local references) or reference descriptions.\r\n     *\r\n     * @param targetNode Specified target node whose references should be returned\r\n     */\r\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription>;\r\n}\r\n\r\nexport interface FindReferencesOptions {\r\n    /**\r\n     * @deprecated Since v1.2.0. Please use `documentUri` instead.\r\n     */\r\n    onlyLocal?: boolean;\r\n    /**\r\n     * When set, the `findReferences` method will only return references/declarations from the specified document.\r\n     */\r\n    documentUri?: URI;\r\n    /**\r\n     * Whether the returned list of references should include the declaration.\r\n     */\r\n    includeDeclaration?: boolean;\r\n}\r\n\r\nexport class DefaultReferences implements References {\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly index: IndexManager;\r\n    protected readonly nodeLocator: AstNodeLocator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.index = services.shared.workspace.IndexManager;\r\n        this.nodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined {\r\n        if (sourceCstNode) {\r\n            const assignment = findAssignment(sourceCstNode);\r\n            const nodeElem = sourceCstNode.astNode;\r\n            if (assignment && nodeElem) {\r\n                const reference = (nodeElem as GenericAstNode)[assignment.feature];\r\n\r\n                if (isReference(reference)) {\r\n                    return reference.ref;\r\n                } else if (Array.isArray(reference)) {\r\n                    for (const ref of reference) {\r\n                        if (isReference(ref) && ref.$refNode\r\n                            && ref.$refNode.offset <= sourceCstNode.offset\r\n                            && ref.$refNode.end >= sourceCstNode.end) {\r\n                            return ref.ref;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (nodeElem) {\r\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\r\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\r\n                if (nameNode && (nameNode === sourceCstNode || isChildNode(sourceCstNode, nameNode))) {\r\n                    return nodeElem;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined {\r\n        const astNode = this.findDeclaration(sourceCstNode);\r\n        if (astNode?.$cstNode) {\r\n            const targetNode = this.nameProvider.getNameNode(astNode);\r\n            return targetNode ?? astNode.$cstNode;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription> {\r\n        const refs: ReferenceDescription[] = [];\r\n        if (options.includeDeclaration) {\r\n            const ref = this.getReferenceToSelf(targetNode);\r\n            if (ref) {\r\n                refs.push(ref);\r\n            }\r\n        }\r\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\r\n        if (options.documentUri) {\r\n            indexReferences = indexReferences.filter(ref => UriUtils.equals(ref.sourceUri, options.documentUri));\r\n        }\r\n        refs.push(...indexReferences);\r\n        return stream(refs);\r\n    }\r\n\r\n    protected getReferenceToSelf(targetNode: AstNode): ReferenceDescription | undefined {\r\n        const nameNode = this.nameProvider.getNameNode(targetNode);\r\n        if (nameNode) {\r\n            const doc = getDocument(targetNode);\r\n            const path = this.nodeLocator.getAstNodePath(targetNode);\r\n            return {\r\n                sourceUri: doc.uri,\r\n                sourcePath: path,\r\n                targetUri: doc.uri,\r\n                targetPath: path,\r\n                segment: toDocumentSegment(nameNode),\r\n                local: true\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Stream } from './stream.js';\r\nimport { Reduction, stream } from './stream.js';\r\n\r\n/**\r\n * A multimap is a variation of a Map that has potentially multiple values for every key.\r\n */\r\nexport class MultiMap<K, V> {\r\n\r\n    private map = new Map<K, V[]>();\r\n\r\n    constructor()\r\n    constructor(elements: Array<[K, V]>)\r\n    constructor(elements?: Array<[K, V]>) {\r\n        if (elements) {\r\n            for (const [key, value] of elements) {\r\n                this.add(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The total number of values in the multimap.\r\n     */\r\n    get size(): number {\r\n        return Reduction.sum(stream(this.map.values()).map(a => a.length));\r\n    }\r\n\r\n    /**\r\n     * Clear all entries in the multimap.\r\n     */\r\n    clear(): void {\r\n        this.map.clear();\r\n    }\r\n\r\n    /**\r\n     * Operates differently depending on whether a `value` is given:\r\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\r\n     *  * Without a value, all values associated with the given key are deleted.\r\n     *\r\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\r\n     *     key / value does not exist.\r\n     */\r\n    delete(key: K, value?: V): boolean {\r\n        if (value === undefined) {\r\n            return this.map.delete(key);\r\n        } else {\r\n            const values = this.map.get(key);\r\n            if (values) {\r\n                const index = values.indexOf(value);\r\n                if (index >= 0) {\r\n                    if (values.length === 1) {\r\n                        this.map.delete(key);\r\n                    } else {\r\n                        values.splice(index, 1);\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all values associated with the given key. If no value exists,\r\n     * an empty array is returned.\r\n     *\r\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\r\n     * value and `delete` to remove a value from the multimap.\r\n     */\r\n    get(key: K): readonly V[] {\r\n        return this.map.get(key) ?? [];\r\n    }\r\n\r\n    /**\r\n     * Operates differently depending on whether a `value` is given:\r\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\r\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\r\n     */\r\n    has(key: K, value?: V): boolean {\r\n        if (value === undefined) {\r\n            return this.map.has(key);\r\n        } else {\r\n            const values = this.map.get(key);\r\n            if (values) {\r\n                return values.indexOf(value) >= 0;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the given key / value pair to the multimap.\r\n     */\r\n    add(key: K, value: V): this {\r\n        if (this.map.has(key)) {\r\n            this.map.get(key)!.push(value);\r\n        } else {\r\n            this.map.set(key, [value]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add the given set of key / value pairs to the multimap.\r\n     */\r\n    addAll(key: K, values: Iterable<V>): this {\r\n        if (this.map.has(key)) {\r\n            this.map.get(key)!.push(...values);\r\n        } else {\r\n            this.map.set(key, Array.from(values));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Invokes the given callback function for every key / value pair in the multimap.\r\n     */\r\n    forEach(callbackfn: (value: V, key: K, map: this) => void): void {\r\n        this.map.forEach((array, key) =>\r\n            array.forEach(value => callbackfn(value, key, this))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns an iterator of key, value pairs for every entry in the map.\r\n     */\r\n    [Symbol.iterator](): Iterator<[K, V]> {\r\n        return this.entries().iterator();\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of key, value pairs for every entry in the map.\r\n     */\r\n    entries(): Stream<[K, V]> {\r\n        return stream(this.map.entries())\r\n            .flatMap(([key, array]) => array.map(value => [key, value] as [K, V]));\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of keys in the map.\r\n     */\r\n    keys(): Stream<K> {\r\n        return stream(this.map.keys());\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of values in the map.\r\n     */\r\n    values(): Stream<V> {\r\n        return stream(this.map.values()).flat();\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of key, value set pairs for every key in the map.\r\n     */\r\n    entriesGroupedByKey(): Stream<[K, V[]]> {\r\n        return stream(this.map.entries());\r\n    }\r\n\r\n}\r\n\r\nexport class BiMap<K, V> {\r\n\r\n    private map = new Map<K, V>();\r\n    private inverse = new Map<V, K>();\r\n\r\n    get size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    constructor()\r\n    constructor(elements: Array<[K, V]>)\r\n    constructor(elements?: Array<[K, V]>) {\r\n        if (elements) {\r\n            for (const [key, value] of elements) {\r\n                this.set(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.map.clear();\r\n        this.inverse.clear();\r\n    }\r\n\r\n    set(key: K, value: V): this {\r\n        this.map.set(key, value);\r\n        this.inverse.set(value, key);\r\n        return this;\r\n    }\r\n\r\n    get(key: K): V | undefined {\r\n        return this.map.get(key);\r\n    }\r\n\r\n    getKey(value: V): K | undefined {\r\n        return this.inverse.get(value);\r\n    }\r\n\r\n    delete(key: K): boolean {\r\n        const value = this.map.get(key);\r\n        if (value !== undefined) {\r\n            this.map.delete(key);\r\n            this.inverse.delete(value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\r\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\r\nimport type { LangiumDocument, PrecomputedScopes } from '../workspace/documents.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { streamAllContents, streamContents } from '../utils/ast-utils.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\n\r\n/**\r\n * Language-specific service for precomputing global and local scopes. The service methods are executed\r\n * as the first and second phase in the `DocumentBuilder`.\r\n */\r\nexport interface ScopeComputation {\r\n\r\n    /**\r\n     * Creates descriptions of all AST nodes that shall be exported into the _global_ scope from the given\r\n     * document. These descriptions are gathered by the `IndexManager` and stored in the global index so\r\n     * they can be referenced from other documents.\r\n     *\r\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference resolution\r\n     * depends on the scope computation phase to be completed (`computeScope` method), which runs after the\r\n     * initial indexing where this method is used.\r\n     *\r\n     * @param document The document from which to gather exported AST nodes.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    computeExports(document: LangiumDocument, cancelToken?: CancellationToken): Promise<AstNodeDescription[]>;\r\n\r\n    /**\r\n     * Precomputes the _local_ scopes for a document, which are necessary for the default way of\r\n     * resolving references to symbols in the same document. The result is a multimap assigning a\r\n     * set of AST node descriptions to every level of the AST. These data are used by the `ScopeProvider`\r\n     * service to determine which target nodes are visible in the context of a specific cross-reference.\r\n     *\r\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference\r\n     * resolution depends on the scope computation phase to be completed.\r\n     *\r\n     * @param document The document in which to compute scopes.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    computeLocalScopes(document: LangiumDocument, cancelToken?: CancellationToken): Promise<PrecomputedScopes>;\r\n\r\n}\r\n\r\n/**\r\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\r\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\r\n * contained child nodes.\r\n *\r\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\r\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\r\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\r\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\r\n * are _invisible_ by default, but that can be changed by customizing this service.\r\n */\r\nexport class DefaultScopeComputation implements ScopeComputation {\r\n\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly descriptions: AstNodeDescriptionProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\r\n    }\r\n\r\n    async computeExports(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<AstNodeDescription[]> {\r\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\r\n    }\r\n\r\n    /**\r\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\r\n     * The list of children to be considered is determined by the function parameter {@link children}.\r\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\r\n     *\r\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\r\n     * @param document The document containing the AST node to be exported.\r\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCancelled` if a user action occurs during execution.\r\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\r\n     */\r\n    async computeExportsForNode(parentNode: AstNode, document: LangiumDocument<AstNode>, children: (root: AstNode) => Iterable<AstNode> = streamContents, cancelToken: CancellationToken = CancellationToken.None): Promise<AstNodeDescription[]> {\r\n        const exports: AstNodeDescription[] = [];\r\n\r\n        this.exportNode(parentNode, exports, document);\r\n        for (const node of children(parentNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            this.exportNode(node, exports, document);\r\n        }\r\n        return exports;\r\n    }\r\n\r\n    /**\r\n     * Add a single node to the list of exports if it has a name. Override this method to change how\r\n     * symbols are exported, e.g. by modifying their exported name.\r\n     */\r\n    protected exportNode(node: AstNode, exports: AstNodeDescription[], document: LangiumDocument): void {\r\n        const name = this.nameProvider.getName(node);\r\n        if (name) {\r\n            exports.push(this.descriptions.createDescription(node, name, document));\r\n        }\r\n    }\r\n\r\n    async computeLocalScopes(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<PrecomputedScopes> {\r\n        const rootNode = document.parseResult.value;\r\n        const scopes = new MultiMap<AstNode, AstNodeDescription>();\r\n        // Here we navigate the full AST - local scopes shall be available in the whole document\r\n        for (const node of streamAllContents(rootNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            this.processNode(node, document, scopes);\r\n        }\r\n        return scopes;\r\n    }\r\n\r\n    /**\r\n     * Process a single node during scopes computation. The default implementation makes the node visible\r\n     * in the subtree of its container (if the node has a name). Override this method to change this,\r\n     * e.g. by increasing the visibility to a higher level in the AST.\r\n     */\r\n    protected processNode(node: AstNode, document: LangiumDocument, scopes: PrecomputedScopes): void {\r\n        const container = node.$container;\r\n        if (container) {\r\n            const name = this.nameProvider.getName(node);\r\n            if (name) {\r\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNodeDescription } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { EMPTY_STREAM, stream } from '../utils/stream.js';\r\n\r\n/**\r\n * A scope describes what target elements are visible from a specific cross-reference context.\r\n */\r\nexport interface Scope {\r\n\r\n    /**\r\n     * Find a target element matching the given name. If no element is found, `undefined` is returned.\r\n     * If multiple matching elements are present, the selection of the returned element should be done\r\n     * according to the semantics of your language. Usually it is the element that is most closely defined.\r\n     *\r\n     * @param name Name of the cross-reference target as it appears in the source text.\r\n     */\r\n    getElement(name: string): AstNodeDescription | undefined;\r\n\r\n    /**\r\n     * Create a stream of all elements in the scope. This is used to compute completion proposals to be\r\n     * shown in the editor.\r\n     */\r\n    getAllElements(): Stream<AstNodeDescription>;\r\n\r\n}\r\n\r\nexport interface ScopeOptions {\r\n    caseInsensitive?: boolean;\r\n}\r\n\r\n/**\r\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\r\n * the next level of elements, which are queried when a target element is not found in the stream provided\r\n * to this scope.\r\n */\r\nexport class StreamScope implements Scope {\r\n    readonly elements: Stream<AstNodeDescription>;\r\n    readonly outerScope?: Scope;\r\n    readonly caseInsensitive: boolean;\r\n\r\n    constructor(elements: Stream<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\r\n        this.elements = elements;\r\n        this.outerScope = outerScope;\r\n        this.caseInsensitive = options?.caseInsensitive ?? false;\r\n    }\r\n\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        if (this.outerScope) {\r\n            return this.elements.concat(this.outerScope.getAllElements());\r\n        } else {\r\n            return this.elements;\r\n        }\r\n    }\r\n\r\n    getElement(name: string): AstNodeDescription | undefined {\r\n        const local = this.caseInsensitive\r\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\r\n            : this.elements.find(e => e.name === name);\r\n        if (local) {\r\n            return local;\r\n        }\r\n        if (this.outerScope) {\r\n            return this.outerScope.getElement(name);\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport class MapScope implements Scope {\r\n    readonly elements: Map<string, AstNodeDescription>;\r\n    readonly outerScope?: Scope;\r\n    readonly caseInsensitive: boolean;\r\n\r\n    constructor(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\r\n        this.elements = new Map();\r\n        this.caseInsensitive = options?.caseInsensitive ?? false;\r\n        for (const element of elements) {\r\n            const name = this.caseInsensitive\r\n                ? element.name.toLowerCase()\r\n                : element.name;\r\n            this.elements.set(name, element);\r\n        }\r\n        this.outerScope = outerScope;\r\n    }\r\n\r\n    getElement(name: string): AstNodeDescription | undefined {\r\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\r\n        const local = this.elements.get(localName);\r\n        if (local) {\r\n            return local;\r\n        }\r\n        if (this.outerScope) {\r\n            return this.outerScope.getElement(name);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        let elementStream = stream(this.elements.values());\r\n        if (this.outerScope) {\r\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\r\n        }\r\n        return elementStream;\r\n    }\r\n\r\n}\r\n\r\nexport const EMPTY_SCOPE: Scope = {\r\n    getElement(): undefined {\r\n        return undefined;\r\n    },\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        return EMPTY_STREAM;\r\n    }\r\n};\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Disposable } from './disposable.js';\r\nimport type { URI } from './uri-utils.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { DocumentState } from '../workspace/documents.js';\r\n\r\nexport abstract class DisposableCache implements Disposable {\r\n\r\n    protected toDispose: Disposable[] = [];\r\n    protected isDisposed = false;\r\n\r\n    onDispose(disposable: Disposable): void {\r\n        this.toDispose.push(disposable);\r\n    }\r\n\r\n    dispose(): void {\r\n        this.throwIfDisposed();\r\n        this.clear();\r\n        this.isDisposed = true;\r\n        this.toDispose.forEach(disposable => disposable.dispose());\r\n    }\r\n\r\n    protected throwIfDisposed(): void {\r\n        if (this.isDisposed) {\r\n            throw new Error('This cache has already been disposed');\r\n        }\r\n    }\r\n\r\n    abstract clear(): void;\r\n}\r\n\r\nexport class SimpleCache<K, V> extends DisposableCache {\r\n    protected readonly cache = new Map<K, V>();\r\n\r\n    has(key: K): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cache.has(key);\r\n    }\r\n\r\n    set(key: K, value: V): void {\r\n        this.throwIfDisposed();\r\n        this.cache.set(key, value);\r\n    }\r\n\r\n    get(key: K): V | undefined;\r\n    get(key: K, provider: () => V): V;\r\n    get(key: K, provider?: () => V): V | undefined {\r\n        this.throwIfDisposed();\r\n        if (this.cache.has(key)) {\r\n            return this.cache.get(key);\r\n        } else if (provider) {\r\n            const value = provider();\r\n            this.cache.set(key, value);\r\n            return value;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    delete(key: K): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cache.delete(key);\r\n    }\r\n\r\n    clear(): void {\r\n        this.throwIfDisposed();\r\n        this.cache.clear();\r\n    }\r\n}\r\n\r\nexport class ContextCache<Context, Key, Value, ContextKey = Context> extends DisposableCache {\r\n\r\n    private readonly cache = new Map<ContextKey | Context, Map<Key, Value>>();\r\n    private readonly converter: (input: Context) => ContextKey | Context;\r\n\r\n    constructor(converter?: (input: Context) => ContextKey) {\r\n        super();\r\n        this.converter = converter ?? (value => value);\r\n    }\r\n\r\n    has(contextKey: Context, key: Key): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cacheForContext(contextKey).has(key);\r\n    }\r\n\r\n    set(contextKey: Context, key: Key, value: Value): void {\r\n        this.throwIfDisposed();\r\n        this.cacheForContext(contextKey).set(key, value);\r\n    }\r\n\r\n    get(contextKey: Context, key: Key): Value | undefined;\r\n    get(contextKey: Context, key: Key, provider: () => Value): Value;\r\n    get(contextKey: Context, key: Key, provider?: () => Value): Value | undefined {\r\n        this.throwIfDisposed();\r\n        const contextCache = this.cacheForContext(contextKey);\r\n        if (contextCache.has(key)) {\r\n            return contextCache.get(key);\r\n        } else if (provider) {\r\n            const value = provider();\r\n            contextCache.set(key, value);\r\n            return value;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    delete(contextKey: Context, key: Key): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cacheForContext(contextKey).delete(key);\r\n    }\r\n\r\n    clear(): void;\r\n    clear(contextKey: Context): void;\r\n    clear(contextKey?: Context): void {\r\n        this.throwIfDisposed();\r\n        if (contextKey) {\r\n            const mapKey = this.converter(contextKey);\r\n            this.cache.delete(mapKey);\r\n        } else {\r\n            this.cache.clear();\r\n        }\r\n    }\r\n\r\n    protected cacheForContext(contextKey: Context): Map<Key, Value> {\r\n        const mapKey = this.converter(contextKey);\r\n        let documentCache = this.cache.get(mapKey);\r\n        if (!documentCache) {\r\n            documentCache = new Map();\r\n            this.cache.set(mapKey, documentCache);\r\n        }\r\n        return documentCache;\r\n    }\r\n}\r\n\r\n/**\r\n * Every key/value pair in this cache is scoped to a document.\r\n * If this document is changed or deleted, all associated key/value pairs are deleted.\r\n */\r\nexport class DocumentCache<K, V> extends ContextCache<URI | string, K, V, string> {\r\n\r\n    /**\r\n     * Creates a new document cache.\r\n     *\r\n     * @param sharedServices Service container instance to hook into document lifecycle events.\r\n     * @param state Optional document state on which the cache should evict.\r\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\r\n     * *Deleted* documents are considered in both cases.\r\n     *\r\n     * Providing a state here will use `DocumentBuilder#onDocumentPhase` instead,\r\n     * which triggers on all documents that have been affected by this change, assuming that the\r\n     * state is `DocumentState.Linked` or a later state.\r\n     */\r\n    constructor(sharedServices: LangiumSharedCoreServices, state?: DocumentState) {\r\n        super(uri => uri.toString());\r\n        if (state) {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onDocumentPhase(state, document => {\r\n                this.clear(document.uri.toString());\r\n            }));\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\r\n                for (const uri of deleted) { // react only on deleted documents\r\n                    this.clear(uri);\r\n                }\r\n            }));\r\n        } else {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\r\n                const allUris = changed.concat(deleted); // react on both changed and deleted documents\r\n                for (const uri of allUris) {\r\n                    this.clear(uri);\r\n                }\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Every key/value pair in this cache is scoped to the whole workspace.\r\n * If any document in the workspace is added, changed or deleted, the whole cache is evicted.\r\n */\r\nexport class WorkspaceCache<K, V> extends SimpleCache<K, V> {\r\n\r\n    /**\r\n     * Creates a new workspace cache.\r\n     *\r\n     * @param sharedServices Service container instance to hook into document lifecycle events.\r\n     * @param state Optional document state on which the cache should evict.\r\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\r\n     * *Deleted* documents are considered in both cases.\r\n     */\r\n    constructor(sharedServices: LangiumSharedCoreServices, state?: DocumentState) {\r\n        super();\r\n        if (state) {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onBuildPhase(state, () => {\r\n                this.clear();\r\n            }));\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\r\n                if (deleted.length > 0) { // react only on deleted documents\r\n                    this.clear();\r\n                }\r\n            }));\r\n        } else {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate(() => { // react on both changed and deleted documents\r\n                this.clear();\r\n            }));\r\n        }\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport type { Scope, ScopeOptions} from './scope.js';\r\nimport { MapScope, StreamScope } from './scope.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { WorkspaceCache } from '../utils/caching.js';\r\n\r\n/**\r\n * Language-specific service for determining the scope of target elements visible in a specific cross-reference context.\r\n */\r\nexport interface ScopeProvider {\r\n\r\n    /**\r\n     * Return a scope describing what elements are visible for the given AST node and cross-reference\r\n     * identifier.\r\n     *\r\n     * @param context Information about the reference for which a scope is requested.\r\n     */\r\n    getScope(context: ReferenceInfo): Scope;\r\n\r\n}\r\n\r\nexport class DefaultScopeProvider implements ScopeProvider {\r\n\r\n    protected readonly reflection: AstReflection;\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly descriptions: AstNodeDescriptionProvider;\r\n    protected readonly indexManager: IndexManager;\r\n\r\n    protected readonly globalScopeCache: WorkspaceCache<string, Scope>;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\r\n        this.indexManager = services.shared.workspace.IndexManager;\r\n        this.globalScopeCache = new WorkspaceCache<string, Scope>(services.shared);\r\n    }\r\n\r\n    getScope(context: ReferenceInfo): Scope {\r\n        const scopes: Array<Stream<AstNodeDescription>> = [];\r\n        const referenceType = this.reflection.getReferenceType(context);\r\n\r\n        const precomputed = getDocument(context.container).precomputedScopes;\r\n        if (precomputed) {\r\n            let currentNode: AstNode | undefined = context.container;\r\n            do {\r\n                const allDescriptions = precomputed.get(currentNode);\r\n                if (allDescriptions.length > 0) {\r\n                    scopes.push(stream(allDescriptions).filter(\r\n                        desc => this.reflection.isSubtype(desc.type, referenceType)));\r\n                }\r\n                currentNode = currentNode.$container;\r\n            } while (currentNode);\r\n        }\r\n\r\n        let result: Scope = this.getGlobalScope(referenceType, context);\r\n        for (let i = scopes.length - 1; i >= 0; i--) {\r\n            result = this.createScope(scopes[i], result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a scope for the given collection of AST node descriptions.\r\n     */\r\n    protected createScope(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions): Scope {\r\n        return new StreamScope(stream(elements), outerScope, options);\r\n    }\r\n\r\n    /**\r\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\r\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\r\n     */\r\n    protected createScopeForNodes(elements: Iterable<AstNode>, outerScope?: Scope, options?: ScopeOptions): Scope {\r\n        const s = stream(elements).map(e => {\r\n            const name = this.nameProvider.getName(e);\r\n            if (name) {\r\n                return this.descriptions.createDescription(e, name);\r\n            }\r\n            return undefined;\r\n        }).nonNullable();\r\n        return new StreamScope(s, outerScope, options);\r\n    }\r\n\r\n    /**\r\n     * Create a global scope filtered for the given reference type.\r\n     */\r\n    protected getGlobalScope(referenceType: string, _context: ReferenceInfo): Scope {\r\n        return this.globalScopeCache.get(referenceType, () => new MapScope(this.indexManager.allElements(referenceType)));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { URI } from 'vscode-uri';\r\nimport type { CommentProvider } from '../documentation/comment-provider.js';\r\nimport type { NameProvider } from '../references/name-provider.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode, GenericAstNode, Mutable, Reference } from '../syntax-tree.js';\r\nimport { isAstNode, isReference } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { findNodesForProperty } from '../utils/grammar-utils.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { DocumentSegment, LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\r\n\r\nexport interface JsonSerializeOptions {\r\n    /** The space parameter for `JSON.stringify`, controlling whether and how to pretty-print the output. */\r\n    space?: string | number;\r\n    /** Whether to include the `$refText` property for references (the name used to identify the target node). */\r\n    refText?: boolean;\r\n    /** Whether to include the `$sourceText` property, which holds the full source text from which an AST node was parsed. */\r\n    sourceText?: boolean;\r\n    /** Whether to include the `$textRegion` property, which holds information to trace AST node properties to their respective source text regions. */\r\n    textRegions?: boolean;\r\n    /** Whether to include the `$comment` property, which holds comments according to the CommentProvider service. */\r\n    comments?: boolean;\r\n    /** The replacer parameter for `JSON.stringify`; the default replacer given as parameter should be used to apply basic replacements. */\r\n    replacer?: (key: string, value: unknown, defaultReplacer: (key: string, value: unknown) => unknown) => unknown\r\n    /** Used to convert and serialize URIs when the target of a cross-reference is in a different document. */\r\n    uriConverter?: (uri: URI, reference: Reference) => string\r\n}\r\n\r\nexport interface JsonDeserializeOptions {\r\n    /** Used to parse and convert URIs when the target of a cross-reference is in a different document. */\r\n    uriConverter?: (uri: string) => URI\r\n}\r\n\r\n/**\r\n * {@link AstNode}s that may carry information on their definition area within the DSL text.\r\n */\r\nexport interface AstNodeWithTextRegion extends AstNode {\r\n    $sourceText?: string;\r\n    $textRegion?: AstNodeRegionWithAssignments;\r\n}\r\n\r\n/**\r\n * {@link AstNode}s that may carry a semantically relevant comment.\r\n */\r\nexport interface AstNodeWithComment extends AstNode {\r\n    $comment?: string;\r\n}\r\n\r\nexport function isAstNodeWithComment(node: AstNode): node is AstNodeWithComment {\r\n    return typeof (node as AstNodeWithComment).$comment === 'string';\r\n}\r\n\r\n/**\r\n * A {@link DocumentSegment} representing the definition area of an AstNode within the DSL text.\r\n * Usually contains text region information on all assigned property values of the AstNode,\r\n * and may contain the defining file's URI as string.\r\n */\r\nexport interface AstNodeRegionWithAssignments extends DocumentSegment {\r\n    /**\r\n     * A record containing an entry for each assigned property of the AstNode.\r\n     * The key is equal to the property name and the value is an array of the property values'\r\n     * text regions, regardless of whether the property is a single value or list property.\r\n     */\r\n    assignments?: Record<string, DocumentSegment[]>;\r\n    /**\r\n     * The AstNode defining file's URI as string\r\n     */\r\n    documentURI?: string;\r\n}\r\n\r\n/**\r\n * Utility service for transforming an `AstNode` into a JSON string and vice versa.\r\n */\r\nexport interface JsonSerializer {\r\n    /**\r\n     * Serialize an `AstNode` into a JSON `string`.\r\n     * @param node The `AstNode` to be serialized.\r\n     * @param options Serialization options\r\n     */\r\n    serialize(node: AstNode, options?: JsonSerializeOptions): string;\r\n    /**\r\n     * Deserialize (parse) a JSON `string` into an `AstNode`.\r\n     */\r\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T;\r\n}\r\n\r\n/**\r\n * A cross-reference in the serialized JSON representation of an AstNode.\r\n */\r\ninterface IntermediateReference {\r\n    /** URI pointing to the target element. This is either `#${path}` if the target is in the same document, or `${documentURI}#${path}` otherwise. */\r\n    $ref?: string\r\n    /** The actual text used to look up the reference target in the surrounding scope. */\r\n    $refText?: string\r\n    /** If any problem occurred while resolving the reference, it is described by this property. */\r\n    $error?: string\r\n}\r\n\r\nfunction isIntermediateReference(obj: unknown): obj is IntermediateReference {\r\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\r\n}\r\n\r\nexport class DefaultJsonSerializer implements JsonSerializer {\r\n\r\n    /** The set of AstNode properties to be ignored by the serializer. */\r\n    ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\r\n\r\n    /** The document that is currently processed by the serializer; this is used by the replacer function.  */\r\n    protected currentDocument: LangiumDocument | undefined;\r\n\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly commentProvider: CommentProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.commentProvider = services.documentation.CommentProvider;\r\n    }\r\n\r\n    serialize(node: AstNode, options?: JsonSerializeOptions): string {\r\n        const serializeOptions = options ?? {};\r\n        const specificReplacer = options?.replacer;\r\n        const defaultReplacer = (key: string, value: unknown) => this.replacer(key, value, serializeOptions);\r\n        const replacer = specificReplacer ? (key: string, value: unknown) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\r\n\r\n        try {\r\n            this.currentDocument = getDocument(node);\r\n            return JSON.stringify(node, replacer, options?.space);\r\n        } finally {\r\n            this.currentDocument = undefined;\r\n        }\r\n    }\r\n\r\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T {\r\n        const deserializeOptions = options ?? {};\r\n        const root = JSON.parse(content);\r\n        this.linkNode(root, root, deserializeOptions);\r\n        return root;\r\n    }\r\n\r\n    protected replacer(key: string, value: unknown, { refText, sourceText, textRegions, comments, uriConverter }: JsonSerializeOptions): unknown {\r\n        if (this.ignoreProperties.has(key)) {\r\n            return undefined;\r\n        } else if (isReference(value)) {\r\n            const refValue = value.ref;\r\n            const $refText = refText ? value.$refText : undefined;\r\n            if (refValue) {\r\n                const targetDocument = getDocument(refValue);\r\n                let targetUri = '';\r\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\r\n                    if (uriConverter) {\r\n                        targetUri = uriConverter(targetDocument.uri, value);\r\n                    } else {\r\n                        targetUri = targetDocument.uri.toString();\r\n                    }\r\n                }\r\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\r\n                return {\r\n                    $ref: `${targetUri}#${targetPath}`,\r\n                    $refText\r\n                } satisfies IntermediateReference;\r\n            } else {\r\n                return {\r\n                    $error: value.error?.message ?? 'Could not resolve reference',\r\n                    $refText\r\n                } satisfies IntermediateReference;\r\n            }\r\n        } else if (isAstNode(value)) {\r\n            let astNode: AstNodeWithTextRegion | undefined = undefined;\r\n            if (textRegions) {\r\n                astNode = this.addAstNodeRegionWithAssignmentsTo({ ...value });\r\n                if ((!key || value.$document) && astNode?.$textRegion) {\r\n                    // The document URI is added to the root node of the resulting JSON tree\r\n                    astNode.$textRegion.documentURI = this.currentDocument?.uri.toString();\r\n                }\r\n            }\r\n            if (sourceText && !key) {\r\n                astNode ??= { ...value };\r\n                astNode.$sourceText = value.$cstNode?.text;\r\n            }\r\n            if (comments) {\r\n                astNode ??= { ...value };\r\n                const comment = this.commentProvider.getComment(value);\r\n                if (comment) {\r\n                    (astNode as AstNodeWithComment).$comment = comment.replace(/\\r/g, '');\r\n                }\r\n            }\r\n            return astNode ?? value;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    protected addAstNodeRegionWithAssignmentsTo(node: AstNodeWithTextRegion) {\r\n        const createDocumentSegment: (cstNode: CstNode) => AstNodeRegionWithAssignments = cstNode => <DocumentSegment>{\r\n            offset: cstNode.offset,\r\n            end: cstNode.end,\r\n            length: cstNode.length,\r\n            range: cstNode.range,\r\n        };\r\n\r\n        if (node.$cstNode) {\r\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\r\n            const assignments: Record<string, DocumentSegment[]> = textRegion.assignments = {};\r\n\r\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\r\n                const propertyAssignments = findNodesForProperty(node.$cstNode, key).map(createDocumentSegment);\r\n                if (propertyAssignments.length !== 0) {\r\n                    assignments[key] = propertyAssignments;\r\n                }\r\n            });\r\n\r\n            return node;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected linkNode(node: GenericAstNode, root: AstNode, options: JsonDeserializeOptions, container?: AstNode, containerProperty?: string, containerIndex?: number) {\r\n        for (const [propertyName, item] of Object.entries(node)) {\r\n            if (Array.isArray(item)) {\r\n                for (let index = 0; index < item.length; index++) {\r\n                    const element = item[index];\r\n                    if (isIntermediateReference(element)) {\r\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\r\n                    } else if (isAstNode(element)) {\r\n                        this.linkNode(element as GenericAstNode, root, options, node, propertyName, index);\r\n                    }\r\n                }\r\n            } else if (isIntermediateReference(item)) {\r\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\r\n            } else if (isAstNode(item)) {\r\n                this.linkNode(item as GenericAstNode, root, options, node, propertyName);\r\n            }\r\n        }\r\n        const mutable = node as Mutable<AstNode>;\r\n        mutable.$container = container;\r\n        mutable.$containerProperty = containerProperty;\r\n        mutable.$containerIndex = containerIndex;\r\n    }\r\n\r\n    protected reviveReference(container: AstNode, property: string, root: AstNode, reference: IntermediateReference, options: JsonDeserializeOptions): Reference | undefined {\r\n        let refText = reference.$refText;\r\n        let error = reference.$error;\r\n        if (reference.$ref) {\r\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\r\n            if (isAstNode(ref)) {\r\n                if (!refText) {\r\n                    refText = this.nameProvider.getName(ref);\r\n                }\r\n                return {\r\n                    $refText: refText ?? '',\r\n                    ref\r\n                };\r\n            } else {\r\n                error = ref;\r\n            }\r\n        }\r\n        if (error) {\r\n            const ref: Mutable<Reference> = {\r\n                $refText: refText ?? ''\r\n            };\r\n            ref.error = {\r\n                container,\r\n                property,\r\n                message: error,\r\n                reference: ref\r\n            };\r\n            return ref;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected getRefNode(root: AstNode, uri: string, uriConverter?: (uri: string) => URI): AstNode | string {\r\n        try {\r\n            const fragmentIndex = uri.indexOf('#');\r\n            if (fragmentIndex === 0) {\r\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\r\n                if (!node) {\r\n                    return 'Could not resolve path: ' + uri;\r\n                }\r\n                return node;\r\n            }\r\n            if (fragmentIndex < 0) {\r\n                const documentUri = uriConverter ? uriConverter(uri) : URI.parse(uri);\r\n                const document = this.langiumDocuments.getDocument(documentUri);\r\n                if (!document) {\r\n                    return 'Could not find document for URI: ' + uri;\r\n                }\r\n                return document.parseResult.value;\r\n            }\r\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : URI.parse(uri.substring(0, fragmentIndex));\r\n            const document = this.langiumDocuments.getDocument(documentUri);\r\n            if (!document) {\r\n                return 'Could not find document for URI: ' + uri;\r\n            }\r\n            if (fragmentIndex === uri.length - 1) {\r\n                return document.parseResult.value;\r\n            }\r\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\r\n            if (!node) {\r\n                return 'Could not resolve URI: ' + uri;\r\n            }\r\n            return node;\r\n        } catch (err) {\r\n            return String(err);\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { TextDocumentProvider } from './workspace/documents.js';\r\nimport { UriUtils, type URI } from './utils/uri-utils.js';\r\n\r\n/**\r\n * The service registry provides access to the language-specific {@link LangiumCoreServices} optionally including LSP-related services.\r\n * These are resolved via the URI of a text document.\r\n */\r\nexport interface ServiceRegistry {\r\n\r\n    /**\r\n     * Register a language via its injected services.\r\n     */\r\n    register(language: LangiumCoreServices): void;\r\n\r\n    /**\r\n     * Retrieve the language-specific services for the given URI. In case only one language is\r\n     * registered, it may be used regardless of the URI format.\r\n     */\r\n    getServices(uri: URI): LangiumCoreServices;\r\n\r\n    /**\r\n     * Check whether services are available for the given URI.\r\n     */\r\n    hasServices(uri: URI): boolean;\r\n\r\n    /**\r\n     * The full set of registered language services.\r\n     */\r\n    readonly all: readonly LangiumCoreServices[];\r\n}\r\n\r\n/**\r\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\r\n */\r\nexport class DefaultServiceRegistry implements ServiceRegistry {\r\n\r\n    protected singleton?: LangiumCoreServices;\r\n    protected readonly languageIdMap = new Map<string, LangiumCoreServices>();\r\n    protected readonly fileExtensionMap = new Map<string, LangiumCoreServices>();\r\n\r\n    /**\r\n     * @deprecated Use the new `fileExtensionMap` (or `languageIdMap`) property instead.\r\n     */\r\n    protected get map(): Map<string, LangiumCoreServices> | undefined {\r\n        return this.fileExtensionMap;\r\n    }\r\n\r\n    protected readonly textDocuments?: TextDocumentProvider;\r\n\r\n    constructor(services?: LangiumSharedCoreServices) {\r\n        this.textDocuments = services?.workspace.TextDocuments;\r\n    }\r\n\r\n    register(language: LangiumCoreServices): void {\r\n        const data = language.LanguageMetaData;\r\n        for (const ext of data.fileExtensions) {\r\n            if (this.fileExtensionMap.has(ext)) {\r\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${data.languageId}'.`);\r\n            }\r\n            this.fileExtensionMap.set(ext, language);\r\n        }\r\n        this.languageIdMap.set(data.languageId, language);\r\n        if (this.languageIdMap.size === 1) {\r\n            this.singleton = language;\r\n        } else {\r\n            this.singleton = undefined;\r\n        }\r\n    }\r\n\r\n    getServices(uri: URI): LangiumCoreServices {\r\n        if (this.singleton !== undefined) {\r\n            return this.singleton;\r\n        }\r\n        if (this.languageIdMap.size === 0) {\r\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\r\n        }\r\n        const languageId = this.textDocuments?.get(uri)?.languageId;\r\n        if (languageId !== undefined) {\r\n            const services = this.languageIdMap.get(languageId);\r\n            if (services) {\r\n                return services;\r\n            }\r\n        }\r\n        const ext = UriUtils.extname(uri);\r\n        const services = this.fileExtensionMap.get(ext);\r\n        if (!services) {\r\n            if (languageId) {\r\n                throw new Error(`The service registry contains no services for the extension '${ext}' for language '${languageId}'.`);\r\n            } else {\r\n                throw new Error(`The service registry contains no services for the extension '${ext}'.`);\r\n            }\r\n        }\r\n        return services;\r\n    }\r\n\r\n    hasServices(uri: URI): boolean {\r\n        try {\r\n            this.getServices(uri);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get all(): readonly LangiumCoreServices[] {\r\n        return Array.from(this.languageIdMap.values());\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CodeDescription, DiagnosticRelatedInformation, DiagnosticTag, integer, Range } from 'vscode-languageserver-types';\r\nimport { assertUnreachable } from '../index.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstReflection, Properties } from '../syntax-tree.js';\r\nimport type { CancellationToken } from '../utils/cancellation.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport type { MaybePromise } from '../utils/promise-utils.js';\r\nimport { isOperationCancelled } from '../utils/promise-utils.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { DocumentSegment } from '../workspace/documents.js';\r\n\r\nexport type DiagnosticInfo<N extends AstNode, P extends string = Properties<N>> = {\r\n    /** The AST node to which the diagnostic is attached. */\r\n    node: N;\r\n    /** If a property name is given, the diagnostic is restricted to the corresponding text region. */\r\n    property?: P;\r\n    /** If the value of a keyword is given, the diagnostic will appear at its corresponding text region */\r\n    keyword?: string;\r\n    /** In case of a multi-value property (array), an index can be given to select a specific element. */\r\n    index?: number;\r\n    /** If you want to create a diagnostic independent to any property, use the range property. */\r\n    range?: Range;\r\n    /** The diagnostic's code, which usually appear in the user interface. */\r\n    code?: integer | string;\r\n    /** An optional property to describe the error code. */\r\n    codeDescription?: CodeDescription;\r\n    /** Additional metadata about the diagnostic. */\r\n    tags?: DiagnosticTag[];\r\n    /** An array of related diagnostic information, e.g. when symbol-names within a scope collide all definitions can be marked via this property. */\r\n    relatedInformation?: DiagnosticRelatedInformation[];\r\n    /** A data entry field that is preserved between a `textDocument/publishDiagnostics` notification and `textDocument/codeAction` request. */\r\n    data?: unknown;\r\n}\r\n\r\n/**\r\n * Shape of information commonly used in the `data` field of diagnostics.\r\n */\r\nexport interface DiagnosticData {\r\n    /** Diagnostic code for identifying which code action to apply. This code is _not_ shown in the user interface. */\r\n    code: string\r\n    /** Specifies where to apply the code action in the form of a `DocumentSegment`. */\r\n    actionSegment?: DocumentSegment\r\n    /** Specifies where to apply the code action in the form of a `Range`. */\r\n    actionRange?: Range\r\n}\r\n\r\n/**\r\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\r\n */\r\nexport function diagnosticData(code: string): DiagnosticData {\r\n    return { code };\r\n}\r\n\r\nexport type ValidationSeverity = 'error' | 'warning' | 'info' | 'hint';\r\n\r\nexport type ValidationAcceptor = <N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N>) => void\r\n\r\nexport type ValidationCheck<T extends AstNode = AstNode> = (node: T, accept: ValidationAcceptor, cancelToken: CancellationToken) => MaybePromise<void>;\r\n\r\n/**\r\n * A utility type for describing functions which will be called once before or after all the AstNodes of an AST/Langium document are validated.\r\n *\r\n * The AST is represented by its root AstNode.\r\n *\r\n * The given validation acceptor helps to report some early or lately detected issues.\r\n *\r\n * The 'categories' indicate, which validation categories are executed for all the AstNodes.\r\n * This helps to tailor the preparations/tear-down logic to the actually executed checks on the nodes.\r\n *\r\n * It is recommended to support interrupts during long-running logic with 'interruptAndCheck(cancelToken)'.\r\n */\r\nexport type ValidationPreparation = (rootNode: AstNode, accept: ValidationAcceptor, categories: ValidationCategory[], cancelToken: CancellationToken) => MaybePromise<void>;\r\n\r\n/**\r\n * A utility type for associating non-primitive AST types to corresponding validation checks. For example:\r\n *\r\n * ```ts\r\n *   const checks: ValidationChecks<StatemachineAstType> = {\r\n *       State: validator.checkStateNameStartsWithCapital\r\n *    };\r\n * ```\r\n *\r\n * If an AST type does not extend AstNode, e.g. if it describes a union of string literals, that type's name must not occur as a key in objects of type `ValidationCheck<...>`.\r\n *\r\n * @param T a type definition mapping language specific type names (keys) to the corresponding types (values)\r\n */\r\nexport type ValidationChecks<T> = {\r\n    [K in keyof T]?: T[K] extends AstNode ? ValidationCheck<T[K]> | Array<ValidationCheck<T[K]>> : never\r\n} & {\r\n    AstNode?: ValidationCheck<AstNode> | Array<ValidationCheck<AstNode>>;\r\n}\r\n\r\n/**\r\n * `fast` checks can be executed after every document change (i.e. as the user is typing). If a check\r\n * is too slow it can delay the response to document changes, yielding bad user experience. By marking\r\n * it as `slow`, it will be skipped for normal as-you-type validation. Then it's up to you when to\r\n * schedule these long-running checks: after the fast checks are done, or after saving a document,\r\n * or with an explicit command, etc.\r\n *\r\n * `built-in` checks are errors produced by the lexer, the parser, or the linker. They cannot be used\r\n * for custom validation checks.\r\n */\r\nexport type ValidationCategory = 'fast' | 'slow' | 'built-in'\r\n\r\nexport namespace ValidationCategory {\r\n    export const all: readonly ValidationCategory[] = ['fast', 'slow', 'built-in'];\r\n}\r\n\r\ntype ValidationCheckEntry = {\r\n    check: ValidationCheck\r\n    category: ValidationCategory\r\n}\r\n\r\n/**\r\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\r\n */\r\nexport class ValidationRegistry {\r\n    private readonly entries = new MultiMap<string, ValidationCheckEntry>();\r\n    private readonly reflection: AstReflection;\r\n\r\n    private entriesBefore: ValidationPreparation[] = [];\r\n    private entriesAfter: ValidationPreparation[] = [];\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n    }\r\n\r\n    /**\r\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\r\n     * or an array of validation checks.\r\n     *\r\n     * @param checksRecord Set of validation checks to register.\r\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    register<T>(checksRecord: ValidationChecks<T>, thisObj: ThisParameterType<unknown> = this, category: ValidationCategory = 'fast'): void {\r\n        if (category === 'built-in') {\r\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\r\n        }\r\n        for (const [type, ch] of Object.entries(checksRecord)) {\r\n            const callbacks = ch as ValidationCheck | ValidationCheck[];\r\n            if (Array.isArray(callbacks)) {\r\n                for (const check of callbacks) {\r\n                    const entry: ValidationCheckEntry = {\r\n                        check: this.wrapValidationException(check, thisObj),\r\n                        category\r\n                    };\r\n                    this.addEntry(type, entry);\r\n                }\r\n            } else if (typeof callbacks === 'function') {\r\n                const entry: ValidationCheckEntry = {\r\n                    check: this.wrapValidationException(callbacks, thisObj),\r\n                    category\r\n                };\r\n                this.addEntry(type, entry);\r\n            } else {\r\n                assertUnreachable(callbacks);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected wrapValidationException(check: ValidationCheck, thisObj: unknown): ValidationCheck {\r\n        return async (node, accept, cancelToken) => {\r\n            await this.handleException(() => check.call(thisObj, node, accept, cancelToken), 'An error occurred during validation', accept, node);\r\n        };\r\n    }\r\n\r\n    protected async handleException(functionality: () => MaybePromise<void>, messageContext: string, accept: ValidationAcceptor, node: AstNode): Promise<void> {\r\n        try {\r\n            await functionality();\r\n        } catch (err) {\r\n            if (isOperationCancelled(err)) {\r\n                throw err;\r\n            }\r\n            console.error(`${messageContext}:`, err);\r\n            if (err instanceof Error && err.stack) {\r\n                console.error(err.stack);\r\n            }\r\n            const messageDetails = err instanceof Error ? err.message : String(err);\r\n            accept('error', `${messageContext}: ${messageDetails}`, { node });\r\n        }\r\n    }\r\n\r\n    protected addEntry(type: string, entry: ValidationCheckEntry): void {\r\n        if (type === 'AstNode') {\r\n            this.entries.add('AstNode', entry);\r\n            return;\r\n        }\r\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\r\n            this.entries.add(subtype, entry);\r\n        }\r\n    }\r\n\r\n    getChecks(type: string, categories?: ValidationCategory[]): Stream<ValidationCheck> {\r\n        let checks = stream(this.entries.get(type))\r\n            .concat(this.entries.get('AstNode'));\r\n        if (categories) {\r\n            checks = checks.filter(entry => categories.includes(entry.category));\r\n        }\r\n        return checks.map(entry => entry.check);\r\n    }\r\n\r\n    /**\r\n     * Register logic which will be executed once before validating all the nodes of an AST/Langium document.\r\n     * This helps to prepare or initialize some information which are required or reusable for the following checks on the AstNodes.\r\n     *\r\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\r\n     * here the map for mapping names to nodes could be established.\r\n     * During the usual checks on the nodes, they are put into this map with their name.\r\n     *\r\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\r\n     * Therefore it is recommended to clear stored information\r\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\r\n     * AND _after_ validating the AST to free memory by information which are no longer used.\r\n     *\r\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    registerBeforeDocument(checkBefore: ValidationPreparation, thisObj: ThisParameterType<unknown> = this): void {\r\n        this.entriesBefore.push(this.wrapPreparationException(checkBefore, 'An error occurred during set-up of the validation', thisObj));\r\n    }\r\n\r\n    /**\r\n     * Register logic which will be executed once after validating all the nodes of an AST/Langium document.\r\n     * This helps to finally evaluate information which are collected during the checks on the AstNodes.\r\n     *\r\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\r\n     * here the map with all the collected nodes and their names is checked\r\n     * and validation hints are created for all nodes with the same name.\r\n     *\r\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\r\n     * Therefore it is recommended to clear stored information\r\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\r\n     * AND _after_ validating the AST to free memory by information which are no longer used.\r\n     *\r\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    registerAfterDocument(checkAfter: ValidationPreparation, thisObj: ThisParameterType<unknown> = this): void {\r\n        this.entriesAfter.push(this.wrapPreparationException(checkAfter, 'An error occurred during tear-down of the validation', thisObj));\r\n    }\r\n\r\n    protected wrapPreparationException(check: ValidationPreparation, messageContext: string, thisObj: unknown): ValidationPreparation {\r\n        return async (rootNode, accept, categories, cancelToken) => {\r\n            await this.handleException(() => check.call(thisObj, rootNode, accept, categories, cancelToken), messageContext, accept, rootNode);\r\n        };\r\n    }\r\n\r\n    get checksBefore(): ValidationPreparation[] {\r\n        return this.entriesBefore;\r\n    }\r\n\r\n    get checksAfter(): ValidationPreparation[] {\r\n        return this.entriesAfter;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { MismatchedTokenException } from 'chevrotain';\r\nimport type { DiagnosticSeverity, Position, Range, Diagnostic } from 'vscode-languageserver-types';\r\nimport type { LanguageMetaData } from '../languages/language-meta-data.js';\r\nimport type { ParseResult } from '../parser/langium-parser.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport type { LangiumDocument } from '../workspace/documents.js';\r\nimport type { DiagnosticData, DiagnosticInfo, ValidationAcceptor, ValidationCategory, ValidationRegistry, ValidationSeverity } from './validation-registry.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { findNodeForKeyword, findNodeForProperty } from '../utils/grammar-utils.js';\r\nimport { streamAst } from '../utils/ast-utils.js';\r\nimport { tokenToRange } from '../utils/cst-utils.js';\r\nimport { interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\r\nimport { diagnosticData } from './validation-registry.js';\r\nimport type { LexingDiagnostic, LexingDiagnosticSeverity } from '../parser/token-builder.js';\r\n\r\nexport interface ValidationOptions {\r\n    /**\r\n     * If this is set, only the checks associated with these categories are executed; otherwise\r\n     * all checks are executed. The default category if not specified to the registry is `'fast'`.\r\n     */\r\n    categories?: ValidationCategory[];\r\n    /** If true, no further diagnostics are reported if there are lexing errors. */\r\n    stopAfterLexingErrors?: boolean\r\n    /** If true, no further diagnostics are reported if there are parsing errors. */\r\n    stopAfterParsingErrors?: boolean\r\n    /** If true, no further diagnostics are reported if there are linking errors. */\r\n    stopAfterLinkingErrors?: boolean\r\n}\r\n\r\n/**\r\n * Language-specific service for validating `LangiumDocument`s.\r\n */\r\nexport interface DocumentValidator {\r\n    /**\r\n     * Validates the whole specified document.\r\n     *\r\n     * @param document specified document to validate\r\n     * @param options options to control the validation process\r\n     * @param cancelToken allows to cancel the current operation\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    validateDocument(document: LangiumDocument, options?: ValidationOptions, cancelToken?: CancellationToken): Promise<Diagnostic[]>;\r\n}\r\n\r\nexport class DefaultDocumentValidator implements DocumentValidator {\r\n\r\n    protected readonly validationRegistry: ValidationRegistry;\r\n    protected readonly metadata: LanguageMetaData;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.validationRegistry = services.validation.ValidationRegistry;\r\n        this.metadata = services.LanguageMetaData;\r\n    }\r\n\r\n    async validateDocument(document: LangiumDocument, options: ValidationOptions = {}, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\r\n        const parseResult = document.parseResult;\r\n        const diagnostics: Diagnostic[] = [];\r\n\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        if (!options.categories || options.categories.includes('built-in')) {\r\n            this.processLexingErrors(parseResult, diagnostics, options);\r\n            if (options.stopAfterLexingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LexingError)) {\r\n                return diagnostics;\r\n            }\r\n\r\n            this.processParsingErrors(parseResult, diagnostics, options);\r\n            if (options.stopAfterParsingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.ParsingError)) {\r\n                return diagnostics;\r\n            }\r\n\r\n            this.processLinkingErrors(document, diagnostics, options);\r\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LinkingError)) {\r\n                return diagnostics;\r\n            }\r\n        }\r\n\r\n        // Process custom validations\r\n        try {\r\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\r\n        } catch (err) {\r\n            if (isOperationCancelled(err)) {\r\n                throw err;\r\n            }\r\n            console.error('An error occurred during validation:', err);\r\n        }\r\n\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        return diagnostics;\r\n    }\r\n\r\n    protected processLexingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        const lexerDiagnostics = [...parseResult.lexerErrors, ...parseResult.lexerReport?.diagnostics ?? []] as LexingDiagnostic[];\r\n        for (const lexerDiagnostic of lexerDiagnostics) {\r\n            const severity = lexerDiagnostic.severity ?? 'error';\r\n            const diagnostic: Diagnostic = {\r\n                severity: toDiagnosticSeverity(severity),\r\n                range: {\r\n                    start: {\r\n                        line: lexerDiagnostic.line! - 1,\r\n                        character: lexerDiagnostic.column! - 1\r\n                    },\r\n                    end: {\r\n                        line: lexerDiagnostic.line! - 1,\r\n                        character: lexerDiagnostic.column! + lexerDiagnostic.length - 1\r\n                    }\r\n                },\r\n                message: lexerDiagnostic.message,\r\n                data: toDiagnosticData(severity),\r\n                source: this.getSource()\r\n            };\r\n            diagnostics.push(diagnostic);\r\n        }\r\n    }\r\n\r\n    protected processParsingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        for (const parserError of parseResult.parserErrors) {\r\n            let range: Range | undefined = undefined;\r\n            // We can run into the chevrotain error recovery here\r\n            // The token contained in the parser error might be automatically inserted\r\n            // In this case every position value will be `NaN`\r\n            if (isNaN(parserError.token.startOffset)) {\r\n                // Some special parser error types contain a `previousToken`\r\n                // We can simply append our diagnostic to that token\r\n                if ('previousToken' in parserError) {\r\n                    const token = (parserError as MismatchedTokenException).previousToken;\r\n                    if (!isNaN(token.startOffset)) {\r\n                        const position: Position = { line: token.endLine! - 1, character: token.endColumn! };\r\n                        range = { start: position, end: position};\r\n                    } else {\r\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\r\n                        // Point to document start\r\n                        const position: Position = { line: 0, character: 0 };\r\n                        range = { start: position, end: position};\r\n                    }\r\n                }\r\n            } else {\r\n                range = tokenToRange(parserError.token);\r\n            }\r\n            if (range) {\r\n                const diagnostic: Diagnostic = {\r\n                    severity: toDiagnosticSeverity('error'),\r\n                    range,\r\n                    message: parserError.message,\r\n                    data: diagnosticData(DocumentValidator.ParsingError),\r\n                    source: this.getSource()\r\n                };\r\n                diagnostics.push(diagnostic);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected processLinkingErrors(document: LangiumDocument, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        for (const reference of document.references) {\r\n            const linkingError = reference.error;\r\n            if (linkingError) {\r\n                const info: DiagnosticInfo<AstNode, string> = {\r\n                    node: linkingError.container,\r\n                    property: linkingError.property,\r\n                    index: linkingError.index,\r\n                    data: {\r\n                        code: DocumentValidator.LinkingError,\r\n                        containerType: linkingError.container.$type,\r\n                        property: linkingError.property,\r\n                        refText: linkingError.reference.$refText\r\n                    } satisfies LinkingErrorData\r\n                };\r\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async validateAst(rootNode: AstNode, options: ValidationOptions, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\r\n        const validationItems: Diagnostic[] = [];\r\n        const acceptor: ValidationAcceptor = <N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N>) => {\r\n            validationItems.push(this.toDiagnostic(severity, message, info));\r\n        };\r\n\r\n        await this.validateAstBefore(rootNode, options, acceptor, cancelToken);\r\n        await this.validateAstNodes(rootNode, options, acceptor, cancelToken);\r\n        await this.validateAstAfter(rootNode, options, acceptor, cancelToken);\r\n\r\n        return validationItems;\r\n    }\r\n\r\n    protected async validateAstBefore(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        const checksBefore = this.validationRegistry.checksBefore;\r\n        for (const checkBefore of checksBefore) {\r\n            await interruptAndCheck(cancelToken);\r\n            await checkBefore(rootNode, acceptor, options.categories ?? [], cancelToken);\r\n        }\r\n    }\r\n\r\n    protected async validateAstNodes(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        await Promise.all(streamAst(rootNode).map(async node => {\r\n            await interruptAndCheck(cancelToken);\r\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\r\n            for (const check of checks) {\r\n                await check(node, acceptor, cancelToken);\r\n            }\r\n        }));\r\n    }\r\n\r\n    protected async validateAstAfter(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        const checksAfter = this.validationRegistry.checksAfter;\r\n        for (const checkAfter of checksAfter) {\r\n            await interruptAndCheck(cancelToken);\r\n            await checkAfter(rootNode, acceptor, options.categories ?? [], cancelToken);\r\n        }\r\n    }\r\n\r\n    protected toDiagnostic<N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N, string>): Diagnostic {\r\n        return {\r\n            message,\r\n            range: getDiagnosticRange(info),\r\n            severity: toDiagnosticSeverity(severity),\r\n            code: info.code,\r\n            codeDescription: info.codeDescription,\r\n            tags: info.tags,\r\n            relatedInformation: info.relatedInformation,\r\n            data: info.data,\r\n            source: this.getSource()\r\n        };\r\n    }\r\n\r\n    protected getSource(): string | undefined {\r\n        return this.metadata.languageId;\r\n    }\r\n}\r\n\r\nexport function getDiagnosticRange<N extends AstNode>(info: DiagnosticInfo<N, string>): Range {\r\n    if (info.range) {\r\n        return info.range;\r\n    }\r\n    let cstNode: CstNode | undefined;\r\n    if (typeof info.property === 'string') {\r\n        cstNode = findNodeForProperty(info.node.$cstNode, info.property, info.index);\r\n    } else if (typeof info.keyword === 'string') {\r\n        cstNode = findNodeForKeyword(info.node.$cstNode, info.keyword, info.index);\r\n    }\r\n    cstNode ??= info.node.$cstNode;\r\n    if (!cstNode) {\r\n        return {\r\n            start: { line: 0, character: 0 },\r\n            end: { line: 0, character: 0 }\r\n        };\r\n    }\r\n    return cstNode.range;\r\n}\r\n\r\n/**\r\n * Transforms the diagnostic severity from the {@link LexingDiagnosticSeverity} format to LSP's `DiagnosticSeverity` format.\r\n *\r\n * @param severity The lexing diagnostic severity\r\n * @returns Diagnostic severity according to `vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity`\r\n */\r\nexport function toDiagnosticSeverity(severity: LexingDiagnosticSeverity): DiagnosticSeverity {\r\n    switch (severity) {\r\n        case 'error':\r\n            return 1 satisfies typeof DiagnosticSeverity.Error;\r\n        case 'warning':\r\n            return 2 satisfies typeof DiagnosticSeverity.Warning;\r\n        case 'info':\r\n            return 3 satisfies typeof DiagnosticSeverity.Information;\r\n        case 'hint':\r\n            return 4 satisfies typeof DiagnosticSeverity.Hint;\r\n        default:\r\n            throw new Error('Invalid diagnostic severity: ' + severity);\r\n    }\r\n}\r\n\r\nexport function toDiagnosticData(severity: LexingDiagnosticSeverity): DiagnosticData {\r\n    switch (severity) {\r\n        case 'error':\r\n            return diagnosticData(DocumentValidator.LexingError);\r\n        case 'warning':\r\n            return diagnosticData(DocumentValidator.LexingWarning);\r\n        case 'info':\r\n            return diagnosticData(DocumentValidator.LexingInfo);\r\n        case 'hint':\r\n            return diagnosticData(DocumentValidator.LexingHint);\r\n        default:\r\n            throw new Error('Invalid diagnostic severity: ' + severity);\r\n    }\r\n}\r\n\r\nexport namespace DocumentValidator {\r\n    export const LexingError = 'lexing-error';\r\n    export const LexingWarning = 'lexing-warning';\r\n    export const LexingInfo = 'lexing-info';\r\n    export const LexingHint = 'lexing-hint';\r\n    export const ParsingError = 'parsing-error';\r\n    export const LinkingError = 'linking-error';\r\n}\r\n\r\nexport interface LinkingErrorData extends DiagnosticData {\r\n    containerType: string\r\n    property: string\r\n    refText: string\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport type { NameProvider } from '../references/name-provider.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { AstNodeLocator } from './ast-node-locator.js';\r\nimport type { DocumentSegment, LangiumDocument } from './documents.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { isLinkingError } from '../syntax-tree.js';\r\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\r\nimport { toDocumentSegment } from '../utils/cst-utils.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * Language-specific service for creating descriptions of AST nodes to be used for cross-reference resolutions.\r\n */\r\nexport interface AstNodeDescriptionProvider {\r\n\r\n    /**\r\n     * Create a description for the given AST node. This service method is typically used while indexing\r\n     * the contents of a document and during scope computation.\r\n     *\r\n     * @param node An AST node.\r\n     * @param name The name to be used to refer to the AST node. By default, this is determined by the\r\n     *     `NameProvider` service, but alternative names may be provided according to the semantics\r\n     *     of your language.\r\n     * @param document The document containing the AST node. If omitted, it is taken from the root AST node.\r\n     */\r\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription;\r\n\r\n}\r\n\r\nexport class DefaultAstNodeDescriptionProvider implements AstNodeDescriptionProvider {\r\n\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly nameProvider: NameProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n        this.nameProvider = services.references.NameProvider;\r\n    }\r\n\r\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription {\r\n        const doc = document ?? getDocument(node);\r\n        name ??= this.nameProvider.getName(node);\r\n        const path = this.astNodeLocator.getAstNodePath(node);\r\n        if (!name) {\r\n            throw new Error(`Node at path ${path} has no name.`);\r\n        }\r\n        let nameNodeSegment: DocumentSegment | undefined;\r\n        const nameSegmentGetter = () => nameNodeSegment ??= toDocumentSegment(this.nameProvider.getNameNode(node) ?? node.$cstNode);\r\n        return {\r\n            node,\r\n            name,\r\n            get nameSegment() {\r\n                return nameSegmentGetter();\r\n            },\r\n            selectionSegment: toDocumentSegment(node.$cstNode),\r\n            type: node.$type,\r\n            documentUri: doc.uri,\r\n            path\r\n        };\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Describes a cross-reference within a document or between two documents.\r\n */\r\nexport interface ReferenceDescription {\r\n    /** URI of the document that holds a reference */\r\n    sourceUri: URI\r\n    /** Path to AstNode that holds a reference */\r\n    sourcePath: string\r\n    /** Target document uri */\r\n    targetUri: URI\r\n    /** Path to the target AstNode inside the document */\r\n    targetPath: string\r\n    /** Segment of the reference text. */\r\n    segment: DocumentSegment\r\n    /** Marks a local reference i.e. a cross reference inside a document.   */\r\n    local?: boolean\r\n}\r\n\r\n/**\r\n * Language-specific service to create descriptions of all cross-references in a document. These are used by the `IndexManager`\r\n * to determine which documents are affected and should be rebuilt when a document is changed.\r\n */\r\nexport interface ReferenceDescriptionProvider {\r\n    /**\r\n     * Create descriptions of all cross-references found in the given document. These descriptions are\r\n     * gathered by the `IndexManager` and stored in the global index so they can be considered when\r\n     * a document change is reported by the client.\r\n     *\r\n     * @param document The document in which to gather cross-references.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    createDescriptions(document: LangiumDocument, cancelToken?: CancellationToken): Promise<ReferenceDescription[]>;\r\n}\r\n\r\nexport class DefaultReferenceDescriptionProvider implements ReferenceDescriptionProvider {\r\n\r\n    protected readonly nodeLocator: AstNodeLocator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    async createDescriptions(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<ReferenceDescription[]> {\r\n        const descr: ReferenceDescription[] = [];\r\n        const rootNode = document.parseResult.value;\r\n        for (const astNode of streamAst(rootNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            streamReferences(astNode).filter(refInfo => !isLinkingError(refInfo)).forEach(refInfo => {\r\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\r\n                const description = this.createDescription(refInfo);\r\n                if (description) {\r\n                    descr.push(description);\r\n                }\r\n            });\r\n        }\r\n        return descr;\r\n    }\r\n\r\n    protected createDescription(refInfo: ReferenceInfo): ReferenceDescription | undefined {\r\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\r\n        const refCstNode = refInfo.reference.$refNode;\r\n        if (!targetNodeDescr || !refCstNode) {\r\n            return undefined;\r\n        }\r\n        const docUri = getDocument(refInfo.container).uri;\r\n        return {\r\n            sourceUri: docUri,\r\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\r\n            targetUri: targetNodeDescr.documentUri,\r\n            targetPath: targetNodeDescr.path,\r\n            segment: toDocumentSegment(refCstNode),\r\n            local: UriUtils.equals(targetNodeDescr.documentUri, docUri)\r\n        };\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode } from '../syntax-tree.js';\r\n\r\n/**\r\n * Language-specific service for locating an `AstNode` in a document.\r\n */\r\nexport interface AstNodeLocator {\r\n\r\n    /**\r\n     * Creates a path represented by a `string` that identifies an `AstNode` inside its document.\r\n     * It must be possible to retrieve exactly the same `AstNode` from the document using this path.\r\n     *\r\n     * @param node The `AstNode` for which to create the path.\r\n     * @returns a path represented by a `string` that identifies `node` inside its document.\r\n     * @see AstNodeLocator.getAstNode\r\n     */\r\n    getAstNodePath(node: AstNode): string;\r\n\r\n    /**\r\n     * Locates an `AstNode` inside another node by following the given path.\r\n     *\r\n     * @param node Parent element.\r\n     * @param path Describes how to locate the `AstNode` inside the given `node`.\r\n     * @returns The `AstNode` located under the given path, or `undefined` if the path cannot be resolved.\r\n     * @see AstNodeLocator.getAstNodePath\r\n     */\r\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined;\r\n\r\n}\r\n\r\nexport class DefaultAstNodeLocator implements AstNodeLocator {\r\n    protected segmentSeparator = '/';\r\n    protected indexSeparator = '@';\r\n\r\n    getAstNodePath(node: AstNode): string {\r\n        if (node.$container) {\r\n            const containerPath = this.getAstNodePath(node.$container);\r\n            const newSegment = this.getPathSegment(node);\r\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\r\n            return nodePath;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    protected getPathSegment({ $containerProperty, $containerIndex }: AstNode): string {\r\n        if (!$containerProperty) {\r\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\r\n        }\r\n        if ($containerIndex !== undefined) {\r\n            return $containerProperty + this.indexSeparator + $containerIndex;\r\n        }\r\n        return $containerProperty;\r\n    }\r\n\r\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined {\r\n        const segments = path.split(this.segmentSeparator);\r\n        return segments.reduce((previousValue, currentValue) => {\r\n            if (!previousValue || currentValue.length === 0) {\r\n                return previousValue;\r\n            }\r\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\r\n            if (propertyIndex > 0) {\r\n                const property = currentValue.substring(0, propertyIndex);\r\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\r\n                const array = (previousValue as unknown as Record<string, AstNode[]>)[property];\r\n                return array?.[arrayIndex];\r\n            }\r\n            return (previousValue as unknown as Record<string, AstNode>)[currentValue];\r\n        }, node) as T;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nexport interface Disposable {\r\n    /**\r\n     * Dispose this object.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\nexport interface AsyncDisposable {\r\n    /**\r\n     * Dispose this object.\r\n     */\r\n    dispose(): Promise<void>;\r\n}\r\n\r\nexport namespace Disposable {\r\n    export function create(callback: () => Promise<void>): AsyncDisposable;\r\n    export function create(callback: () => void): Disposable;\r\n    export function create(callback: () => void | Promise<void>): Disposable | AsyncDisposable {\r\n        return {\r\n            dispose: async () => await callback()\r\n        };\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { Emitter } from '../utils/event.js';\r\nimport type {\r\n    ConfigurationItem,\r\n    DidChangeConfigurationParams,\r\n    DidChangeConfigurationRegistrationOptions,\r\n    Disposable,\r\n    Event,\r\n    InitializeParams,\r\n    InitializedParams\r\n} from 'vscode-languageserver-protocol';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport { Deferred } from '../utils/promise-utils.js';\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nexport interface ConfigurationProvider {\r\n\r\n    /**\r\n     * A promise that resolves when the configuration provider is ready to be used.\r\n     */\r\n    readonly ready: Promise<void>;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialize` request.\r\n     */\r\n    initialize(params: InitializeParams): void;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialized` notification.\r\n     */\r\n    initialized(params: ConfigurationInitializedParams): Promise<void>;\r\n\r\n    /**\r\n     * Returns a configuration value stored for the given language.\r\n     *\r\n     * @param language The language id\r\n     * @param configuration Configuration name\r\n     */\r\n    getConfiguration(language: string, configuration: string): Promise<any>;\r\n\r\n    /**\r\n     *  Updates the cached configurations using the `change` notification parameters.\r\n     *\r\n     * @param change The parameters of a change configuration notification.\r\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\r\n     */\r\n    updateConfiguration(change: DidChangeConfigurationParams): void;\r\n\r\n    /**\r\n     * Get notified after a configuration section has been updated.\r\n     */\r\n    onConfigurationSectionUpdate(callback: ConfigurationSectionUpdateListener): Disposable\r\n}\r\n\r\nexport interface ConfigurationInitializedParams extends InitializedParams {\r\n    register?: (params: DidChangeConfigurationRegistrationOptions) => void,\r\n    fetchConfiguration?: (configuration: ConfigurationItem[]) => Promise<any>\r\n}\r\n\r\nexport interface ConfigurationSectionUpdate {\r\n    /**\r\n     * The name of the configuration section that has been updated.\r\n     */\r\n    section: string;\r\n\r\n    /**\r\n     * The updated configuration section.\r\n     */\r\n    configuration: any;\r\n}\r\n\r\nexport type ConfigurationSectionUpdateListener = (update: ConfigurationSectionUpdate) => void;\r\n\r\n/**\r\n * Base configuration provider for building up other configuration providers\r\n */\r\nexport class DefaultConfigurationProvider implements ConfigurationProvider {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly _ready = new Deferred<void>();\r\n    protected settings: Record<string, Record<string, any>> = {};\r\n    protected workspaceConfig = false;\r\n    protected onConfigurationSectionUpdateEmitter = new Emitter<ConfigurationSectionUpdate>();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    get ready(): Promise<void> {\r\n        return this._ready.promise;\r\n    }\r\n\r\n    initialize(params: InitializeParams): void {\r\n        this.workspaceConfig = params.capabilities.workspace?.configuration ?? false;\r\n    }\r\n\r\n    async initialized(params: ConfigurationInitializedParams): Promise<void> {\r\n        if (this.workspaceConfig) {\r\n            if (params.register) {\r\n                // params.register(...) is a function to be provided by the calling language server for the sake of\r\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\r\n\r\n                const languages = this.serviceRegistry.all;\r\n                params.register({\r\n                    // Listen to configuration changes for all languages\r\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\r\n                });\r\n            }\r\n\r\n            if (params.fetchConfiguration) {\r\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\r\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\r\n                const configToUpdate = this.serviceRegistry.all.map(lang => <ConfigurationItem>{\r\n                    // Fetch the configuration changes for all languages\r\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\r\n                });\r\n\r\n                // get workspace configurations (default scope URI)\r\n                const configs = await params.fetchConfiguration(configToUpdate);\r\n                configToUpdate.forEach((conf, idx) => {\r\n                    this.updateSectionConfiguration(conf.section!, configs[idx]);\r\n                });\r\n            }\r\n        }\r\n        this._ready.resolve();\r\n    }\r\n\r\n    /**\r\n     *  Updates the cached configurations using the `change` notification parameters.\r\n     *\r\n     * @param change The parameters of a change configuration notification.\r\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\r\n     */\r\n    updateConfiguration(change: DidChangeConfigurationParams): void {\r\n        if (!change.settings) {\r\n            return;\r\n        }\r\n        Object.keys(change.settings).forEach(section => {\r\n            const configuration = change.settings[section];\r\n            this.updateSectionConfiguration(section, configuration);\r\n            this.onConfigurationSectionUpdateEmitter.fire({ section, configuration });\r\n        });\r\n    }\r\n\r\n    protected updateSectionConfiguration(section: string, configuration: any): void {\r\n        this.settings[section] = configuration;\r\n    }\r\n\r\n    /**\r\n    * Returns a configuration value stored for the given language.\r\n    *\r\n    * @param language The language id\r\n    * @param configuration Configuration name\r\n    */\r\n    async getConfiguration(language: string, configuration: string): Promise<any> {\r\n        await this.ready;\r\n\r\n        const sectionName = this.toSectionName(language);\r\n        if (this.settings[sectionName]) {\r\n            return this.settings[sectionName][configuration];\r\n        }\r\n    }\r\n\r\n    protected toSectionName(languageId: string): string {\r\n        return `${languageId}`;\r\n    }\r\n\r\n    get onConfigurationSectionUpdate(): Event<ConfigurationSectionUpdate> {\r\n        return this.onConfigurationSectionUpdateEmitter.event;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { Disposable } from '../utils/disposable.js';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { MaybePromise } from '../utils/promise-utils.js';\r\nimport type { Deferred } from '../utils/promise-utils.js';\r\nimport type { ValidationOptions } from '../validation/document-validator.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { LangiumDocument, LangiumDocuments, LangiumDocumentFactory, TextDocumentProvider } from './documents.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport { OperationCancelled, interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { ValidationCategory } from '../validation/validation-registry.js';\r\nimport { DocumentState } from './documents.js';\r\n\r\nexport interface BuildOptions {\r\n    /**\r\n     * Control the validation phase with this option:\r\n     *  - `true` enables all validation checks and forces revalidating the documents\r\n     *  - `false` or `undefined` disables all validation checks\r\n     *  - An object runs only the necessary validation checks; the `categories` property restricts this to a specific subset\r\n     */\r\n    validation?: boolean | ValidationOptions\r\n}\r\n\r\nexport interface DocumentBuildState {\r\n    /** Whether a document has completed its last build process. */\r\n    completed: boolean\r\n    /** The options used for the last build process. */\r\n    options: BuildOptions\r\n    /** Additional information about the last build result. */\r\n    result?: {\r\n        validationChecks?: ValidationCategory[]\r\n    }\r\n}\r\n\r\n/**\r\n * Shared-service for building and updating `LangiumDocument`s.\r\n */\r\nexport interface DocumentBuilder {\r\n\r\n    /** The options used for rebuilding documents after an update. */\r\n    updateBuildOptions: BuildOptions;\r\n\r\n    /**\r\n     * Execute all necessary build steps for the given documents.\r\n     *\r\n     * @param documents Set of documents to be built.\r\n     * @param options Options for the document builder.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options?: BuildOptions, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * This method is called when a document change is detected. It updates the state of all\r\n     * affected documents, including those with references to the changed ones, so they are rebuilt.\r\n     *\r\n     * @param changed URIs of changed or created documents\r\n     * @param deleted URIs of deleted documents\r\n     * @param cancelToken allows to cancel the current operation\r\n     * @throws `OperationCancelled` if cancellation is detected during execution\r\n     */\r\n    update(changed: URI[], deleted: URI[], cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Notify the given callback when a document update was triggered, but before any document\r\n     * is rebuilt. Listeners to this event should not perform any long-running task.\r\n     */\r\n    onUpdate(callback: DocumentUpdateListener): Disposable;\r\n\r\n    /**\r\n     * Notify the given callback when a set of documents has been built reaching the specified target state.\r\n     */\r\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable;\r\n\r\n    /**\r\n     * Notify the specified callback when a document has been built reaching the specified target state.\r\n     * Unlike {@link onBuildPhase} the listener is called for every single document.\r\n     *\r\n     * There are two main advantages compared to {@link onBuildPhase}:\r\n     * 1. If the build is cancelled, {@link onDocumentPhase} will still fire for documents that have reached a specific state.\r\n     *    Meanwhile, {@link onBuildPhase} won't fire for that state.\r\n     * 2. The {@link DocumentBuilder} ensures that all {@link DocumentPhaseListener} instances are called for a built document.\r\n     *    Even if the build is cancelled before those listeners were called.\r\n     */\r\n    onDocumentPhase(targetState: DocumentState, callback: DocumentPhaseListener): Disposable;\r\n\r\n    /**\r\n     * Wait until the workspace has reached the specified state for all documents.\r\n     *\r\n     * @param state The desired state. The promise won't resolve until all documents have reached this state\r\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process\r\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\r\n     */\r\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Wait until the document specified by the {@link uri} has reached the specified state.\r\n     *\r\n     * @param state The desired state. The promise won't resolve until the document has reached this state.\r\n     * @param uri The specified URI that points to the document. If the URI does not exist, the promise will resolve once the workspace has reached the specified state.\r\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process.\r\n     * @return The URI of the document that has reached the desired state, or `undefined` if the document does not exist.\r\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\r\n     */\r\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\r\n}\r\n\r\nexport type DocumentUpdateListener = (changed: URI[], deleted: URI[]) => void | Promise<void>\r\nexport type DocumentBuildListener = (built: LangiumDocument[], cancelToken: CancellationToken) => void | Promise<void>\r\nexport type DocumentPhaseListener = (built: LangiumDocument, cancelToken: CancellationToken) => void | Promise<void>\r\nexport class DefaultDocumentBuilder implements DocumentBuilder {\r\n\r\n    updateBuildOptions: BuildOptions = {\r\n        // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\r\n        validation: {\r\n            categories: ['built-in', 'fast']\r\n        }\r\n    };\r\n\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\r\n    protected readonly textDocuments: TextDocumentProvider | undefined;\r\n    protected readonly indexManager: IndexManager;\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly updateListeners: DocumentUpdateListener[] = [];\r\n    protected readonly buildPhaseListeners = new MultiMap<DocumentState, DocumentBuildListener>();\r\n    protected readonly documentPhaseListeners = new MultiMap<DocumentState, DocumentPhaseListener>();\r\n    protected readonly buildState = new Map<string, DocumentBuildState>();\r\n    protected readonly documentBuildWaiters = new Map<string, Deferred<void>>();\r\n    protected currentState = DocumentState.Changed;\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.langiumDocuments = services.workspace.LangiumDocuments;\r\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\r\n        this.textDocuments = services.workspace.TextDocuments;\r\n        this.indexManager = services.workspace.IndexManager;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    async build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options: BuildOptions = {}, cancelToken = CancellationToken.None): Promise<void> {\r\n        for (const document of documents) {\r\n            const key = document.uri.toString();\r\n            if (document.state === DocumentState.Validated) {\r\n                if (typeof options.validation === 'boolean' && options.validation) {\r\n                    // Force re-running all validation checks\r\n                    document.state = DocumentState.IndexedReferences;\r\n                    document.diagnostics = undefined;\r\n                    this.buildState.delete(key);\r\n                } else if (typeof options.validation === 'object') {\r\n                    const buildState = this.buildState.get(key);\r\n                    const previousCategories = buildState?.result?.validationChecks;\r\n                    if (previousCategories) {\r\n                        // Validation with explicit options was requested for a document that has already been partly validated.\r\n                        // In this case, we need to merge the previous validation categories with the new ones.\r\n                        const newCategories = options.validation.categories ?? ValidationCategory.all as ValidationCategory[];\r\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\r\n                        if (categories.length > 0) {\r\n                            this.buildState.set(key, {\r\n                                completed: false,\r\n                                options: {\r\n                                    validation: {\r\n                                        ...options.validation,\r\n                                        categories\r\n                                    }\r\n                                },\r\n                                result: buildState.result\r\n                            });\r\n                            document.state = DocumentState.IndexedReferences;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Default: forget any previous build options\r\n                this.buildState.delete(key);\r\n            }\r\n        }\r\n        this.currentState = DocumentState.Changed;\r\n        await this.emitUpdate(documents.map(e => e.uri), []);\r\n        await this.buildDocuments(documents, options, cancelToken);\r\n    }\r\n\r\n    async update(changed: URI[], deleted: URI[], cancelToken = CancellationToken.None): Promise<void> {\r\n        this.currentState = DocumentState.Changed;\r\n        // Remove all metadata of documents that are reported as deleted\r\n        for (const deletedUri of deleted) {\r\n            this.langiumDocuments.deleteDocument(deletedUri);\r\n            this.buildState.delete(deletedUri.toString());\r\n            this.indexManager.remove(deletedUri);\r\n        }\r\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\r\n        for (const changedUri of changed) {\r\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\r\n            if (!invalidated) {\r\n                // We create an unparsed, invalid document.\r\n                // This will be parsed as soon as we reach the first document builder phase.\r\n                // This allows to cancel the parsing process later in case we need it.\r\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\r\n                newDocument.state = DocumentState.Changed;\r\n                this.langiumDocuments.addDocument(newDocument);\r\n            }\r\n            this.buildState.delete(changedUri.toString());\r\n        }\r\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\r\n        const allChangedUris = stream(changed).concat(deleted).map(uri => uri.toString()).toSet();\r\n        this.langiumDocuments.all\r\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\r\n            .forEach(doc => {\r\n                const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\r\n                linker.unlink(doc);\r\n                doc.state = Math.min(doc.state, DocumentState.ComputedScopes);\r\n                doc.diagnostics = undefined;\r\n            });\r\n        // Notify listeners of the update\r\n        await this.emitUpdate(changed, deleted);\r\n        // Only allow interrupting the execution after all state changes are done\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        // Collect and sort all documents that we should rebuild\r\n        const rebuildDocuments = this.sortDocuments(\r\n            this.langiumDocuments.all\r\n                .filter(doc =>\r\n                    // This includes those that were reported as changed and those that we selected for relinking\r\n                    doc.state < DocumentState.Linked\r\n                    // This includes those for which a previous build has been cancelled\r\n                    || !this.buildState.get(doc.uri.toString())?.completed\r\n                )\r\n                .toArray()\r\n        );\r\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\r\n    }\r\n\r\n    protected async emitUpdate(changed: URI[], deleted: URI[]): Promise<void> {\r\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\r\n    }\r\n\r\n    /**\r\n     * Sort the given documents by priority. By default, documents with an open text document are prioritized.\r\n     * This is useful to ensure that visible documents show their diagnostics before all other documents.\r\n     *\r\n     * This improves the responsiveness in large workspaces as users usually don't care about diagnostics\r\n     * in files that are currently not opened in the editor.\r\n     */\r\n    protected sortDocuments(documents: LangiumDocument[]): LangiumDocument[] {\r\n        let left = 0;\r\n        let right = documents.length - 1;\r\n\r\n        while (left < right) {\r\n            while (left < documents.length && this.hasTextDocument(documents[left])) {\r\n                left++;\r\n            }\r\n\r\n            while (right >= 0 && !this.hasTextDocument(documents[right])) {\r\n                right--;\r\n            }\r\n\r\n            if (left < right) {\r\n                [documents[left], documents[right]] = [documents[right], documents[left]];\r\n            }\r\n        }\r\n\r\n        return documents;\r\n    }\r\n\r\n    private hasTextDocument(doc: LangiumDocument): boolean {\r\n        return Boolean(this.textDocuments?.get(doc.uri));\r\n    }\r\n\r\n    /**\r\n     * Check whether the given document should be relinked after changes were found in the given URIs.\r\n     */\r\n    protected shouldRelink(document: LangiumDocument, changedUris: Set<string>): boolean {\r\n        // Relink documents with linking errors -- maybe those references can be resolved now\r\n        if (document.references.some(ref => ref.error !== undefined)) {\r\n            return true;\r\n        }\r\n        // Check whether the document is affected by any of the changed URIs\r\n        return this.indexManager.isAffected(document, changedUris);\r\n    }\r\n\r\n    onUpdate(callback: DocumentUpdateListener): Disposable {\r\n        this.updateListeners.push(callback);\r\n        return Disposable.create(() => {\r\n            const index = this.updateListeners.indexOf(callback);\r\n            if (index >= 0) {\r\n                this.updateListeners.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Build the given documents by stepping through all build phases. If a document's state indicates\r\n     * that a certain build phase is already done, the phase is skipped for that document.\r\n     *\r\n     * @param documents The documents to build.\r\n     * @param options the {@link BuildOptions} to use.\r\n     * @param cancelToken A cancellation token that can be used to cancel the build.\r\n     * @returns A promise that resolves when the build is done.\r\n     */\r\n    protected async buildDocuments(documents: LangiumDocument[], options: BuildOptions, cancelToken: CancellationToken): Promise<void> {\r\n        this.prepareBuild(documents, options);\r\n        // 0. Parse content\r\n        await this.runCancelable(documents, DocumentState.Parsed, cancelToken, doc =>\r\n            this.langiumDocumentFactory.update(doc, cancelToken)\r\n        );\r\n        // 1. Index content\r\n        await this.runCancelable(documents, DocumentState.IndexedContent, cancelToken, doc =>\r\n            this.indexManager.updateContent(doc, cancelToken)\r\n        );\r\n        // 2. Compute scopes\r\n        await this.runCancelable(documents, DocumentState.ComputedScopes, cancelToken, async doc => {\r\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\r\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\r\n        });\r\n        // 3. Linking\r\n        await this.runCancelable(documents, DocumentState.Linked, cancelToken, doc => {\r\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\r\n            return linker.link(doc, cancelToken);\r\n        });\r\n        // 4. Index references\r\n        await this.runCancelable(documents, DocumentState.IndexedReferences, cancelToken, doc =>\r\n            this.indexManager.updateReferences(doc, cancelToken)\r\n        );\r\n        // 5. Validation\r\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\r\n        await this.runCancelable(toBeValidated, DocumentState.Validated, cancelToken, doc =>\r\n            this.validate(doc, cancelToken)\r\n        );\r\n\r\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\r\n        for (const doc of documents) {\r\n            const state = this.buildState.get(doc.uri.toString());\r\n            if (state) {\r\n                state.completed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs prior to beginning the build process to update the {@link DocumentBuildState} for each document\r\n     *\r\n     * @param documents collection of documents to be built\r\n     * @param options the {@link BuildOptions} to use\r\n     */\r\n    protected prepareBuild(documents: LangiumDocument[], options: BuildOptions): void {\r\n        for (const doc of documents) {\r\n            const key = doc.uri.toString();\r\n            const state = this.buildState.get(key);\r\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\r\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\r\n            // and continue where it was cancelled.\r\n            if (!state || state.completed) {\r\n                this.buildState.set(key, {\r\n                    completed: false,\r\n                    options,\r\n                    result: state?.result\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs a cancelable operation on a set of documents to bring them to a specified {@link DocumentState}.\r\n     *\r\n     * @param documents The array of documents to process.\r\n     * @param targetState The target {@link DocumentState} to bring the documents to.\r\n     * @param cancelToken A token that can be used to cancel the operation.\r\n     * @param callback A function to be called for each document.\r\n     * @returns A promise that resolves when all documents have been processed or the operation is canceled.\r\n     * @throws Will throw `OperationCancelled` if the operation is canceled via a `CancellationToken`.\r\n     */\r\n    protected async runCancelable(documents: LangiumDocument[], targetState: DocumentState, cancelToken: CancellationToken,\r\n        callback: (document: LangiumDocument) => MaybePromise<unknown>): Promise<void> {\r\n        const filtered = documents.filter(doc => doc.state < targetState);\r\n        for (const document of filtered) {\r\n            await interruptAndCheck(cancelToken);\r\n            await callback(document);\r\n            document.state = targetState;\r\n            await this.notifyDocumentPhase(document, targetState, cancelToken);\r\n        }\r\n\r\n        // Do not use `filtered` here, as that will miss documents that have previously reached the current target state\r\n        // For example, this happens in case the cancellation triggers between the processing of two documents\r\n        // Or files that were picked up during the workspace initialization\r\n        const targetStateDocs = documents.filter(doc => doc.state === targetState);\r\n        await this.notifyBuildPhase(targetStateDocs, targetState, cancelToken);\r\n        this.currentState = targetState;\r\n    }\r\n\r\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable {\r\n        this.buildPhaseListeners.add(targetState, callback);\r\n        return Disposable.create(() => {\r\n            this.buildPhaseListeners.delete(targetState, callback);\r\n        });\r\n    }\r\n\r\n    onDocumentPhase(targetState: DocumentState, callback: DocumentPhaseListener): Disposable {\r\n        this.documentPhaseListeners.add(targetState, callback);\r\n        return Disposable.create(() => {\r\n            this.documentPhaseListeners.delete(targetState, callback);\r\n        });\r\n    }\r\n\r\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\r\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\r\n    waitUntil(state: DocumentState, uriOrToken?: URI | CancellationToken, cancelToken?: CancellationToken): Promise<URI | undefined | void> {\r\n        let uri: URI | undefined = undefined;\r\n        if (uriOrToken && 'path' in uriOrToken) {\r\n            uri = uriOrToken;\r\n        } else {\r\n            cancelToken = uriOrToken;\r\n        }\r\n        cancelToken ??= CancellationToken.None;\r\n        if (uri) {\r\n            const document = this.langiumDocuments.getDocument(uri);\r\n            if (document && document.state > state) {\r\n                return Promise.resolve(uri);\r\n            }\r\n        }\r\n        if (this.currentState >= state) {\r\n            return Promise.resolve(undefined);\r\n        } else if (cancelToken.isCancellationRequested) {\r\n            return Promise.reject(OperationCancelled);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const buildDisposable = this.onBuildPhase(state, () => {\r\n                buildDisposable.dispose();\r\n                cancelDisposable.dispose();\r\n                if (uri) {\r\n                    const document = this.langiumDocuments.getDocument(uri);\r\n                    resolve(document?.uri);\r\n                } else {\r\n                    resolve(undefined);\r\n                }\r\n            });\r\n            const cancelDisposable = cancelToken!.onCancellationRequested(() => {\r\n                buildDisposable.dispose();\r\n                cancelDisposable.dispose();\r\n                reject(OperationCancelled);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected async notifyDocumentPhase(document: LangiumDocument, state: DocumentState, cancelToken: CancellationToken): Promise<void> {\r\n        const listeners = this.documentPhaseListeners.get(state);\r\n        const listenersCopy = listeners.slice();\r\n        for (const listener of listenersCopy) {\r\n            try {\r\n                await listener(document, cancelToken);\r\n            } catch (err) {\r\n                // Ignore cancellation errors\r\n                // We want to finish the listeners before throwing\r\n                if (!isOperationCancelled(err)) {\r\n                    throw err;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async notifyBuildPhase(documents: LangiumDocument[], state: DocumentState, cancelToken: CancellationToken): Promise<void> {\r\n        if (documents.length === 0) {\r\n            // Don't notify when no document has been processed\r\n            return;\r\n        }\r\n        const listeners = this.buildPhaseListeners.get(state);\r\n        const listenersCopy = listeners.slice();\r\n        for (const listener of listenersCopy) {\r\n            await interruptAndCheck(cancelToken);\r\n            await listener(documents, cancelToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine whether the given document should be validated during a build. The default\r\n     * implementation checks the `validation` property of the build options. If it's set to `true`\r\n     * or a `ValidationOptions` object, the document is included in the validation phase.\r\n     */\r\n    protected shouldValidate(document: LangiumDocument): boolean {\r\n        return Boolean(this.getBuildOptions(document).validation);\r\n    }\r\n\r\n    /**\r\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\r\n     * If the document already contains diagnostics, the new ones are added to the list.\r\n     */\r\n    protected async validate(document: LangiumDocument, cancelToken: CancellationToken): Promise<void> {\r\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\r\n        const validationSetting = this.getBuildOptions(document).validation;\r\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\r\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\r\n        if (document.diagnostics) {\r\n            document.diagnostics.push(...diagnostics);\r\n        } else {\r\n            document.diagnostics = diagnostics;\r\n        }\r\n\r\n        // Store information about the executed validation in the build state\r\n        const state = this.buildState.get(document.uri.toString());\r\n        if (state) {\r\n            state.result ??= {};\r\n            const newCategories = options?.categories ?? ValidationCategory.all;\r\n            if (state.result.validationChecks) {\r\n                state.result.validationChecks.push(...newCategories);\r\n            } else {\r\n                state.result.validationChecks = [...newCategories];\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getBuildOptions(document: LangiumDocument): BuildOptions {\r\n        return this.buildState.get(document.uri.toString())?.options ?? {};\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { ContextCache } from '../utils/caching.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\nimport type { ReferenceDescription } from './ast-descriptions.js';\r\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\r\n\r\n/**\r\n * The index manager is responsible for keeping metadata about symbols and cross-references\r\n * in the workspace. It is used to look up symbols in the global scope, mostly during linking\r\n * and completion. This service is shared between all languages of a language server.\r\n */\r\nexport interface IndexManager {\r\n\r\n    /**\r\n     * Removes the specified document URI from the index.\r\n     * Necessary when documents are deleted and not referenceable anymore.\r\n     *\r\n     * @param uri The URI of the document for which index data shall be removed\r\n     */\r\n    remove(uri: URI): void;\r\n\r\n    /**\r\n     * Updates the information about the exportable content of a document inside the index.\r\n     *\r\n     * @param document Document to be updated\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    updateContent(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Updates the information about the cross-references of a document inside the index.\r\n     *\r\n     * @param document Document to be updated\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    updateReferences(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Determine whether the given document could be affected by changes of the documents\r\n     * identified by the given URIs (second parameter). The document is typically regarded as\r\n     * affected if it contains a reference to any of the changed files.\r\n     *\r\n     * @param document Document to check whether it's affected\r\n     * @param changedUris URIs of the changed documents\r\n     */\r\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean;\r\n\r\n    /**\r\n     * Compute a list of all exported elements, optionally filtered using a type identifier and document URIs.\r\n     *\r\n     * @param nodeType The type to filter with, or `undefined` to return descriptions of all types.\r\n     * @param uris If specified, only returns elements from the given URIs.\r\n     * @returns a `Stream` containing all globally visible nodes (of a given type).\r\n     */\r\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription>;\r\n\r\n    /**\r\n     * Returns all known references that are pointing to the given `targetNode`.\r\n     *\r\n     * @param targetNode the `AstNode` to look up references for\r\n     * @param astNodePath the path that points to the `targetNode` inside the document. See also `AstNodeLocator`\r\n     *\r\n     * @returns a `Stream` of references that are targeting the `targetNode`\r\n     */\r\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription>;\r\n\r\n}\r\n\r\nexport class DefaultIndexManager implements IndexManager {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly documents: LangiumDocuments;\r\n    protected readonly astReflection: AstReflection;\r\n\r\n    /**\r\n     * The symbol index stores all `AstNodeDescription` items exported by a document.\r\n     * The key used in this map is the string representation of the specific document URI.\r\n     */\r\n    protected readonly symbolIndex = new Map<string, AstNodeDescription[]>();\r\n    /**\r\n     * This is a cache for the `allElements()` method.\r\n     * It caches the descriptions from `symbolIndex` grouped by types.\r\n     */\r\n    protected readonly symbolByTypeIndex = new ContextCache<string, string, AstNodeDescription[]>();\r\n    /**\r\n     * This index keeps track of all `ReferenceDescription` items exported by a document.\r\n     * This is used to compute which elements are affected by a document change\r\n     * and for finding references to an AST node.\r\n     */\r\n    protected readonly referenceIndex = new Map<string, ReferenceDescription[]>();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.documents = services.workspace.LangiumDocuments;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.astReflection = services.AstReflection;\r\n    }\r\n\r\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription> {\r\n        const targetDocUri = getDocument(targetNode).uri;\r\n        const result: ReferenceDescription[] = [];\r\n        this.referenceIndex.forEach(docRefs => {\r\n            docRefs.forEach(refDescr => {\r\n                if (UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\r\n                    result.push(refDescr);\r\n                }\r\n            });\r\n        });\r\n        return stream(result);\r\n    }\r\n\r\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription> {\r\n        let documentUris = stream(this.symbolIndex.keys());\r\n        if (uris) {\r\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\r\n        }\r\n        return documentUris\r\n            .map(uri => this.getFileDescriptions(uri, nodeType))\r\n            .flat();\r\n    }\r\n\r\n    protected getFileDescriptions(uri: string, nodeType?: string): AstNodeDescription[] {\r\n        if (!nodeType) {\r\n            return this.symbolIndex.get(uri) ?? [];\r\n        }\r\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\r\n            const allFileDescriptions = this.symbolIndex.get(uri) ?? [];\r\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\r\n        });\r\n        return descriptions;\r\n    }\r\n\r\n    remove(uri: URI): void {\r\n        const uriString = uri.toString();\r\n        this.symbolIndex.delete(uriString);\r\n        this.symbolByTypeIndex.clear(uriString);\r\n        this.referenceIndex.delete(uriString);\r\n    }\r\n\r\n    async updateContent(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        const services = this.serviceRegistry.getServices(document.uri);\r\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\r\n        const uri = document.uri.toString();\r\n        this.symbolIndex.set(uri, exports);\r\n        this.symbolByTypeIndex.clear(uri);\r\n    }\r\n\r\n    async updateReferences(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        const services = this.serviceRegistry.getServices(document.uri);\r\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\r\n        this.referenceIndex.set(document.uri.toString(), indexData);\r\n    }\r\n\r\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean {\r\n        const references = this.referenceIndex.get(document.uri.toString());\r\n        if (!references) {\r\n            return false;\r\n        }\r\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { InitializeParams, InitializedParams } from 'vscode-languageserver-protocol';\r\nimport type { WorkspaceFolder } from 'vscode-languageserver-types';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { Deferred, interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { URI, UriUtils } from '../utils/uri-utils.js';\r\nimport type { BuildOptions, DocumentBuilder } from './document-builder.js';\r\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\r\nimport type { FileSystemNode, FileSystemProvider } from './file-system-provider.js';\r\nimport type { WorkspaceLock } from './workspace-lock.js';\r\n\r\n// export type WorkspaceFolder from 'vscode-languageserver-types' for convenience,\r\n//  is supposed to avoid confusion as 'WorkspaceFolder' might accidentally be imported via 'vscode-languageclient'\r\nexport type { WorkspaceFolder };\r\n\r\n/**\r\n * The workspace manager is responsible for finding source files in the workspace.\r\n * This service is shared between all languages of a language server.\r\n */\r\nexport interface WorkspaceManager {\r\n\r\n    /** The options used for the initial workspace build. */\r\n    initialBuildOptions: BuildOptions | undefined;\r\n\r\n    /**\r\n     * A promise that resolves when the workspace manager is ready to be used.\r\n     * Use this to ensure that the workspace manager has finished its initialization.\r\n     */\r\n    readonly ready: Promise<void>;\r\n\r\n    /**\r\n     * The workspace folders of the current workspace.\r\n     * Available only after the `ready` promise resolves.\r\n     */\r\n    get workspaceFolders(): readonly WorkspaceFolder[] | undefined;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialize` request.\r\n     */\r\n    initialize(params: InitializeParams): void;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialized` notification.\r\n     */\r\n    initialized(params: InitializedParams): Promise<void>;\r\n\r\n    /**\r\n     * Does the initial indexing of workspace folders.\r\n     * Collects information about exported and referenced AstNodes in\r\n     * each language file and stores it locally.\r\n     *\r\n     * @param folders The set of workspace folders to be indexed.\r\n     * @param cancelToken A cancellation token that can be used to cancel the operation.\r\n     *\r\n     * @throws OperationCancelled if a cancellation event has been detected\r\n     */\r\n    initializeWorkspace(folders: WorkspaceFolder[], cancelToken?: CancellationToken): Promise<void>;\r\n\r\n}\r\n\r\nexport class DefaultWorkspaceManager implements WorkspaceManager {\r\n\r\n    initialBuildOptions: BuildOptions = {};\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly documentBuilder: DocumentBuilder;\r\n    protected readonly fileSystemProvider: FileSystemProvider;\r\n    protected readonly mutex: WorkspaceLock;\r\n    protected readonly _ready = new Deferred<void>();\r\n    protected folders?: WorkspaceFolder[];\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.langiumDocuments = services.workspace.LangiumDocuments;\r\n        this.documentBuilder = services.workspace.DocumentBuilder;\r\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\r\n        this.mutex = services.workspace.WorkspaceLock;\r\n    }\r\n\r\n    get ready(): Promise<void> {\r\n        return this._ready.promise;\r\n    }\r\n\r\n    get workspaceFolders(): readonly WorkspaceFolder[] | undefined {\r\n        return this.folders;\r\n    }\r\n\r\n    initialize(params: InitializeParams): void {\r\n        this.folders = params.workspaceFolders ?? undefined;\r\n    }\r\n\r\n    initialized(_params: InitializedParams): Promise<void> {\r\n        // Initialize the workspace even if there are no workspace folders\r\n        // We still want to load additional documents (language library or similar) during initialization\r\n        return this.mutex.write(token => this.initializeWorkspace(this.folders ?? [], token));\r\n    }\r\n\r\n    async initializeWorkspace(folders: WorkspaceFolder[], cancelToken = CancellationToken.None): Promise<void> {\r\n        const documents = await this.performStartup(folders);\r\n        // Only after creating all documents do we check whether we need to cancel the initialization\r\n        // The document builder will later pick up on all unprocessed documents\r\n        await interruptAndCheck(cancelToken);\r\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\r\n    }\r\n\r\n    /**\r\n     * Performs the uninterruptable startup sequence of the workspace manager.\r\n     * This methods loads all documents in the workspace and other documents and returns them.\r\n     */\r\n    protected async performStartup(folders: WorkspaceFolder[]): Promise<LangiumDocument[]> {\r\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\r\n        const documents: LangiumDocument[] = [];\r\n        const collector = (document: LangiumDocument) => {\r\n            documents.push(document);\r\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\r\n                this.langiumDocuments.addDocument(document);\r\n            }\r\n        };\r\n        // Even though we don't await the initialization of the workspace manager,\r\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\r\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\r\n        await this.loadAdditionalDocuments(folders, collector);\r\n        await Promise.all(\r\n            folders.map(wf => [wf, this.getRootFolder(wf)] as [WorkspaceFolder, URI])\r\n                .map(async entry => this.traverseFolder(...entry, fileExtensions, collector))\r\n        );\r\n        this._ready.resolve();\r\n        return documents;\r\n    }\r\n\r\n    /**\r\n     * Load all additional documents that shall be visible in the context of the given workspace\r\n     * folders and add them to the collector. This can be used to include built-in libraries of\r\n     * your language, which can be either loaded from provided files or constructed in memory.\r\n     */\r\n    protected loadAdditionalDocuments(_folders: WorkspaceFolder[], _collector: (document: LangiumDocument) => void): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Determine the root folder of the source documents in the given workspace folder.\r\n     * The default implementation returns the URI of the workspace folder, but you can override\r\n     * this to return a subfolder like `src` instead.\r\n     */\r\n    protected getRootFolder(workspaceFolder: WorkspaceFolder): URI {\r\n        return URI.parse(workspaceFolder.uri);\r\n    }\r\n\r\n    /**\r\n     * Traverse the file system folder identified by the given URI and its subfolders. All\r\n     * contained files that match the file extensions are added to the collector.\r\n     */\r\n    protected async traverseFolder(workspaceFolder: WorkspaceFolder, folderPath: URI, fileExtensions: string[], collector: (document: LangiumDocument) => void): Promise<void> {\r\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\r\n        await Promise.all(content.map(async entry => {\r\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\r\n                if (entry.isDirectory) {\r\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\r\n                } else if (entry.isFile) {\r\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\r\n                    collector(document);\r\n                }\r\n            }\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Determine whether the given folder entry shall be included while indexing the workspace.\r\n     */\r\n    protected includeEntry(_workspaceFolder: WorkspaceFolder, entry: FileSystemNode, fileExtensions: string[]): boolean {\r\n        const name = UriUtils.basename(entry.uri);\r\n        if (name.startsWith('.')) {\r\n            return false;\r\n        }\r\n        if (entry.isDirectory) {\r\n            return name !== 'node_modules' && name !== 'out';\r\n        } else if (entry.isFile) {\r\n            const extname = UriUtils.extname(entry.uri);\r\n            return fileExtensions.includes(extname);\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { ILexerErrorMessageProvider, ILexingError, IMultiModeLexerDefinition, IToken, TokenType, TokenTypeDictionary, TokenVocabulary } from 'chevrotain';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { Lexer as ChevrotainLexer, defaultLexerErrorProvider } from 'chevrotain';\r\nimport type { LexingReport, TokenBuilder } from './token-builder.js';\r\n\r\nexport class DefaultLexerErrorMessageProvider implements ILexerErrorMessageProvider {\r\n\r\n    buildUnexpectedCharactersMessage(fullText: string, startOffset: number, length: number, line?: number, column?: number): string {\r\n        return defaultLexerErrorProvider.buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column);\r\n    }\r\n\r\n    buildUnableToPopLexerModeMessage(token: IToken): string {\r\n        return defaultLexerErrorProvider.buildUnableToPopLexerModeMessage(token);\r\n    }\r\n}\r\n\r\nexport interface LexerResult {\r\n    /**\r\n     * A list of all tokens that were lexed from the input.\r\n     *\r\n     * Note that Langium requires the optional properties\r\n     * `startLine`, `startColumn`, `endOffset`, `endLine` and `endColumn` to be set on each token.\r\n     */\r\n    tokens: IToken[];\r\n    /**\r\n     * Contains hidden tokens, usually comments.\r\n     */\r\n    hidden: IToken[];\r\n    errors: ILexingError[];\r\n    report?: LexingReport;\r\n}\r\n\r\nexport type TokenizeMode = 'full' | 'partial';\r\n\r\nexport interface TokenizeOptions {\r\n    mode?: TokenizeMode;\r\n}\r\n\r\nexport const DEFAULT_TOKENIZE_OPTIONS: TokenizeOptions = { mode: 'full' };\r\n\r\nexport interface Lexer {\r\n    readonly definition: TokenTypeDictionary;\r\n    tokenize(text: string, options?: TokenizeOptions): LexerResult;\r\n}\r\n\r\nexport class DefaultLexer implements Lexer {\r\n\r\n    protected readonly tokenBuilder: TokenBuilder;\r\n    protected readonly errorMessageProvider: ILexerErrorMessageProvider;\r\n    protected tokenTypes: TokenTypeDictionary;\r\n    protected chevrotainLexer: ChevrotainLexer;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.errorMessageProvider = services.parser.LexerErrorMessageProvider;\r\n        this.tokenBuilder = services.parser.TokenBuilder;\r\n        const tokens = this.tokenBuilder.buildTokens(services.Grammar, {\r\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\r\n        });\r\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\r\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\r\n        const production = services.LanguageMetaData.mode === 'production';\r\n        this.chevrotainLexer = new ChevrotainLexer(lexerTokens, {\r\n            positionTracking: 'full',\r\n            skipValidations: production,\r\n            errorMessageProvider: this.errorMessageProvider\r\n        });\r\n    }\r\n\r\n    get definition(): TokenTypeDictionary {\r\n        return this.tokenTypes;\r\n    }\r\n\r\n    tokenize(text: string, _options: TokenizeOptions = DEFAULT_TOKENIZE_OPTIONS): LexerResult {\r\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\r\n        return {\r\n            tokens: chevrotainResult.tokens,\r\n            errors: chevrotainResult.errors,\r\n            hidden: chevrotainResult.groups.hidden ?? [],\r\n            report: this.tokenBuilder.flushLexingReport?.(text)\r\n        };\r\n    }\r\n\r\n    protected toTokenTypeDictionary(buildTokens: TokenVocabulary): TokenTypeDictionary {\r\n        if (isTokenTypeDictionary(buildTokens)) return buildTokens;\r\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\r\n        const res: TokenTypeDictionary = {};\r\n        tokens.forEach(token => res[token.name] = token);\r\n        return res;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is TokenType array\r\n */\r\nexport function isTokenTypeArray(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenType[] {\r\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\r\n */\r\nexport function isIMultiModeLexerDefinition(tokenVocabulary: TokenVocabulary): tokenVocabulary is IMultiModeLexerDefinition {\r\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\r\n */\r\nexport function isTokenTypeDictionary(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenTypeDictionary {\r\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { Position, Range } from 'vscode-languageserver-types';\r\nimport type { CstNode } from '../syntax-tree.js';\r\nimport { NEWLINE_REGEXP, escapeRegExp } from '../utils/regexp-utils.js';\r\nimport { URI } from '../utils/uri-utils.js';\r\n\r\nexport interface JSDocComment extends JSDocValue {\r\n    readonly elements: JSDocElement[]\r\n    getTag(name: string): JSDocTag | undefined\r\n    getTags(name: string): JSDocTag[]\r\n}\r\n\r\nexport type JSDocElement = JSDocParagraph | JSDocTag;\r\n\r\nexport type JSDocInline = JSDocTag | JSDocLine;\r\n\r\nexport interface JSDocValue {\r\n    /**\r\n     * Represents the range that this JSDoc element occupies.\r\n     * If the JSDoc was parsed from a `CstNode`, the range will represent the location in the source document.\r\n     */\r\n    readonly range: Range\r\n    /**\r\n     * Renders this JSDoc element to a plain text representation.\r\n     */\r\n    toString(): string\r\n    /**\r\n     * Renders this JSDoc element to a markdown representation.\r\n     *\r\n     * @param options Rendering options to customize the markdown result.\r\n     */\r\n    toMarkdown(options?: JSDocRenderOptions): string\r\n}\r\n\r\nexport interface JSDocParagraph extends JSDocValue {\r\n    readonly inlines: JSDocInline[]\r\n}\r\n\r\nexport interface JSDocLine extends JSDocValue {\r\n    readonly text: string\r\n}\r\n\r\nexport interface JSDocTag extends JSDocValue {\r\n    readonly name: string\r\n    readonly content: JSDocParagraph\r\n    readonly inline: boolean\r\n}\r\n\r\nexport interface JSDocParseOptions {\r\n    /**\r\n     * The start symbol of your comment format. Defaults to `/**`.\r\n     */\r\n    readonly start?: RegExp | string\r\n    /**\r\n     * The symbol that start a line of your comment format. Defaults to `*`.\r\n     */\r\n    readonly line?: RegExp | string\r\n    /**\r\n     * The end symbol of your comment format. Defaults to `*\\/`.\r\n     */\r\n    readonly end?: RegExp | string\r\n}\r\n\r\nexport interface JSDocRenderOptions {\r\n    /**\r\n     * Determines the style for rendering tags. Defaults to `italic`.\r\n     */\r\n    tag?: 'plain' | 'italic' | 'bold' | 'bold-italic'\r\n    /**\r\n     * Determines the default for rendering `@link` tags. Defaults to `plain`.\r\n     */\r\n    link?: 'code' | 'plain'\r\n    /**\r\n     * Custom tag rendering function.\r\n     * Return a markdown formatted tag or `undefined` to fall back to the default rendering.\r\n     */\r\n    renderTag?(tag: JSDocTag): string | undefined\r\n    /**\r\n     * Custom link rendering function. Accepts a link target and a display value for the link.\r\n     * Return a markdown formatted link with the format `[$display]($link)` or `undefined` if the link is not a valid target.\r\n     */\r\n    renderLink?(link: string, display: string): string | undefined\r\n}\r\n\r\n/**\r\n * Parses a JSDoc from a `CstNode` containing a comment.\r\n *\r\n * @param node A `CstNode` from a parsed Langium document.\r\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\r\n */\r\nexport function parseJSDoc(node: CstNode, options?: JSDocParseOptions): JSDocComment;\r\n/**\r\n * Parses a JSDoc from a string comment.\r\n *\r\n * @param content A string containing the source of the JSDoc comment.\r\n * @param start The start position the comment occupies in the source document.\r\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\r\n */\r\nexport function parseJSDoc(content: string, start?: Position, options?: JSDocParseOptions): JSDocComment;\r\nexport function parseJSDoc(node: CstNode | string, start?: Position | JSDocParseOptions, options?: JSDocParseOptions): JSDocComment {\r\n    let opts: JSDocParseOptions | undefined;\r\n    let position: Position | undefined;\r\n    if (typeof node === 'string') {\r\n        position = start as Position | undefined;\r\n        opts = options as JSDocParseOptions | undefined;\r\n    } else {\r\n        position = node.range.start;\r\n        opts = start as JSDocParseOptions | undefined;\r\n    }\r\n    if (!position) {\r\n        position = Position.create(0, 0);\r\n    }\r\n\r\n    const lines = getLines(node);\r\n    const normalizedOptions = normalizeOptions(opts);\r\n\r\n    const tokens = tokenize({\r\n        lines,\r\n        position,\r\n        options: normalizedOptions\r\n    });\r\n\r\n    return parseJSDocComment({\r\n        index: 0,\r\n        tokens,\r\n        position\r\n    });\r\n}\r\n\r\nexport function isJSDoc(node: CstNode | string, options?: JSDocParseOptions): boolean {\r\n    const normalizedOptions = normalizeOptions(options);\r\n    const lines = getLines(node);\r\n    if (lines.length === 0) {\r\n        return false;\r\n    }\r\n\r\n    const first = lines[0];\r\n    const last = lines[lines.length - 1];\r\n    const firstRegex = normalizedOptions.start;\r\n    const lastRegex = normalizedOptions.end;\r\n\r\n    return Boolean(firstRegex?.exec(first)) && Boolean(lastRegex?.exec(last));\r\n}\r\n\r\nfunction getLines(node: CstNode | string): string[] {\r\n    let content = '';\r\n    if (typeof node === 'string') {\r\n        content = node;\r\n    } else {\r\n        content = node.text;\r\n    }\r\n    const lines = content.split(NEWLINE_REGEXP);\r\n    return lines;\r\n}\r\n\r\n// Tokenization\r\n\r\ninterface JSDocToken {\r\n    type: 'text' | 'tag' | 'inline-tag' | 'break'\r\n    content: string\r\n    range: Range\r\n}\r\n\r\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\r\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\r\n\r\nfunction tokenize(context: TokenizationContext): JSDocToken[] {\r\n    const tokens: JSDocToken[] = [];\r\n    let currentLine = context.position.line;\r\n    let currentCharacter = context.position.character;\r\n    for (let i = 0; i < context.lines.length; i++) {\r\n        const first = i === 0;\r\n        const last = i === context.lines.length - 1;\r\n        let line = context.lines[i];\r\n        let index = 0;\r\n\r\n        if (first && context.options.start) {\r\n            const match = context.options.start?.exec(line);\r\n            if (match) {\r\n                index = match.index + match[0].length;\r\n            }\r\n        } else {\r\n            const match = context.options.line?.exec(line);\r\n            if (match) {\r\n                index = match.index + match[0].length;\r\n            }\r\n        }\r\n        if (last) {\r\n            const match = context.options.end?.exec(line);\r\n            if (match) {\r\n                line = line.substring(0, match.index);\r\n            }\r\n        }\r\n\r\n        line = line.substring(0, lastCharacter(line));\r\n        const whitespaceEnd = skipWhitespace(line, index);\r\n\r\n        if (whitespaceEnd >= line.length) {\r\n            // Only create a break token when we already have previous tokens\r\n            if (tokens.length > 0) {\r\n                const position = Position.create(currentLine, currentCharacter);\r\n                tokens.push({\r\n                    type: 'break',\r\n                    content: '',\r\n                    range: Range.create(position, position)\r\n                });\r\n            }\r\n        } else {\r\n            tagRegex.lastIndex = index;\r\n            const tagMatch = tagRegex.exec(line);\r\n            if (tagMatch) {\r\n                const fullMatch = tagMatch[0];\r\n                const value = tagMatch[1];\r\n                const start = Position.create(currentLine, currentCharacter + index);\r\n                const end = Position.create(currentLine, currentCharacter + index + fullMatch.length);\r\n                tokens.push({\r\n                    type: 'tag',\r\n                    content: value,\r\n                    range: Range.create(start, end)\r\n                });\r\n                index += fullMatch.length;\r\n                index = skipWhitespace(line, index);\r\n            }\r\n\r\n            if (index < line.length) {\r\n                const rest = line.substring(index);\r\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\r\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\r\n            }\r\n        }\r\n\r\n        currentLine++;\r\n        currentCharacter = 0;\r\n    }\r\n\r\n    // Remove last break token if there is one\r\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\r\n        return tokens.slice(0, -1);\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nfunction buildInlineTokens(tags: RegExpMatchArray[], line: string, lineIndex: number, characterIndex: number): JSDocToken[] {\r\n    const tokens: JSDocToken[] = [];\r\n\r\n    if (tags.length === 0) {\r\n        const start = Position.create(lineIndex, characterIndex);\r\n        const end = Position.create(lineIndex, characterIndex + line.length);\r\n        tokens.push({\r\n            type: 'text',\r\n            content: line,\r\n            range: Range.create(start, end)\r\n        });\r\n    } else {\r\n        let lastIndex = 0;\r\n        for (const match of tags) {\r\n            const matchIndex = match.index!;\r\n            const startContent = line.substring(lastIndex, matchIndex);\r\n            if (startContent.length > 0) {\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: line.substring(lastIndex, matchIndex),\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + characterIndex),\r\n                        Position.create(lineIndex, matchIndex + characterIndex)\r\n                    )\r\n                });\r\n            }\r\n            let offset = startContent.length + 1;\r\n            const tagName = match[1];\r\n            tokens.push({\r\n                type: 'inline-tag',\r\n                content: tagName,\r\n                range: Range.create(\r\n                    Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                    Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex)\r\n                )\r\n            });\r\n            offset += tagName.length;\r\n            if (match.length === 4) {\r\n                offset += match[2].length;\r\n                const value = match[3];\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: value,\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                        Position.create(lineIndex, lastIndex + offset + value.length + characterIndex)\r\n                    )\r\n                });\r\n            } else {\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: '',\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex)\r\n                    )\r\n                });\r\n            }\r\n            lastIndex = matchIndex + match[0].length;\r\n        }\r\n        const endContent = line.substring(lastIndex);\r\n        if (endContent.length > 0) {\r\n            tokens.push({\r\n                type: 'text',\r\n                content: endContent,\r\n                range: Range.create(\r\n                    Position.create(lineIndex, lastIndex + characterIndex),\r\n                    Position.create(lineIndex, lastIndex + characterIndex + endContent.length)\r\n                )\r\n            });\r\n        }\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nconst nonWhitespaceRegex = /\\S/;\r\nconst whitespaceEndRegex = /\\s*$/;\r\n\r\nfunction skipWhitespace(line: string, index: number): number {\r\n    const match = line.substring(index).match(nonWhitespaceRegex);\r\n    if (match) {\r\n        return index + match.index!;\r\n    } else {\r\n        return line.length;\r\n    }\r\n}\r\n\r\nfunction lastCharacter(line: string): number | undefined {\r\n    const match = line.match(whitespaceEndRegex);\r\n    if (match && typeof match.index === 'number') {\r\n        return match.index;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n// Parsing\r\n\r\nfunction parseJSDocComment(context: ParseContext): JSDocComment {\r\n    const startPosition: Position = Position.create(context.position.line, context.position.character);\r\n    if (context.tokens.length === 0) {\r\n        return new JSDocCommentImpl([], Range.create(startPosition, startPosition));\r\n    }\r\n    const elements: JSDocElement[] = [];\r\n    while (context.index < context.tokens.length) {\r\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\r\n        if (element) {\r\n            elements.push(element);\r\n        }\r\n    }\r\n    const start = elements[0]?.range.start ?? startPosition;\r\n    const end = elements[elements.length - 1]?.range.end ?? startPosition;\r\n    return new JSDocCommentImpl(elements, Range.create(start, end));\r\n}\r\n\r\nfunction parseJSDocElement(context: ParseContext, last?: JSDocElement): JSDocElement | undefined {\r\n    const next = context.tokens[context.index];\r\n    if (next.type === 'tag') {\r\n        return parseJSDocTag(context, false);\r\n    } else if (next.type === 'text' || next.type === 'inline-tag') {\r\n        return parseJSDocText(context);\r\n    } else {\r\n        appendEmptyLine(next, last);\r\n        context.index++;\r\n        return undefined;\r\n    }\r\n}\r\n\r\nfunction appendEmptyLine(token: JSDocToken, element?: JSDocElement): void {\r\n    if (element) {\r\n        const line = new JSDocLineImpl('', token.range);\r\n        if ('inlines' in element) {\r\n            element.inlines.push(line);\r\n        } else {\r\n            element.content.inlines.push(line);\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseJSDocText(context: ParseContext): JSDocParagraph {\r\n    let token = context.tokens[context.index];\r\n    const firstToken = token;\r\n    let lastToken = token;\r\n    const lines: JSDocInline[] = [];\r\n    while (token && token.type !== 'break' && token.type !== 'tag') {\r\n        lines.push(parseJSDocInline(context));\r\n        lastToken = token;\r\n        token = context.tokens[context.index];\r\n    }\r\n    return new JSDocTextImpl(lines, Range.create(firstToken.range.start, lastToken.range.end));\r\n}\r\n\r\nfunction parseJSDocInline(context: ParseContext): JSDocInline {\r\n    const token = context.tokens[context.index];\r\n    if (token.type === 'inline-tag') {\r\n        return parseJSDocTag(context, true);\r\n    } else {\r\n        return parseJSDocLine(context);\r\n    }\r\n}\r\n\r\nfunction parseJSDocTag(context: ParseContext, inline: boolean): JSDocTag {\r\n    const tagToken = context.tokens[context.index++];\r\n    const name = tagToken.content.substring(1);\r\n    const nextToken = context.tokens[context.index];\r\n    if (nextToken?.type === 'text') {\r\n        if (inline) {\r\n            const docLine = parseJSDocLine(context);\r\n            return new JSDocTagImpl(\r\n                name,\r\n                new JSDocTextImpl([docLine], docLine.range),\r\n                inline,\r\n                Range.create(tagToken.range.start, docLine.range.end)\r\n            );\r\n        } else {\r\n            const textDoc = parseJSDocText(context);\r\n            return new JSDocTagImpl(\r\n                name,\r\n                textDoc,\r\n                inline,\r\n                Range.create(tagToken.range.start, textDoc.range.end)\r\n            );\r\n        }\r\n    } else {\r\n        const range = tagToken.range;\r\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\r\n    }\r\n}\r\n\r\nfunction parseJSDocLine(context: ParseContext): JSDocLine {\r\n    const token = context.tokens[context.index++];\r\n    return new JSDocLineImpl(token.content, token.range);\r\n}\r\n\r\ninterface NormalizedOptions {\r\n    start?: RegExp\r\n    end?: RegExp\r\n    line?: RegExp\r\n}\r\n\r\ninterface TokenizationContext {\r\n    position: Position\r\n    lines: string[]\r\n    options: NormalizedOptions\r\n}\r\n\r\ninterface ParseContext {\r\n    position: Position\r\n    tokens: JSDocToken[]\r\n    index: number\r\n}\r\n\r\nfunction normalizeOptions(options?: JSDocParseOptions): NormalizedOptions {\r\n    if (!options) {\r\n        return normalizeOptions({\r\n            start: '/**',\r\n            end: '*/',\r\n            line: '*'\r\n        });\r\n    }\r\n    const { start, end, line } = options;\r\n    return {\r\n        start: normalizeOption(start, true),\r\n        end: normalizeOption(end, false),\r\n        line: normalizeOption(line, true)\r\n    };\r\n}\r\n\r\nfunction normalizeOption(option: RegExp | string | undefined, start: boolean): RegExp | undefined {\r\n    if (typeof option === 'string' || typeof option === 'object') {\r\n        const escaped = typeof option === 'string' ? escapeRegExp(option) : option.source;\r\n        if (start) {\r\n            return new RegExp(`^\\\\s*${escaped}`);\r\n        } else {\r\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\r\n        }\r\n    } else {\r\n        return option;\r\n    }\r\n}\r\n\r\nclass JSDocCommentImpl implements JSDocComment {\r\n\r\n    readonly elements: JSDocElement[];\r\n    readonly range: Range;\r\n\r\n    constructor(elements: JSDocElement[], range: Range) {\r\n        this.elements = elements;\r\n        this.range = range;\r\n    }\r\n\r\n    getTag(name: string): JSDocTag | undefined {\r\n        return this.getAllTags().find(e => e.name === name);\r\n    }\r\n\r\n    getTags(name: string): JSDocTag[] {\r\n        return this.getAllTags().filter(e => e.name === name);\r\n    }\r\n\r\n    private getAllTags(): JSDocTag[] {\r\n        return this.elements.filter((e): e is JSDocTag => 'name' in e);\r\n    }\r\n\r\n    toString(): string {\r\n        let value = '';\r\n        for (const element of this.elements) {\r\n            if (value.length === 0) {\r\n                value = element.toString();\r\n            } else {\r\n                const text = element.toString();\r\n                value += fillNewlines(value) + text;\r\n            }\r\n        }\r\n        return value.trim();\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        let value = '';\r\n        for (const element of this.elements) {\r\n            if (value.length === 0) {\r\n                value = element.toMarkdown(options);\r\n            } else {\r\n                const text = element.toMarkdown(options);\r\n                value += fillNewlines(value) + text;\r\n            }\r\n        }\r\n        return value.trim();\r\n    }\r\n}\r\n\r\nclass JSDocTagImpl implements JSDocTag {\r\n    name: string;\r\n    content: JSDocParagraph;\r\n    range: Range;\r\n    inline: boolean;\r\n\r\n    constructor(name: string, content: JSDocParagraph, inline: boolean, range: Range) {\r\n        this.name = name;\r\n        this.content = content;\r\n        this.inline = inline;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        let text = `@${this.name}`;\r\n        const content = this.content.toString();\r\n        if (this.content.inlines.length === 1) {\r\n            text = `${text} ${content}`;\r\n        } else if (this.content.inlines.length > 1) {\r\n            text = `${text}\\n${content}`;\r\n        }\r\n        if (this.inline) {\r\n            // Inline tags are surrounded by curly braces\r\n            return `{${text}}`;\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        return options?.renderTag?.(this) ?? this.toMarkdownDefault(options);\r\n    }\r\n\r\n    private toMarkdownDefault(options?: JSDocRenderOptions): string {\r\n        const content = this.content.toMarkdown(options);\r\n        if (this.inline) {\r\n            const rendered = renderInlineTag(this.name, content, options ?? {});\r\n            if (typeof rendered === 'string') {\r\n                return rendered;\r\n            }\r\n        }\r\n        let marker = '';\r\n        if (options?.tag === 'italic' || options?.tag === undefined) {\r\n            marker = '*';\r\n        } else if (options?.tag === 'bold') {\r\n            marker = '**';\r\n        } else if (options?.tag === 'bold-italic') {\r\n            marker = '***';\r\n        }\r\n        let text = `${marker}@${this.name}${marker}`;\r\n        if (this.content.inlines.length === 1) {\r\n            text = `${text} — ${content}`;\r\n        } else if (this.content.inlines.length > 1) {\r\n            text = `${text}\\n${content}`;\r\n        }\r\n        if (this.inline) {\r\n            // Inline tags are surrounded by curly braces\r\n            return `{${text}}`;\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n}\r\n\r\nfunction renderInlineTag(tag: string, content: string, options: JSDocRenderOptions): string | undefined {\r\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\r\n        const index = content.indexOf(' ');\r\n        let display = content;\r\n        if (index > 0) {\r\n            const displayStart = skipWhitespace(content, index);\r\n            display = content.substring(displayStart);\r\n            content = content.substring(0, index);\r\n        }\r\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\r\n            // Surround the display value in a markdown inline code block\r\n            display = `\\`${display}\\``;\r\n        }\r\n        const renderedLink = options.renderLink?.(content, display) ?? renderLinkDefault(content, display);\r\n        return renderedLink;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction renderLinkDefault(content: string, display: string): string {\r\n    try {\r\n        URI.parse(content, true);\r\n        return `[${display}](${content})`;\r\n    } catch {\r\n        return content;\r\n    }\r\n}\r\n\r\nclass JSDocTextImpl implements JSDocParagraph {\r\n    inlines: JSDocInline[];\r\n    range: Range;\r\n\r\n    constructor(lines: JSDocInline[], range: Range) {\r\n        this.inlines = lines;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        let text = '';\r\n        for (let i = 0; i < this.inlines.length; i++) {\r\n            const inline = this.inlines[i];\r\n            const next = this.inlines[i + 1];\r\n            text += inline.toString();\r\n            if (next && next.range.start.line > inline.range.start.line) {\r\n                text += '\\n';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        let text = '';\r\n        for (let i = 0; i < this.inlines.length; i++) {\r\n            const inline = this.inlines[i];\r\n            const next = this.inlines[i + 1];\r\n            text += inline.toMarkdown(options);\r\n            if (next && next.range.start.line > inline.range.start.line) {\r\n                text += '\\n';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n}\r\n\r\nclass JSDocLineImpl implements JSDocLine {\r\n    text: string;\r\n    range: Range;\r\n\r\n    constructor(text: string, range: Range) {\r\n        this.text = text;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        return this.text;\r\n    }\r\n    toMarkdown(): string {\r\n        return this.text;\r\n    }\r\n\r\n}\r\n\r\nfunction fillNewlines(text: string): string {\r\n    if (text.endsWith('\\n')) {\r\n        return '\\n';\r\n    } else {\r\n        return '\\n\\n';\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { CommentProvider } from './comment-provider.js';\r\nimport type { JSDocTag } from './jsdoc.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { isJSDoc, parseJSDoc } from './jsdoc.js';\r\n\r\n/**\r\n * Provides documentation for AST nodes.\r\n */\r\nexport interface DocumentationProvider {\r\n    /**\r\n     * Returns a markdown documentation string for the specified AST node.\r\n     *\r\n     * The default implementation `JSDocDocumentationProvider` will inspect the comment associated with the specified node.\r\n     */\r\n    getDocumentation(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class JSDocDocumentationProvider implements DocumentationProvider {\r\n\r\n    protected readonly indexManager: IndexManager;\r\n    protected readonly commentProvider: CommentProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.indexManager = services.shared.workspace.IndexManager;\r\n        this.commentProvider = services.documentation.CommentProvider;\r\n    }\r\n\r\n    getDocumentation(node: AstNode): string | undefined {\r\n        const comment = this.commentProvider.getComment(node);\r\n        if (comment && isJSDoc(comment)) {\r\n            const parsedJSDoc = parseJSDoc(comment);\r\n            return parsedJSDoc.toMarkdown({\r\n                renderLink: (link, display) => {\r\n                    return this.documentationLinkRenderer(node, link, display);\r\n                },\r\n                renderTag: (tag) => {\r\n                    return this.documentationTagRenderer(node, tag);\r\n                }\r\n            });\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected documentationLinkRenderer(node: AstNode, name: string, display: string): string | undefined {\r\n        const description = this.findNameInPrecomputedScopes(node, name) ?? this.findNameInGlobalScope(node, name);\r\n        if (description && description.nameSegment) {\r\n            const line = description.nameSegment.range.start.line + 1;\r\n            const character = description.nameSegment.range.start.character + 1;\r\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\r\n            return `[${display}](${uri.toString()})`;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected documentationTagRenderer(_node: AstNode, _tag: JSDocTag): string | undefined {\r\n        // Fall back to the default tag rendering\r\n        return undefined;\r\n    }\r\n\r\n    protected findNameInPrecomputedScopes(node: AstNode, name: string): AstNodeDescription | undefined {\r\n        const document = getDocument(node);\r\n        const precomputed = document.precomputedScopes;\r\n        if (!precomputed) {\r\n            return undefined;\r\n        }\r\n        let currentNode: AstNode | undefined = node;\r\n        do {\r\n            const allDescriptions = precomputed.get(currentNode);\r\n            const description = allDescriptions.find(e => e.name === name);\r\n            if (description) {\r\n                return description;\r\n            }\r\n            currentNode = currentNode.$container;\r\n        } while (currentNode);\r\n\r\n        return undefined;\r\n    }\r\n\r\n    protected findNameInGlobalScope(node: AstNode, name: string): AstNodeDescription | undefined {\r\n        const description = this.indexManager.allElements().find(e => e.name === name);\r\n        return description;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { GrammarConfig } from '../languages/grammar-config.js';\r\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport { findCommentNode } from '../utils/cst-utils.js';\r\n\r\n/**\r\n * Provides comments for AST nodes.\r\n */\r\nexport interface CommentProvider {\r\n    /**\r\n     * Returns the comment associated with the specified AST node.\r\n     * @param node The AST node to get the comment for.\r\n     * @returns The comment associated with the specified AST node or `undefined` if there is no comment.\r\n     */\r\n    getComment(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class DefaultCommentProvider implements CommentProvider {\r\n    protected readonly grammarConfig: () => GrammarConfig;\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammarConfig = () => services.parser.GrammarConfig;\r\n    }\r\n    getComment(node: AstNode): string | undefined {\r\n        if(isAstNodeWithComment(node)) {\r\n            return node.$comment;\r\n        }\r\n        return findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)?.text;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CancellationToken } from '../utils/cancellation.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { LangiumParser, ParseResult } from './langium-parser.js';\r\nimport type { Hydrator } from '../serializer/hydrator.js';\r\nimport type { Event } from '../utils/event.js';\r\nimport { Deferred, OperationCancelled } from '../utils/promise-utils.js';\r\nimport { Emitter } from '../utils/event.js';\r\n\r\n/**\r\n * Async parser that allows cancellation of the current parsing process.\r\n *\r\n * @remarks\r\n * The sync parser implementation is blocking the event loop, which can become quite problematic for large files.\r\n * The default implementation is not actually async. It just wraps the sync parser in a promise. A real implementation would create worker threads or web workers to offload the parsing work.\r\n */\r\nexport interface AsyncParser {\r\n    /**\r\n     * Parses the given text and returns the parse result.\r\n     *\r\n     * @param text The text to parse.\r\n     * @param cancelToken A cancellation token that can be used to cancel the parsing process.\r\n     * @returns A promise that resolves to the parse result.\r\n     *\r\n     * @throws `OperationCancelled` if the parsing process is cancelled.\r\n     */\r\n    parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>>;\r\n}\r\n\r\n/**\r\n * Default implementation of the async parser which simply wraps the sync parser in a promise.\r\n *\r\n * @remarks\r\n * A real implementation would create worker threads or web workers to offload the parsing work.\r\n */\r\nexport class DefaultAsyncParser implements AsyncParser {\r\n\r\n    protected readonly syncParser: LangiumParser;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.syncParser = services.parser.LangiumParser;\r\n    }\r\n\r\n    parse<T extends AstNode>(text: string, _cancelToken: CancellationToken): Promise<ParseResult<T>> {\r\n        return Promise.resolve(this.syncParser.parse<T>(text));\r\n    }\r\n}\r\n\r\nexport abstract class AbstractThreadedAsyncParser implements AsyncParser {\r\n\r\n    /**\r\n     * The thread count determines how many threads are used to parse files in parallel.\r\n     * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\r\n     */\r\n    protected threadCount = 8;\r\n    /**\r\n     * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\r\n     * The default value is 200(ms).\r\n     */\r\n    protected terminationDelay = 200;\r\n    protected workerPool: ParserWorker[] = [];\r\n    protected queue: Array<Deferred<ParserWorker>> = [];\r\n\r\n    protected readonly hydrator: Hydrator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.hydrator = services.serializer.Hydrator;\r\n    }\r\n\r\n    protected initializeWorkers(): void {\r\n        while (this.workerPool.length < this.threadCount) {\r\n            const worker = this.createWorker();\r\n            worker.onReady(() => {\r\n                if (this.queue.length > 0) {\r\n                    const deferred = this.queue.shift();\r\n                    if (deferred) {\r\n                        worker.lock();\r\n                        deferred.resolve(worker);\r\n                    }\r\n                }\r\n            });\r\n            this.workerPool.push(worker);\r\n        }\r\n    }\r\n\r\n    async parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>> {\r\n        const worker = await this.acquireParserWorker(cancelToken);\r\n        const deferred = new Deferred<ParseResult<T>>();\r\n        let timeout: NodeJS.Timeout | undefined;\r\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\r\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\r\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\r\n        const cancellation = cancelToken.onCancellationRequested(() => {\r\n            timeout = setTimeout(() => {\r\n                this.terminateWorker(worker);\r\n            }, this.terminationDelay);\r\n        });\r\n        worker.parse(text).then(result => {\r\n            const hydrated = this.hydrator.hydrate<T>(result);\r\n            deferred.resolve(hydrated);\r\n        }).catch(err => {\r\n            deferred.reject(err);\r\n        }).finally(() => {\r\n            cancellation.dispose();\r\n            clearTimeout(timeout);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    protected terminateWorker(worker: ParserWorker): void {\r\n        worker.terminate();\r\n        const index = this.workerPool.indexOf(worker);\r\n        if (index >= 0) {\r\n            this.workerPool.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    protected async acquireParserWorker(cancelToken: CancellationToken): Promise<ParserWorker> {\r\n        this.initializeWorkers();\r\n        for (const worker of this.workerPool) {\r\n            if (worker.ready) {\r\n                worker.lock();\r\n                return worker;\r\n            }\r\n        }\r\n        const deferred = new Deferred<ParserWorker>();\r\n        cancelToken.onCancellationRequested(() => {\r\n            const index = this.queue.indexOf(deferred);\r\n            if (index >= 0) {\r\n                this.queue.splice(index, 1);\r\n            }\r\n            deferred.reject(OperationCancelled);\r\n        });\r\n        this.queue.push(deferred);\r\n        return deferred.promise;\r\n    }\r\n\r\n    protected abstract createWorker(): ParserWorker;\r\n}\r\n\r\nexport type WorkerMessagePost = (message: unknown) => void;\r\nexport type WorkerMessageCallback = (cb: (message: unknown) => void) => void;\r\n\r\nexport class ParserWorker {\r\n\r\n    protected readonly sendMessage: WorkerMessagePost;\r\n    protected readonly _terminate: () => void;\r\n    protected readonly onReadyEmitter = new Emitter<void>();\r\n\r\n    protected deferred = new Deferred<ParseResult>();\r\n    protected _ready = true;\r\n    protected _parsing = false;\r\n\r\n    get ready(): boolean {\r\n        return this._ready;\r\n    }\r\n\r\n    get onReady(): Event<void> {\r\n        return this.onReadyEmitter.event;\r\n    }\r\n\r\n    constructor(sendMessage: WorkerMessagePost, onMessage: WorkerMessageCallback, onError: WorkerMessageCallback, terminate: () => void) {\r\n        this.sendMessage = sendMessage;\r\n        this._terminate = terminate;\r\n        onMessage(result => {\r\n            const parseResult = result as ParseResult;\r\n            this.deferred.resolve(parseResult);\r\n            this.unlock();\r\n        });\r\n        onError(error => {\r\n            this.deferred.reject(error);\r\n            this.unlock();\r\n        });\r\n    }\r\n\r\n    terminate(): void {\r\n        this.deferred.reject(OperationCancelled);\r\n        this._terminate();\r\n    }\r\n\r\n    lock(): void {\r\n        this._ready = false;\r\n    }\r\n\r\n    unlock(): void {\r\n        this._parsing = false;\r\n        this._ready = true;\r\n        this.onReadyEmitter.fire();\r\n    }\r\n\r\n    parse(text: string): Promise<ParseResult> {\r\n        if (this._parsing) {\r\n            throw new Error('Parser worker is busy');\r\n        }\r\n        this._parsing = true;\r\n        this.deferred = new Deferred();\r\n        this.sendMessage(text);\r\n        return this.deferred.promise;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { type AbstractCancellationTokenSource, CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\r\nimport { Deferred, isOperationCancelled, startCancelableOperation, type MaybePromise } from '../utils/promise-utils.js';\r\n\r\n/**\r\n * Utility service to execute mutually exclusive actions.\r\n */\r\nexport interface WorkspaceLock {\r\n    /**\r\n     * Performs a single async action, like initializing the workspace or processing document changes.\r\n     * Only one action will be executed at a time.\r\n     *\r\n     * When another action is queued up, the token provided for the action will be cancelled.\r\n     * Assuming the action makes use of this token, the next action only has to wait for the current action to finish cancellation.\r\n     */\r\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void>;\r\n\r\n    /**\r\n     * Performs a single action, like computing completion results or providing workspace symbols.\r\n     * Read actions will only be executed after all write actions have finished. They will be executed in parallel if possible.\r\n     *\r\n     * If a write action is currently running, the read action will be queued up and executed afterwards.\r\n     * If a new write action is queued up while a read action is waiting, the write action will receive priority and will be handled before the read action.\r\n     *\r\n     * Note that read actions are not allowed to modify anything in the workspace. Please use {@link write} instead.\r\n     */\r\n    read<T>(action: () => MaybePromise<T>): Promise<T>;\r\n\r\n    /**\r\n     * Cancels the last queued write action. All previous write actions already have been cancelled.\r\n     */\r\n    cancelWrite(): void;\r\n}\r\n\r\ntype LockAction<T = void> = (token: CancellationToken) => MaybePromise<T>;\r\n\r\ninterface LockEntry {\r\n    action: LockAction<unknown>;\r\n    deferred: Deferred<unknown>;\r\n    cancellationToken: CancellationToken;\r\n}\r\n\r\nexport class DefaultWorkspaceLock implements WorkspaceLock {\r\n\r\n    private previousTokenSource: AbstractCancellationTokenSource = new CancellationTokenSource();\r\n    private writeQueue: LockEntry[] = [];\r\n    private readQueue: LockEntry[] = [];\r\n    private done = true;\r\n\r\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void> {\r\n        this.cancelWrite();\r\n        const tokenSource = startCancelableOperation();\r\n        this.previousTokenSource = tokenSource;\r\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\r\n    }\r\n\r\n    read<T>(action: () => MaybePromise<T>): Promise<T> {\r\n        return this.enqueue(this.readQueue, action);\r\n    }\r\n\r\n    private enqueue<T = void>(queue: LockEntry[], action: LockAction<T>, cancellationToken = CancellationToken.None): Promise<T> {\r\n        const deferred = new Deferred<unknown>();\r\n        const entry: LockEntry = {\r\n            action,\r\n            deferred,\r\n            cancellationToken\r\n        };\r\n        queue.push(entry);\r\n        this.performNextOperation();\r\n        return deferred.promise as Promise<T>;\r\n    }\r\n\r\n    private async performNextOperation(): Promise<void> {\r\n        if (!this.done) {\r\n            return;\r\n        }\r\n        const entries: LockEntry[] = [];\r\n        if (this.writeQueue.length > 0) {\r\n            // Just perform the next write action\r\n            entries.push(this.writeQueue.shift()!);\r\n        } else if (this.readQueue.length > 0) {\r\n            // Empty the read queue and perform all actions in parallel\r\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\r\n        } else {\r\n            return;\r\n        }\r\n        this.done = false;\r\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\r\n            try {\r\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\r\n                const result = await Promise.resolve().then(() => action(cancellationToken));\r\n                deferred.resolve(result);\r\n            } catch (err) {\r\n                if (isOperationCancelled(err)) {\r\n                    // If the operation was cancelled, we don't want to reject the promise\r\n                    deferred.resolve(undefined);\r\n                } else {\r\n                    deferred.reject(err);\r\n                }\r\n            }\r\n        }));\r\n        this.done = true;\r\n        this.performNextOperation();\r\n    }\r\n\r\n    cancelWrite(): void {\r\n        this.previousTokenSource.cancel();\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2024 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport type { TokenType } from 'chevrotain';\r\nimport { CompositeCstNodeImpl, LeafCstNodeImpl, RootCstNodeImpl } from '../parser/cst-node-builder.js';\r\nimport { isAbstractElement, type AbstractElement, type Grammar } from '../languages/generated/ast.js';\r\nimport type { Linker } from '../references/linker.js';\r\nimport type { Lexer } from '../parser/lexer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { ParseResult } from '../parser/langium-parser.js';\r\nimport type { Reference, AstNode, CstNode, LeafCstNode, GenericAstNode, Mutable, RootCstNode } from '../syntax-tree.js';\r\nimport { isRootCstNode, isCompositeCstNode, isLeafCstNode, isAstNode, isReference } from '../syntax-tree.js';\r\nimport { streamAst } from '../utils/ast-utils.js';\r\nimport { BiMap } from '../utils/collections.js';\r\nimport { streamCst } from '../utils/cst-utils.js';\r\nimport type { LexingReport } from '../parser/token-builder.js';\r\n\r\n/**\r\n * The hydrator service is responsible for allowing AST parse results to be sent across worker threads.\r\n */\r\nexport interface Hydrator {\r\n    /**\r\n     * Converts a parse result to a plain object. The resulting object can be sent across worker threads.\r\n     */\r\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object>;\r\n    /**\r\n     * Converts a plain object to a parse result. The included AST node can then be used in the main thread.\r\n     * Calling this method on objects that have not been dehydrated first will result in undefined behavior.\r\n     */\r\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T>;\r\n}\r\n\r\nexport interface DehydrateContext {\r\n    astNodes: Map<AstNode, any>;\r\n    cstNodes: Map<CstNode, any>;\r\n}\r\n\r\nexport interface HydrateContext {\r\n    astNodes: Map<any, AstNode>;\r\n    cstNodes: Map<any, CstNode>;\r\n}\r\n\r\nexport class DefaultHydrator implements Hydrator {\r\n\r\n    protected readonly grammar: Grammar;\r\n    protected readonly lexer: Lexer;\r\n    protected readonly linker: Linker;\r\n\r\n    protected readonly grammarElementIdMap = new BiMap<AbstractElement, number>();\r\n    protected readonly tokenTypeIdMap = new BiMap<number, TokenType>();\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammar = services.Grammar;\r\n        this.lexer = services.parser.Lexer;\r\n        this.linker = services.references.Linker;\r\n    }\r\n\r\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object> {\r\n        return {\r\n            lexerErrors: result.lexerErrors,\r\n            lexerReport: result.lexerReport ? this.dehydrateLexerReport(result.lexerReport) : undefined,\r\n            // We need to create shallow copies of the errors\r\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\r\n            parserErrors: result.parserErrors.map(e => ({ ...e, message: e.message })),\r\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\r\n        };\r\n    }\r\n\r\n    protected dehydrateLexerReport(lexerReport: LexingReport): LexingReport {\r\n        // By default, lexer reports are serializable\r\n        return lexerReport;\r\n    }\r\n\r\n    protected createDehyrationContext(node: AstNode): DehydrateContext {\r\n        const astNodes = new Map<AstNode, any>();\r\n        const cstNodes = new Map<CstNode, any>();\r\n        for (const astNode of streamAst(node)) {\r\n            astNodes.set(astNode, {});\r\n        }\r\n        if (node.$cstNode) {\r\n            for (const cstNode of streamCst(node.$cstNode)) {\r\n                cstNodes.set(cstNode, {});\r\n            }\r\n        }\r\n        return {\r\n            astNodes,\r\n            cstNodes\r\n        };\r\n    }\r\n\r\n    protected dehydrateAstNode(node: AstNode, context: DehydrateContext): object {\r\n        const obj = context.astNodes.get(node) as Record<string, any>;\r\n        obj.$type = node.$type;\r\n        obj.$containerIndex = node.$containerIndex;\r\n        obj.$containerProperty = node.$containerProperty;\r\n        if (node.$cstNode !== undefined) {\r\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\r\n        }\r\n        for (const [name, value] of Object.entries(node)) {\r\n            if (name.startsWith('$')) {\r\n                continue;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                const arr: any[] = [];\r\n                obj[name] = arr;\r\n                for (const item of value) {\r\n                    if (isAstNode(item)) {\r\n                        arr.push(this.dehydrateAstNode(item, context));\r\n                    } else if (isReference(item)) {\r\n                        arr.push(this.dehydrateReference(item, context));\r\n                    } else {\r\n                        arr.push(item);\r\n                    }\r\n                }\r\n            } else if (isAstNode(value)) {\r\n                obj[name] = this.dehydrateAstNode(value, context);\r\n            } else if (isReference(value)) {\r\n                obj[name] = this.dehydrateReference(value, context);\r\n            } else if (value !== undefined) {\r\n                obj[name] = value;\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    protected dehydrateReference(reference: Reference, context: DehydrateContext): any {\r\n        const obj: Record<string, unknown> = {};\r\n        obj.$refText = reference.$refText;\r\n        if (reference.$refNode) {\r\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    protected dehydrateCstNode(node: CstNode, context: DehydrateContext): any {\r\n        const cstNode = context.cstNodes.get(node) as Record<string, any>;\r\n        if (isRootCstNode(node)) {\r\n            cstNode.fullText = node.fullText;\r\n        } else {\r\n            // Note: This returns undefined for hidden nodes (i.e. comments)\r\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\r\n        }\r\n        cstNode.hidden = node.hidden;\r\n        cstNode.astNode = context.astNodes.get(node.astNode);\r\n        if (isCompositeCstNode(node)) {\r\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\r\n        } else if (isLeafCstNode(node)) {\r\n            cstNode.tokenType = node.tokenType.name;\r\n            cstNode.offset = node.offset;\r\n            cstNode.length = node.length;\r\n            cstNode.startLine = node.range.start.line;\r\n            cstNode.startColumn = node.range.start.character;\r\n            cstNode.endLine = node.range.end.line;\r\n            cstNode.endColumn = node.range.end.character;\r\n        }\r\n        return cstNode;\r\n    }\r\n\r\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T> {\r\n        const node = result.value;\r\n        const context = this.createHydrationContext(node);\r\n        if ('$cstNode' in node) {\r\n            this.hydrateCstNode(node.$cstNode, context);\r\n        }\r\n        return {\r\n            lexerErrors: result.lexerErrors,\r\n            lexerReport: result.lexerReport,\r\n            parserErrors: result.parserErrors,\r\n            value: this.hydrateAstNode(node, context) as T\r\n        };\r\n    }\r\n\r\n    protected createHydrationContext(node: any): HydrateContext {\r\n        const astNodes = new Map<any, AstNode>();\r\n        const cstNodes = new Map<any, CstNode>();\r\n        for (const astNode of streamAst(node)) {\r\n            astNodes.set(astNode, {} as AstNode);\r\n        }\r\n        let root: RootCstNode;\r\n        if (node.$cstNode) {\r\n            for (const cstNode of streamCst(node.$cstNode)) {\r\n                let cst: Mutable<CstNode> | undefined;\r\n                if ('fullText' in cstNode) {\r\n                    cst = new RootCstNodeImpl(cstNode.fullText as string);\r\n                    root = cst as RootCstNode;\r\n                } else if ('content' in cstNode) {\r\n                    cst = new CompositeCstNodeImpl();\r\n                } else if ('tokenType' in cstNode) {\r\n                    cst = this.hydrateCstLeafNode(cstNode);\r\n                }\r\n                if (cst) {\r\n                    cstNodes.set(cstNode, cst);\r\n                    cst.root = root!;\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            astNodes,\r\n            cstNodes\r\n        };\r\n    }\r\n\r\n    protected hydrateAstNode(node: any, context: HydrateContext): AstNode {\r\n        const astNode = context.astNodes.get(node) as Mutable<GenericAstNode>;\r\n        astNode.$type = node.$type;\r\n        astNode.$containerIndex = node.$containerIndex;\r\n        astNode.$containerProperty = node.$containerProperty;\r\n        if (node.$cstNode) {\r\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\r\n        }\r\n        for (const [name, value] of Object.entries(node)) {\r\n            if (name.startsWith('$')) {\r\n                continue;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                const arr: unknown[] = [];\r\n                astNode[name] = arr;\r\n                for (const item of value) {\r\n                    if (isAstNode(item)) {\r\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\r\n                    } else if (isReference(item)) {\r\n                        arr.push(this.hydrateReference(item, astNode, name, context));\r\n                    } else {\r\n                        arr.push(item);\r\n                    }\r\n                }\r\n            } else if (isAstNode(value)) {\r\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\r\n            } else if (isReference(value)) {\r\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\r\n            } else if (value !== undefined) {\r\n                astNode[name] = value;\r\n            }\r\n        }\r\n        return astNode;\r\n    }\r\n\r\n    protected setParent(node: any, parent: any): any {\r\n        node.$container = parent as AstNode;\r\n        return node;\r\n    }\r\n\r\n    protected hydrateReference(reference: any, node: AstNode, name: string, context: HydrateContext): Reference {\r\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode)!, reference.$refText);\r\n    }\r\n\r\n    protected hydrateCstNode(cstNode: any, context: HydrateContext, num = 0): CstNode {\r\n        const cstNodeObj = context.cstNodes.get(cstNode) as Mutable<CstNode>;\r\n        if (typeof cstNode.grammarSource === 'number') {\r\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\r\n        }\r\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode)!;\r\n        if (isCompositeCstNode(cstNodeObj)) {\r\n            for (const child of cstNode.content) {\r\n                const hydrated = this.hydrateCstNode(child, context, num++);\r\n                cstNodeObj.content.push(hydrated);\r\n            }\r\n        }\r\n        return cstNodeObj;\r\n    }\r\n\r\n    protected hydrateCstLeafNode(cstNode: any): LeafCstNode {\r\n        const tokenType = this.getTokenType(cstNode.tokenType);\r\n        const offset = cstNode.offset;\r\n        const length = cstNode.length;\r\n        const startLine = cstNode.startLine;\r\n        const startColumn = cstNode.startColumn;\r\n        const endLine = cstNode.endLine;\r\n        const endColumn = cstNode.endColumn;\r\n        const hidden = cstNode.hidden;\r\n        const node = new LeafCstNodeImpl(\r\n            offset,\r\n            length,\r\n            {\r\n                start: {\r\n                    line: startLine,\r\n                    character: startColumn\r\n                },\r\n                end: {\r\n                    line: endLine,\r\n                    character: endColumn\r\n                }\r\n            },\r\n            tokenType,\r\n            hidden\r\n        );\r\n        return node;\r\n    }\r\n\r\n    protected getTokenType(name: string): TokenType {\r\n        return this.lexer.definition[name];\r\n    }\r\n\r\n    protected getGrammarElementId(node: AbstractElement | undefined): number | undefined {\r\n        if (!node) {\r\n            return undefined;\r\n        }\r\n        if (this.grammarElementIdMap.size === 0) {\r\n            this.createGrammarElementIdMap();\r\n        }\r\n        return this.grammarElementIdMap.get(node);\r\n    }\r\n\r\n    protected getGrammarElement(id: number): AbstractElement | undefined {\r\n        if (this.grammarElementIdMap.size === 0) {\r\n            this.createGrammarElementIdMap();\r\n        }\r\n        const element = this.grammarElementIdMap.getKey(id);\r\n        return element;\r\n    }\r\n\r\n    protected createGrammarElementIdMap(): void {\r\n        let id = 0;\r\n        for (const element of streamAst(this.grammar)) {\r\n            if (isAbstractElement(element)) {\r\n                this.grammarElementIdMap.set(element, id++);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n******************************************************************************/\r\n\r\nimport type { Module } from './dependency-injection.js';\r\nimport type { LangiumDefaultCoreServices, LangiumDefaultSharedCoreServices, LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { FileSystemProvider } from './workspace/file-system-provider.js';\r\nimport { createGrammarConfig } from './languages/grammar-config.js';\r\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\r\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\r\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\r\nimport { DefaultValueConverter } from './parser/value-converter.js';\r\nimport { DefaultLinker } from './references/linker.js';\r\nimport { DefaultNameProvider } from './references/name-provider.js';\r\nimport { DefaultReferences } from './references/references.js';\r\nimport { DefaultScopeComputation } from './references/scope-computation.js';\r\nimport { DefaultScopeProvider } from './references/scope-provider.js';\r\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\r\nimport { DefaultServiceRegistry } from './service-registry.js';\r\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\r\nimport { ValidationRegistry } from './validation/validation-registry.js';\r\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\r\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\r\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\r\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\r\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\r\nimport { DefaultIndexManager } from './workspace/index-manager.js';\r\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\r\nimport { DefaultLexer, DefaultLexerErrorMessageProvider } from './parser/lexer.js';\r\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\r\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\r\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\r\nimport { DefaultAsyncParser } from './parser/async-parser.js';\r\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\r\nimport { DefaultHydrator } from './serializer/hydrator.js';\r\n\r\n/**\r\n * Context required for creating the default language-specific dependency injection module.\r\n */\r\nexport interface DefaultCoreModuleContext {\r\n    shared: LangiumSharedCoreServices;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default core services.\r\n * This is a set of services that are dedicated to a specific language.\r\n */\r\nexport function createDefaultCoreModule(context: DefaultCoreModuleContext): Module<LangiumCoreServices, LangiumDefaultCoreServices> {\r\n    return {\r\n        documentation: {\r\n            CommentProvider: (services) => new DefaultCommentProvider(services),\r\n            DocumentationProvider: (services) => new JSDocDocumentationProvider(services)\r\n        },\r\n        parser: {\r\n            AsyncParser: (services) => new DefaultAsyncParser(services),\r\n            GrammarConfig: (services) => createGrammarConfig(services),\r\n            LangiumParser: (services) => createLangiumParser(services),\r\n            CompletionParser: (services) => createCompletionParser(services),\r\n            ValueConverter: () => new DefaultValueConverter(),\r\n            TokenBuilder: () => new DefaultTokenBuilder(),\r\n            Lexer: (services) => new DefaultLexer(services),\r\n            ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider(),\r\n            LexerErrorMessageProvider: () => new DefaultLexerErrorMessageProvider()\r\n        },\r\n        workspace: {\r\n            AstNodeLocator: () => new DefaultAstNodeLocator(),\r\n            AstNodeDescriptionProvider: (services) => new DefaultAstNodeDescriptionProvider(services),\r\n            ReferenceDescriptionProvider: (services) => new DefaultReferenceDescriptionProvider(services)\r\n        },\r\n        references: {\r\n            Linker: (services) => new DefaultLinker(services),\r\n            NameProvider: () => new DefaultNameProvider(),\r\n            ScopeProvider: (services) => new DefaultScopeProvider(services),\r\n            ScopeComputation: (services) => new DefaultScopeComputation(services),\r\n            References: (services) => new DefaultReferences(services)\r\n        },\r\n        serializer: {\r\n            Hydrator: (services) => new DefaultHydrator(services),\r\n            JsonSerializer: (services) => new DefaultJsonSerializer(services)\r\n        },\r\n        validation: {\r\n            DocumentValidator: (services) => new DefaultDocumentValidator(services),\r\n            ValidationRegistry: (services) => new ValidationRegistry(services)\r\n        },\r\n        shared: () => context.shared\r\n    };\r\n}\r\n\r\n/**\r\n * Context required for creating the default shared dependency injection module.\r\n */\r\nexport interface DefaultSharedCoreModuleContext {\r\n    /**\r\n     * Factory function to create a {@link FileSystemProvider}.\r\n     *\r\n     * Langium exposes an `EmptyFileSystem` and `NodeFileSystem`, exported through `langium/node`.\r\n     * When running Langium as part of a vscode language server or a Node.js app, using the `NodeFileSystem` is recommended,\r\n     * the `EmptyFileSystem` in every other use case.\r\n     */\r\n    fileSystemProvider: (services: LangiumSharedCoreServices) => FileSystemProvider;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default shared core services.\r\n * This is the set of services that are shared between multiple languages.\r\n */\r\nexport function createDefaultSharedCoreModule(context: DefaultSharedCoreModuleContext): Module<LangiumSharedCoreServices, LangiumDefaultSharedCoreServices> {\r\n    return {\r\n        ServiceRegistry: (services) => new DefaultServiceRegistry(services),\r\n        workspace: {\r\n            LangiumDocuments: (services) => new DefaultLangiumDocuments(services),\r\n            LangiumDocumentFactory: (services) => new DefaultLangiumDocumentFactory(services),\r\n            DocumentBuilder: (services) => new DefaultDocumentBuilder(services),\r\n            IndexManager: (services) => new DefaultIndexManager(services),\r\n            WorkspaceManager: (services) => new DefaultWorkspaceManager(services),\r\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\r\n            WorkspaceLock: () => new DefaultWorkspaceLock(),\r\n            ConfigurationProvider: (services) => new DefaultConfigurationProvider(services)\r\n        }\r\n    };\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { DefaultNameRegexp } from '../utils/cst-utils.js';\r\nimport { isCommentTerminal, terminalRegex } from '../utils/grammar-utils.js';\r\nimport { isMultilineComment } from '../utils/regexp-utils.js';\r\nimport { isTerminalRule } from './generated/ast.js';\r\n\r\nexport interface GrammarConfig {\r\n    /**\r\n     * Lists all rule names which are classified as multiline comment rules\r\n     */\r\n    multilineCommentRules: string[]\r\n    /**\r\n     * A regular expression which matches characters of names\r\n     */\r\n    nameRegexp: RegExp\r\n}\r\n\r\n/**\r\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\r\n * language-specific module.\r\n */\r\nexport function createGrammarConfig(services: LangiumCoreServices): GrammarConfig {\r\n    const rules: string[] = [];\r\n    const grammar = services.Grammar;\r\n    for (const rule of grammar.rules) {\r\n        if (isTerminalRule(rule) && isCommentTerminal(rule) && isMultilineComment(terminalRegex(rule))) {\r\n            rules.push(rule.name);\r\n        }\r\n    }\r\n    return {\r\n        multilineCommentRules: rules,\r\n        nameRegexp: DefaultNameRegexp\r\n    };\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { LangiumCompletionParser } from './langium-parser.js';\r\nimport { createParser } from './parser-builder-base.js';\r\n\r\nexport function createCompletionParser(services: LangiumCoreServices): LangiumCompletionParser {\r\n    const grammar = services.Grammar;\r\n    const lexer = services.parser.Lexer;\r\n    const parser = new LangiumCompletionParser(services);\r\n    createParser(grammar, parser, lexer.definition);\r\n    parser.finalize();\r\n    return parser;\r\n}\r\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Set, Group, Character, IRegExpAST } from '@chevrotain/regexp-to-ast';\r\nimport { RegExpParser, BaseRegExpVisitor } from '@chevrotain/regexp-to-ast';\r\n\r\nexport const NEWLINE_REGEXP = /\\r?\\n/gm;\r\n\r\nconst regexpParser = new RegExpParser();\r\n\r\n/**\r\n * This class is in charge of heuristically identifying start/end tokens of terminals.\r\n *\r\n * The way this works is by doing the following:\r\n * 1. Traverse the regular expression in the \"start state\"\r\n * 2. Add any encountered sets/single characters to the \"start regexp\"\r\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\r\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\r\n * 5. If we re-encounter any variable-length content we reset the end stack\r\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\r\n *\r\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\r\n */\r\nclass TerminalRegExpVisitor extends BaseRegExpVisitor {\r\n\r\n    private isStarting = true;\r\n    startRegexp: string;\r\n    private endRegexpStack: string[] = [];\r\n    multiline = false;\r\n    regex: string;\r\n\r\n    get endRegex(): string {\r\n        return this.endRegexpStack.join('');\r\n    }\r\n\r\n    reset(regex: string): void {\r\n        this.multiline = false;\r\n        this.regex = regex;\r\n        this.startRegexp = '';\r\n        this.isStarting = true;\r\n        this.endRegexpStack = [];\r\n    }\r\n\r\n    override visitGroup(node: Group) {\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        }\r\n    }\r\n\r\n    override visitCharacter(node: Character): void {\r\n        const char = String.fromCharCode(node.value);\r\n        if (!this.multiline && char === '\\n') {\r\n            this.multiline = true;\r\n        }\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        } else {\r\n            const escapedChar = escapeRegExp(char);\r\n            this.endRegexpStack.push(escapedChar);\r\n            if (this.isStarting) {\r\n                this.startRegexp += escapedChar;\r\n            }\r\n        }\r\n    }\r\n\r\n    override visitSet(node: Set): void {\r\n        if (!this.multiline) {\r\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\r\n            const regex = new RegExp(set);\r\n            this.multiline = Boolean('\\n'.match(regex));\r\n        }\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        } else {\r\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\r\n            this.endRegexpStack.push(set);\r\n            if (this.isStarting) {\r\n                this.startRegexp += set;\r\n            }\r\n        }\r\n    }\r\n\r\n    override visitChildren(node: IRegExpAST): void {\r\n        if (node.type === 'Group') {\r\n            // Ignore children of groups with quantifier (+/*/?)\r\n            // These groups are unrelated to start/end tokens of terminals\r\n            const group = node as Group;\r\n            if (group.quantifier) {\r\n                return;\r\n            }\r\n        }\r\n        super.visitChildren(node);\r\n    }\r\n}\r\n\r\nconst visitor = new TerminalRegExpVisitor();\r\n\r\nexport function getTerminalParts(regexp: RegExp | string): Array<{ start: string, end: string }> {\r\n    try {\r\n        if (typeof regexp !== 'string') {\r\n            regexp = regexp.source;\r\n        }\r\n        regexp = `/${regexp}/`;\r\n        const pattern = regexpParser.pattern(regexp);\r\n        const parts: Array<{ start: string, end: string }> = [];\r\n        for (const alternative of pattern.value.value) {\r\n            visitor.reset(regexp);\r\n            visitor.visit(alternative);\r\n            parts.push({\r\n                start: visitor.startRegexp,\r\n                end: visitor.endRegex\r\n            });\r\n        }\r\n        return parts;\r\n    } catch {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport function isMultilineComment(regexp: RegExp | string): boolean {\r\n    try {\r\n        if (typeof regexp === 'string') {\r\n            regexp = new RegExp(regexp);\r\n        }\r\n        regexp = regexp.toString();\r\n        visitor.reset(regexp);\r\n        // Parsing the pattern might fail (since it's user code)\r\n        visitor.visit(regexpParser.pattern(regexp));\r\n        return visitor.multiline;\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * A set of all characters that are considered whitespace by the '\\s' RegExp character class.\r\n * Taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes).\r\n */\r\nexport const whitespaceCharacters = (\r\n    '\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007' +\r\n    '\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff').split('');\r\n\r\nexport function isWhitespace(value: RegExp | string): boolean {\r\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\r\n    return whitespaceCharacters.some((ws) => regexp.test(ws));\r\n}\r\n\r\nexport function escapeRegExp(value: string): string {\r\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nexport function getCaseInsensitivePattern(keyword: string): string {\r\n    return Array.prototype.map.call(keyword, letter =>\r\n        /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)\r\n    ).join('');\r\n}\r\n\r\n/**\r\n * Determines whether the given input has a partial match with the specified regex.\r\n * @param regex The regex to partially match against\r\n * @param input The input string\r\n * @returns Whether any match exists.\r\n */\r\nexport function partialMatches(regex: RegExp | string, input: string): boolean {\r\n    const partial = partialRegExp(regex);\r\n    const match = input.match(partial);\r\n    return !!match && match[0].length > 0;\r\n}\r\n\r\n/**\r\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\r\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\r\n * @param regex The input regex to be converted.\r\n * @returns A partial regex constructed from the input regex.\r\n */\r\nexport function partialRegExp(regex: RegExp | string): RegExp {\r\n    if (typeof regex === 'string') {\r\n        regex = new RegExp(regex);\r\n    }\r\n    const re = regex, source = regex.source;\r\n    let i = 0;\r\n\r\n    function process() {\r\n        let result = '',\r\n            tmp;\r\n\r\n        function appendRaw(nbChars: number) {\r\n            result += source.substr(i, nbChars);\r\n            i += nbChars;\r\n        }\r\n\r\n        function appendOptional(nbChars: number) {\r\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\r\n            i += nbChars;\r\n        }\r\n\r\n        while (i < source.length) {\r\n            switch (source[i]) {\r\n                case '\\\\':\r\n                    switch (source[i + 1]) {\r\n                        case 'c':\r\n                            appendOptional(3);\r\n                            break;\r\n                        case 'x':\r\n                            appendOptional(4);\r\n                            break;\r\n                        case 'u':\r\n                            if (re.unicode) {\r\n                                if (source[i + 2] === '{') {\r\n                                    appendOptional(source.indexOf('}', i) - i + 1);\r\n                                } else {\r\n                                    appendOptional(6);\r\n                                }\r\n                            } else {\r\n                                appendOptional(2);\r\n                            }\r\n                            break;\r\n                        case 'p':\r\n                        case 'P':\r\n                            if (re.unicode) {\r\n                                appendOptional(source.indexOf('}', i) - i + 1);\r\n                            } else {\r\n                                appendOptional(2);\r\n                            }\r\n                            break;\r\n                        case 'k':\r\n                            appendOptional(source.indexOf('>', i) - i + 1);\r\n                            break;\r\n                        default:\r\n                            appendOptional(2);\r\n                            break;\r\n                    }\r\n                    break;\r\n\r\n                case '[':\r\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\r\n                    tmp.lastIndex = i;\r\n                    tmp = tmp.exec(source) || [];\r\n                    appendOptional(tmp[0].length);\r\n                    break;\r\n\r\n                case '|':\r\n                case '^':\r\n                case '$':\r\n                case '*':\r\n                case '+':\r\n                case '?':\r\n                    appendRaw(1);\r\n                    break;\r\n                case '{':\r\n                    tmp = /\\{\\d+,?\\d*\\}/g;\r\n                    tmp.lastIndex = i;\r\n                    tmp = tmp.exec(source);\r\n                    if (tmp) {\r\n                        appendRaw(tmp[0].length);\r\n                    } else {\r\n                        appendOptional(1);\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    if (source[i + 1] === '?') {\r\n                        switch (source[i + 2]) {\r\n                            case ':':\r\n                                result += '(?:';\r\n                                i += 3;\r\n                                result += process() + '|$)';\r\n                                break;\r\n                            case '=':\r\n                                result += '(?=';\r\n                                i += 3;\r\n                                result += process() + ')';\r\n                                break;\r\n                            case '!':\r\n                                tmp = i;\r\n                                i += 3;\r\n                                process();\r\n                                result += source.substr(tmp, i - tmp);\r\n                                break;\r\n                            case '<':\r\n                                switch (source[i + 3]) {\r\n                                    case '=':\r\n                                    case '!':\r\n                                        tmp = i;\r\n                                        i += 4;\r\n                                        process();\r\n                                        result += source.substr(tmp, i - tmp);\r\n                                        break;\r\n                                    default:\r\n                                        appendRaw(source.indexOf('>', i) - i + 1);\r\n                                        result += process() + '|$)';\r\n                                        break;\r\n                                }\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        appendRaw(1);\r\n                        result += process() + '|$)';\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    ++i;\r\n                    return result;\r\n                default:\r\n                    appendOptional(1);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return new RegExp(process(), regex.flags);\r\n}\r\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { AstNode, AstReflection, CstNode, GenericAstNode, Mutable, PropertyType, Reference, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { Stream, TreeStream } from './stream.js';\r\nimport type { LangiumDocument } from '../workspace/documents.js';\r\nimport { isAstNode, isReference } from '../syntax-tree.js';\r\nimport { DONE_RESULT, stream, StreamImpl, TreeStreamImpl } from './stream.js';\r\nimport { inRange } from './cst-utils.js';\r\n\r\n/**\r\n * Link the `$container` and other related properties of every AST node that is directly contained\r\n * in the given `node`.\r\n */\r\nexport function linkContentToContainer(node: AstNode): void {\r\n    for (const [name, value] of Object.entries(node)) {\r\n        if (!name.startsWith('$')) {\r\n            if (Array.isArray(value)) {\r\n                value.forEach((item, index) => {\r\n                    if (isAstNode(item)) {\r\n                        (item as Mutable<AstNode>).$container = node;\r\n                        (item as Mutable<AstNode>).$containerProperty = name;\r\n                        (item as Mutable<AstNode>).$containerIndex = index;\r\n                    }\r\n                });\r\n            } else if (isAstNode(value)) {\r\n                (value as Mutable<AstNode>).$container = node;\r\n                (value as Mutable<AstNode>).$containerProperty = name;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\r\n * node that matches the type predicate. If the start node itself matches, it is returned.\r\n * If no container matches, `undefined` is returned.\r\n */\r\nexport function getContainerOfType<T extends AstNode>(node: AstNode | undefined, typePredicate: (n: AstNode) => n is T): T | undefined {\r\n    let item = node;\r\n    while (item) {\r\n        if (typePredicate(item)) {\r\n            return item;\r\n        }\r\n        item = item.$container;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\r\n * of a container that matches the given predicate. The start node is included in the checks.\r\n */\r\nexport function hasContainerOfType(node: AstNode | undefined, predicate: (n: AstNode) => boolean): boolean {\r\n    let item = node;\r\n    while (item) {\r\n        if (predicate(item)) {\r\n            return true;\r\n        }\r\n        item = item.$container;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Retrieve the document in which the given AST node is contained. A reference to the document is\r\n * usually held by the root node of the AST.\r\n *\r\n * @throws an error if the node is not contained in a document.\r\n */\r\nexport function getDocument<T extends AstNode = AstNode>(node: AstNode): LangiumDocument<T> {\r\n    const rootNode = findRootNode(node);\r\n    const result = rootNode.$document;\r\n    if (!result) {\r\n        throw new Error('AST node has no document.');\r\n    }\r\n    return result as LangiumDocument<T>;\r\n}\r\n\r\n/**\r\n * Returns the root node of the given AST node by following the `$container` references.\r\n */\r\nexport function findRootNode(node: AstNode): AstNode {\r\n    while (node.$container) {\r\n        node = node.$container;\r\n    }\r\n    return node;\r\n}\r\n\r\nexport interface AstStreamOptions {\r\n    /**\r\n     * Optional target range that the nodes in the stream need to intersect\r\n     */\r\n    range?: Range\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\r\n * single-valued as well as multi-valued (array) properties.\r\n */\r\nexport function streamContents(node: AstNode, options?: AstStreamOptions): Stream<AstNode> {\r\n    if (!node) {\r\n        throw new Error('Node must be an AstNode.');\r\n    }\r\n    const range = options?.range;\r\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\r\n    return new StreamImpl<State, AstNode>(() => ({\r\n        keys: Object.keys(node),\r\n        keyIndex: 0,\r\n        arrayIndex: 0\r\n    }), state => {\r\n        while (state.keyIndex < state.keys.length) {\r\n            const property = state.keys[state.keyIndex];\r\n            if (!property.startsWith('$')) {\r\n                const value = (node as GenericAstNode)[property];\r\n                if (isAstNode(value)) {\r\n                    state.keyIndex++;\r\n                    if (isAstNodeInRange(value, range)) {\r\n                        return { done: false, value };\r\n                    }\r\n                } else if (Array.isArray(value)) {\r\n                    while (state.arrayIndex < value.length) {\r\n                        const index = state.arrayIndex++;\r\n                        const element = value[index];\r\n                        if (isAstNode(element) && isAstNodeInRange(element, range)) {\r\n                            return { done: false, value: element };\r\n                        }\r\n                    }\r\n                    state.arrayIndex = 0;\r\n                }\r\n            }\r\n            state.keyIndex++;\r\n        }\r\n        return DONE_RESULT;\r\n    });\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\r\n * This does not include the root node itself.\r\n */\r\nexport function streamAllContents(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\r\n    if (!root) {\r\n        throw new Error('Root node must be an AstNode.');\r\n    }\r\n    return new TreeStreamImpl(root, node => streamContents(node, options));\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\r\n * including the root node itself.\r\n */\r\nexport function streamAst(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\r\n    if (!root) {\r\n        throw new Error('Root node must be an AstNode.');\r\n    } else if (options?.range && !isAstNodeInRange(root, options.range)) {\r\n        // Return an empty stream if the root node isn't in range\r\n        return new TreeStreamImpl(root, () => []);\r\n    }\r\n    return new TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\r\n}\r\n\r\nfunction isAstNodeInRange(astNode: AstNode, range?: Range): boolean {\r\n    if (!range) {\r\n        return true;\r\n    }\r\n    const nodeRange = astNode.$cstNode?.range;\r\n    if (!nodeRange) {\r\n        return false;\r\n    }\r\n    return inRange(nodeRange, range);\r\n}\r\n\r\n/**\r\n * Create a stream of all cross-references that are held by the given AST node. This includes\r\n * single-valued as well as multi-valued (array) properties.\r\n */\r\nexport function streamReferences(node: AstNode): Stream<ReferenceInfo> {\r\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\r\n    return new StreamImpl<State, ReferenceInfo>(() => ({\r\n        keys: Object.keys(node),\r\n        keyIndex: 0,\r\n        arrayIndex: 0\r\n    }), state => {\r\n        while (state.keyIndex < state.keys.length) {\r\n            const property = state.keys[state.keyIndex];\r\n            if (!property.startsWith('$')) {\r\n                const value = (node as GenericAstNode)[property];\r\n                if (isReference(value)) {\r\n                    state.keyIndex++;\r\n                    return { done: false, value: { reference: value, container: node, property } };\r\n                } else if (Array.isArray(value)) {\r\n                    while (state.arrayIndex < value.length) {\r\n                        const index = state.arrayIndex++;\r\n                        const element = value[index];\r\n                        if (isReference(element)) {\r\n                            return { done: false, value: { reference: element, container: node, property, index } };\r\n                        }\r\n                    }\r\n                    state.arrayIndex = 0;\r\n                }\r\n            }\r\n            state.keyIndex++;\r\n        }\r\n        return DONE_RESULT;\r\n    });\r\n}\r\n\r\n/**\r\n * Returns a Stream of references to the target node from the AstNode tree\r\n *\r\n * @param targetNode AstNode we are looking for\r\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\r\n */\r\nexport function findLocalReferences(targetNode: AstNode, lookup = getDocument(targetNode).parseResult.value): Stream<Reference> {\r\n    const refs: Reference[] = [];\r\n    streamAst(lookup).forEach(node => {\r\n        streamReferences(node).forEach(refInfo => {\r\n            if (refInfo.reference.ref === targetNode) {\r\n                refs.push(refInfo.reference);\r\n            }\r\n        });\r\n    });\r\n    return stream(refs);\r\n}\r\n\r\n/**\r\n * Assigns all mandatory AST properties to the specified node.\r\n *\r\n * @param reflection Reflection object used to gather mandatory properties for the node.\r\n * @param node Specified node is modified in place and properties are directly assigned.\r\n */\r\nexport function assignMandatoryProperties(reflection: AstReflection, node: AstNode): void {\r\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\r\n    const genericNode = node as GenericAstNode;\r\n    for (const property of typeMetaData.properties) {\r\n        // Only set the value if the property is not already set and if it has a default value\r\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\r\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\r\n        }\r\n    }\r\n}\r\n\r\nfunction copyDefaultValue(propertyType: PropertyType): PropertyType {\r\n    if (Array.isArray(propertyType)) {\r\n        return [...propertyType.map(copyDefaultValue)];\r\n    } else {\r\n        return propertyType;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deep copy of the specified AST node.\r\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\r\n *\r\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\r\n */\r\nexport function copyAstNode<T extends AstNode = AstNode>(node: T, buildReference: (node: AstNode, property: string, refNode: CstNode | undefined, refText: string) => Reference<AstNode>): T {\r\n    const copy: GenericAstNode = { $type: node.$type };\r\n\r\n    for (const [name, value] of Object.entries(node)) {\r\n        if (!name.startsWith('$')) {\r\n            if (isAstNode(value)) {\r\n                copy[name] = copyAstNode(value, buildReference);\r\n            } else if (isReference(value)) {\r\n                copy[name] = buildReference(\r\n                    copy,\r\n                    name,\r\n                    value.$refNode,\r\n                    value.$refText\r\n                );\r\n            } else if (Array.isArray(value)) {\r\n                const copiedArray: unknown[] = [];\r\n                for (const element of value) {\r\n                    if (isAstNode(element)) {\r\n                        copiedArray.push(copyAstNode(element, buildReference));\r\n                    } else if (isReference(element)) {\r\n                        copiedArray.push(\r\n                            buildReference(\r\n                                copy,\r\n                                name,\r\n                                element.$refNode,\r\n                                element.$refText\r\n                            )\r\n                        );\r\n                    } else {\r\n                        copiedArray.push(element);\r\n                    }\r\n                }\r\n                copy[name] = copiedArray;\r\n            } else {\r\n                copy[name] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    linkContentToContainer(copy);\r\n    return copy as unknown as T;\r\n}\r\n","/******************************************************************************\r\n * This file was generated by langium-cli 3.3.0.\r\n * DO NOT EDIT MANUALLY!\r\n ******************************************************************************/\r\n\r\n/* eslint-disable */\r\nimport type { AstNode, Reference, ReferenceInfo, TypeMetaData } from '../../syntax-tree.js';\r\nimport { AbstractAstReflection } from '../../syntax-tree.js';\r\n\r\nexport const LangiumGrammarTerminals = {\r\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\r\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\r\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\r\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\r\n    WS: /\\s+/,\r\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\r\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\r\n};\r\n\r\nexport type LangiumGrammarTerminalNames = keyof typeof LangiumGrammarTerminals;\r\n\r\nexport type LangiumGrammarKeywordNames = \r\n    | \"!\"\r\n    | \"&\"\r\n    | \"(\"\r\n    | \")\"\r\n    | \"*\"\r\n    | \"+\"\r\n    | \"+=\"\r\n    | \",\"\r\n    | \"->\"\r\n    | \".\"\r\n    | \"..\"\r\n    | \":\"\r\n    | \";\"\r\n    | \"<\"\r\n    | \"=\"\r\n    | \"=>\"\r\n    | \">\"\r\n    | \"?\"\r\n    | \"?!\"\r\n    | \"?<!\"\r\n    | \"?<=\"\r\n    | \"?=\"\r\n    | \"@\"\r\n    | \"Date\"\r\n    | \"EOF\"\r\n    | \"[\"\r\n    | \"]\"\r\n    | \"bigint\"\r\n    | \"boolean\"\r\n    | \"current\"\r\n    | \"entry\"\r\n    | \"extends\"\r\n    | \"false\"\r\n    | \"fragment\"\r\n    | \"grammar\"\r\n    | \"hidden\"\r\n    | \"import\"\r\n    | \"infer\"\r\n    | \"infers\"\r\n    | \"interface\"\r\n    | \"number\"\r\n    | \"returns\"\r\n    | \"string\"\r\n    | \"terminal\"\r\n    | \"true\"\r\n    | \"type\"\r\n    | \"with\"\r\n    | \"{\"\r\n    | \"|\"\r\n    | \"}\";\r\n\r\nexport type LangiumGrammarTokenNames = LangiumGrammarTerminalNames | LangiumGrammarKeywordNames;\r\n\r\nexport type AbstractRule = ParserRule | TerminalRule;\r\n\r\nexport const AbstractRule = 'AbstractRule';\r\n\r\nexport function isAbstractRule(item: unknown): item is AbstractRule {\r\n    return reflection.isInstance(item, AbstractRule);\r\n}\r\n\r\nexport type AbstractType = InferredType | Interface | ParserRule | Type;\r\n\r\nexport const AbstractType = 'AbstractType';\r\n\r\nexport function isAbstractType(item: unknown): item is AbstractType {\r\n    return reflection.isInstance(item, AbstractType);\r\n}\r\n\r\nexport type Condition = BooleanLiteral | Conjunction | Disjunction | Negation | ParameterReference;\r\n\r\nexport const Condition = 'Condition';\r\n\r\nexport function isCondition(item: unknown): item is Condition {\r\n    return reflection.isInstance(item, Condition);\r\n}\r\n\r\nexport type FeatureName = 'current' | 'entry' | 'extends' | 'false' | 'fragment' | 'grammar' | 'hidden' | 'import' | 'infer' | 'infers' | 'interface' | 'returns' | 'terminal' | 'true' | 'type' | 'with' | PrimitiveType | string;\r\n\r\nexport function isFeatureName(item: unknown): item is FeatureName {\r\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\r\n}\r\n\r\nexport type PrimitiveType = 'Date' | 'bigint' | 'boolean' | 'number' | 'string';\r\n\r\nexport function isPrimitiveType(item: unknown): item is PrimitiveType {\r\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\r\n}\r\n\r\nexport type TypeDefinition = ArrayType | ReferenceType | SimpleType | UnionType;\r\n\r\nexport const TypeDefinition = 'TypeDefinition';\r\n\r\nexport function isTypeDefinition(item: unknown): item is TypeDefinition {\r\n    return reflection.isInstance(item, TypeDefinition);\r\n}\r\n\r\nexport type ValueLiteral = ArrayLiteral | BooleanLiteral | NumberLiteral | StringLiteral;\r\n\r\nexport const ValueLiteral = 'ValueLiteral';\r\n\r\nexport function isValueLiteral(item: unknown): item is ValueLiteral {\r\n    return reflection.isInstance(item, ValueLiteral);\r\n}\r\n\r\nexport interface AbstractElement extends AstNode {\r\n    readonly $type: 'AbstractElement' | 'Action' | 'Alternatives' | 'Assignment' | 'CharacterRange' | 'CrossReference' | 'EndOfFile' | 'Group' | 'Keyword' | 'NegatedToken' | 'RegexToken' | 'RuleCall' | 'TerminalAlternatives' | 'TerminalGroup' | 'TerminalRuleCall' | 'UnorderedGroup' | 'UntilToken' | 'Wildcard';\r\n    cardinality?: '*' | '+' | '?';\r\n    lookahead?: '?!' | '?<!' | '?<=' | '?=';\r\n}\r\n\r\nexport const AbstractElement = 'AbstractElement';\r\n\r\nexport function isAbstractElement(item: unknown): item is AbstractElement {\r\n    return reflection.isInstance(item, AbstractElement);\r\n}\r\n\r\nexport interface ArrayLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'ArrayLiteral';\r\n    elements: Array<ValueLiteral>;\r\n}\r\n\r\nexport const ArrayLiteral = 'ArrayLiteral';\r\n\r\nexport function isArrayLiteral(item: unknown): item is ArrayLiteral {\r\n    return reflection.isInstance(item, ArrayLiteral);\r\n}\r\n\r\nexport interface ArrayType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'ArrayType';\r\n    elementType: TypeDefinition;\r\n}\r\n\r\nexport const ArrayType = 'ArrayType';\r\n\r\nexport function isArrayType(item: unknown): item is ArrayType {\r\n    return reflection.isInstance(item, ArrayType);\r\n}\r\n\r\nexport interface BooleanLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | Conjunction | Disjunction | Group | NamedArgument | Negation | TypeAttribute;\r\n    readonly $type: 'BooleanLiteral';\r\n    true: boolean;\r\n}\r\n\r\nexport const BooleanLiteral = 'BooleanLiteral';\r\n\r\nexport function isBooleanLiteral(item: unknown): item is BooleanLiteral {\r\n    return reflection.isInstance(item, BooleanLiteral);\r\n}\r\n\r\nexport interface Conjunction extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Conjunction';\r\n    left: Condition;\r\n    right: Condition;\r\n}\r\n\r\nexport const Conjunction = 'Conjunction';\r\n\r\nexport function isConjunction(item: unknown): item is Conjunction {\r\n    return reflection.isInstance(item, Conjunction);\r\n}\r\n\r\nexport interface Disjunction extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Disjunction';\r\n    left: Condition;\r\n    right: Condition;\r\n}\r\n\r\nexport const Disjunction = 'Disjunction';\r\n\r\nexport function isDisjunction(item: unknown): item is Disjunction {\r\n    return reflection.isInstance(item, Disjunction);\r\n}\r\n\r\nexport interface Grammar extends AstNode {\r\n    readonly $type: 'Grammar';\r\n    definesHiddenTokens: boolean;\r\n    hiddenTokens: Array<Reference<AbstractRule>>;\r\n    imports: Array<GrammarImport>;\r\n    interfaces: Array<Interface>;\r\n    isDeclared: boolean;\r\n    name?: string;\r\n    rules: Array<AbstractRule>;\r\n    types: Array<Type>;\r\n    usedGrammars: Array<Reference<Grammar>>;\r\n}\r\n\r\nexport const Grammar = 'Grammar';\r\n\r\nexport function isGrammar(item: unknown): item is Grammar {\r\n    return reflection.isInstance(item, Grammar);\r\n}\r\n\r\nexport interface GrammarImport extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'GrammarImport';\r\n    path: string;\r\n}\r\n\r\nexport const GrammarImport = 'GrammarImport';\r\n\r\nexport function isGrammarImport(item: unknown): item is GrammarImport {\r\n    return reflection.isInstance(item, GrammarImport);\r\n}\r\n\r\nexport interface InferredType extends AstNode {\r\n    readonly $container: Action | ParserRule;\r\n    readonly $type: 'InferredType';\r\n    name: string;\r\n}\r\n\r\nexport const InferredType = 'InferredType';\r\n\r\nexport function isInferredType(item: unknown): item is InferredType {\r\n    return reflection.isInstance(item, InferredType);\r\n}\r\n\r\nexport interface Interface extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'Interface';\r\n    attributes: Array<TypeAttribute>;\r\n    name: string;\r\n    superTypes: Array<Reference<AbstractType>>;\r\n}\r\n\r\nexport const Interface = 'Interface';\r\n\r\nexport function isInterface(item: unknown): item is Interface {\r\n    return reflection.isInstance(item, Interface);\r\n}\r\n\r\nexport interface NamedArgument extends AstNode {\r\n    readonly $container: RuleCall;\r\n    readonly $type: 'NamedArgument';\r\n    calledByName: boolean;\r\n    parameter?: Reference<Parameter>;\r\n    value: Condition;\r\n}\r\n\r\nexport const NamedArgument = 'NamedArgument';\r\n\r\nexport function isNamedArgument(item: unknown): item is NamedArgument {\r\n    return reflection.isInstance(item, NamedArgument);\r\n}\r\n\r\nexport interface Negation extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Negation';\r\n    value: Condition;\r\n}\r\n\r\nexport const Negation = 'Negation';\r\n\r\nexport function isNegation(item: unknown): item is Negation {\r\n    return reflection.isInstance(item, Negation);\r\n}\r\n\r\nexport interface NumberLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'NumberLiteral';\r\n    value: number;\r\n}\r\n\r\nexport const NumberLiteral = 'NumberLiteral';\r\n\r\nexport function isNumberLiteral(item: unknown): item is NumberLiteral {\r\n    return reflection.isInstance(item, NumberLiteral);\r\n}\r\n\r\nexport interface Parameter extends AstNode {\r\n    readonly $container: ParserRule;\r\n    readonly $type: 'Parameter';\r\n    name: string;\r\n}\r\n\r\nexport const Parameter = 'Parameter';\r\n\r\nexport function isParameter(item: unknown): item is Parameter {\r\n    return reflection.isInstance(item, Parameter);\r\n}\r\n\r\nexport interface ParameterReference extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'ParameterReference';\r\n    parameter: Reference<Parameter>;\r\n}\r\n\r\nexport const ParameterReference = 'ParameterReference';\r\n\r\nexport function isParameterReference(item: unknown): item is ParameterReference {\r\n    return reflection.isInstance(item, ParameterReference);\r\n}\r\n\r\nexport interface ParserRule extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'ParserRule';\r\n    dataType?: PrimitiveType;\r\n    definesHiddenTokens: boolean;\r\n    definition: AbstractElement;\r\n    entry: boolean;\r\n    fragment: boolean;\r\n    hiddenTokens: Array<Reference<AbstractRule>>;\r\n    inferredType?: InferredType;\r\n    name: string;\r\n    parameters: Array<Parameter>;\r\n    returnType?: Reference<AbstractType>;\r\n    wildcard: boolean;\r\n}\r\n\r\nexport const ParserRule = 'ParserRule';\r\n\r\nexport function isParserRule(item: unknown): item is ParserRule {\r\n    return reflection.isInstance(item, ParserRule);\r\n}\r\n\r\nexport interface ReferenceType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'ReferenceType';\r\n    referenceType: TypeDefinition;\r\n}\r\n\r\nexport const ReferenceType = 'ReferenceType';\r\n\r\nexport function isReferenceType(item: unknown): item is ReferenceType {\r\n    return reflection.isInstance(item, ReferenceType);\r\n}\r\n\r\nexport interface ReturnType extends AstNode {\r\n    readonly $container: TerminalRule;\r\n    readonly $type: 'ReturnType';\r\n    name: PrimitiveType | string;\r\n}\r\n\r\nexport const ReturnType = 'ReturnType';\r\n\r\nexport function isReturnType(item: unknown): item is ReturnType {\r\n    return reflection.isInstance(item, ReturnType);\r\n}\r\n\r\nexport interface SimpleType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'SimpleType';\r\n    primitiveType?: PrimitiveType;\r\n    stringType?: string;\r\n    typeRef?: Reference<AbstractType>;\r\n}\r\n\r\nexport const SimpleType = 'SimpleType';\r\n\r\nexport function isSimpleType(item: unknown): item is SimpleType {\r\n    return reflection.isInstance(item, SimpleType);\r\n}\r\n\r\nexport interface StringLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'StringLiteral';\r\n    value: string;\r\n}\r\n\r\nexport const StringLiteral = 'StringLiteral';\r\n\r\nexport function isStringLiteral(item: unknown): item is StringLiteral {\r\n    return reflection.isInstance(item, StringLiteral);\r\n}\r\n\r\nexport interface TerminalRule extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'TerminalRule';\r\n    definition: AbstractElement;\r\n    fragment: boolean;\r\n    hidden: boolean;\r\n    name: string;\r\n    type?: ReturnType;\r\n}\r\n\r\nexport const TerminalRule = 'TerminalRule';\r\n\r\nexport function isTerminalRule(item: unknown): item is TerminalRule {\r\n    return reflection.isInstance(item, TerminalRule);\r\n}\r\n\r\nexport interface Type extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'Type';\r\n    name: string;\r\n    type: TypeDefinition;\r\n}\r\n\r\nexport const Type = 'Type';\r\n\r\nexport function isType(item: unknown): item is Type {\r\n    return reflection.isInstance(item, Type);\r\n}\r\n\r\nexport interface TypeAttribute extends AstNode {\r\n    readonly $container: Interface;\r\n    readonly $type: 'TypeAttribute';\r\n    defaultValue?: ValueLiteral;\r\n    isOptional: boolean;\r\n    name: FeatureName;\r\n    type: TypeDefinition;\r\n}\r\n\r\nexport const TypeAttribute = 'TypeAttribute';\r\n\r\nexport function isTypeAttribute(item: unknown): item is TypeAttribute {\r\n    return reflection.isInstance(item, TypeAttribute);\r\n}\r\n\r\nexport interface UnionType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'UnionType';\r\n    types: Array<TypeDefinition>;\r\n}\r\n\r\nexport const UnionType = 'UnionType';\r\n\r\nexport function isUnionType(item: unknown): item is UnionType {\r\n    return reflection.isInstance(item, UnionType);\r\n}\r\n\r\nexport interface Action extends AbstractElement {\r\n    readonly $type: 'Action';\r\n    feature?: FeatureName;\r\n    inferredType?: InferredType;\r\n    operator?: '+=' | '=';\r\n    type?: Reference<AbstractType>;\r\n}\r\n\r\nexport const Action = 'Action';\r\n\r\nexport function isAction(item: unknown): item is Action {\r\n    return reflection.isInstance(item, Action);\r\n}\r\n\r\nexport interface Alternatives extends AbstractElement {\r\n    readonly $type: 'Alternatives';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const Alternatives = 'Alternatives';\r\n\r\nexport function isAlternatives(item: unknown): item is Alternatives {\r\n    return reflection.isInstance(item, Alternatives);\r\n}\r\n\r\nexport interface Assignment extends AbstractElement {\r\n    readonly $type: 'Assignment';\r\n    feature: FeatureName;\r\n    operator: '+=' | '=' | '?=';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const Assignment = 'Assignment';\r\n\r\nexport function isAssignment(item: unknown): item is Assignment {\r\n    return reflection.isInstance(item, Assignment);\r\n}\r\n\r\nexport interface CharacterRange extends AbstractElement {\r\n    readonly $type: 'CharacterRange';\r\n    left: Keyword;\r\n    right?: Keyword;\r\n}\r\n\r\nexport const CharacterRange = 'CharacterRange';\r\n\r\nexport function isCharacterRange(item: unknown): item is CharacterRange {\r\n    return reflection.isInstance(item, CharacterRange);\r\n}\r\n\r\nexport interface CrossReference extends AbstractElement {\r\n    readonly $type: 'CrossReference';\r\n    deprecatedSyntax: boolean;\r\n    terminal?: AbstractElement;\r\n    type: Reference<AbstractType>;\r\n}\r\n\r\nexport const CrossReference = 'CrossReference';\r\n\r\nexport function isCrossReference(item: unknown): item is CrossReference {\r\n    return reflection.isInstance(item, CrossReference);\r\n}\r\n\r\nexport interface EndOfFile extends AbstractElement {\r\n    readonly $type: 'EndOfFile';\r\n}\r\n\r\nexport const EndOfFile = 'EndOfFile';\r\n\r\nexport function isEndOfFile(item: unknown): item is EndOfFile {\r\n    return reflection.isInstance(item, EndOfFile);\r\n}\r\n\r\nexport interface Group extends AbstractElement {\r\n    readonly $type: 'Group';\r\n    elements: Array<AbstractElement>;\r\n    guardCondition?: Condition;\r\n}\r\n\r\nexport const Group = 'Group';\r\n\r\nexport function isGroup(item: unknown): item is Group {\r\n    return reflection.isInstance(item, Group);\r\n}\r\n\r\nexport interface Keyword extends AbstractElement {\r\n    readonly $container: CharacterRange;\r\n    readonly $type: 'Keyword';\r\n    value: string;\r\n}\r\n\r\nexport const Keyword = 'Keyword';\r\n\r\nexport function isKeyword(item: unknown): item is Keyword {\r\n    return reflection.isInstance(item, Keyword);\r\n}\r\n\r\nexport interface NegatedToken extends AbstractElement {\r\n    readonly $type: 'NegatedToken';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const NegatedToken = 'NegatedToken';\r\n\r\nexport function isNegatedToken(item: unknown): item is NegatedToken {\r\n    return reflection.isInstance(item, NegatedToken);\r\n}\r\n\r\nexport interface RegexToken extends AbstractElement {\r\n    readonly $type: 'RegexToken';\r\n    regex: string;\r\n}\r\n\r\nexport const RegexToken = 'RegexToken';\r\n\r\nexport function isRegexToken(item: unknown): item is RegexToken {\r\n    return reflection.isInstance(item, RegexToken);\r\n}\r\n\r\nexport interface RuleCall extends AbstractElement {\r\n    readonly $type: 'RuleCall';\r\n    arguments: Array<NamedArgument>;\r\n    rule: Reference<AbstractRule>;\r\n}\r\n\r\nexport const RuleCall = 'RuleCall';\r\n\r\nexport function isRuleCall(item: unknown): item is RuleCall {\r\n    return reflection.isInstance(item, RuleCall);\r\n}\r\n\r\nexport interface TerminalAlternatives extends AbstractElement {\r\n    readonly $type: 'TerminalAlternatives';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const TerminalAlternatives = 'TerminalAlternatives';\r\n\r\nexport function isTerminalAlternatives(item: unknown): item is TerminalAlternatives {\r\n    return reflection.isInstance(item, TerminalAlternatives);\r\n}\r\n\r\nexport interface TerminalGroup extends AbstractElement {\r\n    readonly $type: 'TerminalGroup';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const TerminalGroup = 'TerminalGroup';\r\n\r\nexport function isTerminalGroup(item: unknown): item is TerminalGroup {\r\n    return reflection.isInstance(item, TerminalGroup);\r\n}\r\n\r\nexport interface TerminalRuleCall extends AbstractElement {\r\n    readonly $type: 'TerminalRuleCall';\r\n    rule: Reference<TerminalRule>;\r\n}\r\n\r\nexport const TerminalRuleCall = 'TerminalRuleCall';\r\n\r\nexport function isTerminalRuleCall(item: unknown): item is TerminalRuleCall {\r\n    return reflection.isInstance(item, TerminalRuleCall);\r\n}\r\n\r\nexport interface UnorderedGroup extends AbstractElement {\r\n    readonly $type: 'UnorderedGroup';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const UnorderedGroup = 'UnorderedGroup';\r\n\r\nexport function isUnorderedGroup(item: unknown): item is UnorderedGroup {\r\n    return reflection.isInstance(item, UnorderedGroup);\r\n}\r\n\r\nexport interface UntilToken extends AbstractElement {\r\n    readonly $type: 'UntilToken';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const UntilToken = 'UntilToken';\r\n\r\nexport function isUntilToken(item: unknown): item is UntilToken {\r\n    return reflection.isInstance(item, UntilToken);\r\n}\r\n\r\nexport interface Wildcard extends AbstractElement {\r\n    readonly $type: 'Wildcard';\r\n}\r\n\r\nexport const Wildcard = 'Wildcard';\r\n\r\nexport function isWildcard(item: unknown): item is Wildcard {\r\n    return reflection.isInstance(item, Wildcard);\r\n}\r\n\r\nexport type LangiumGrammarAstType = {\r\n    AbstractElement: AbstractElement\r\n    AbstractRule: AbstractRule\r\n    AbstractType: AbstractType\r\n    Action: Action\r\n    Alternatives: Alternatives\r\n    ArrayLiteral: ArrayLiteral\r\n    ArrayType: ArrayType\r\n    Assignment: Assignment\r\n    BooleanLiteral: BooleanLiteral\r\n    CharacterRange: CharacterRange\r\n    Condition: Condition\r\n    Conjunction: Conjunction\r\n    CrossReference: CrossReference\r\n    Disjunction: Disjunction\r\n    EndOfFile: EndOfFile\r\n    Grammar: Grammar\r\n    GrammarImport: GrammarImport\r\n    Group: Group\r\n    InferredType: InferredType\r\n    Interface: Interface\r\n    Keyword: Keyword\r\n    NamedArgument: NamedArgument\r\n    NegatedToken: NegatedToken\r\n    Negation: Negation\r\n    NumberLiteral: NumberLiteral\r\n    Parameter: Parameter\r\n    ParameterReference: ParameterReference\r\n    ParserRule: ParserRule\r\n    ReferenceType: ReferenceType\r\n    RegexToken: RegexToken\r\n    ReturnType: ReturnType\r\n    RuleCall: RuleCall\r\n    SimpleType: SimpleType\r\n    StringLiteral: StringLiteral\r\n    TerminalAlternatives: TerminalAlternatives\r\n    TerminalGroup: TerminalGroup\r\n    TerminalRule: TerminalRule\r\n    TerminalRuleCall: TerminalRuleCall\r\n    Type: Type\r\n    TypeAttribute: TypeAttribute\r\n    TypeDefinition: TypeDefinition\r\n    UnionType: UnionType\r\n    UnorderedGroup: UnorderedGroup\r\n    UntilToken: UntilToken\r\n    ValueLiteral: ValueLiteral\r\n    Wildcard: Wildcard\r\n}\r\n\r\nexport class LangiumGrammarAstReflection extends AbstractAstReflection {\r\n\r\n    getAllTypes(): string[] {\r\n        return [AbstractElement, AbstractRule, AbstractType, Action, Alternatives, ArrayLiteral, ArrayType, Assignment, BooleanLiteral, CharacterRange, Condition, Conjunction, CrossReference, Disjunction, EndOfFile, Grammar, GrammarImport, Group, InferredType, Interface, Keyword, NamedArgument, NegatedToken, Negation, NumberLiteral, Parameter, ParameterReference, ParserRule, ReferenceType, RegexToken, ReturnType, RuleCall, SimpleType, StringLiteral, TerminalAlternatives, TerminalGroup, TerminalRule, TerminalRuleCall, Type, TypeAttribute, TypeDefinition, UnionType, UnorderedGroup, UntilToken, ValueLiteral, Wildcard];\r\n    }\r\n\r\n    protected override computeIsSubtype(subtype: string, supertype: string): boolean {\r\n        switch (subtype) {\r\n            case Action:\r\n            case Alternatives:\r\n            case Assignment:\r\n            case CharacterRange:\r\n            case CrossReference:\r\n            case EndOfFile:\r\n            case Group:\r\n            case Keyword:\r\n            case NegatedToken:\r\n            case RegexToken:\r\n            case RuleCall:\r\n            case TerminalAlternatives:\r\n            case TerminalGroup:\r\n            case TerminalRuleCall:\r\n            case UnorderedGroup:\r\n            case UntilToken:\r\n            case Wildcard: {\r\n                return this.isSubtype(AbstractElement, supertype);\r\n            }\r\n            case ArrayLiteral:\r\n            case NumberLiteral:\r\n            case StringLiteral: {\r\n                return this.isSubtype(ValueLiteral, supertype);\r\n            }\r\n            case ArrayType:\r\n            case ReferenceType:\r\n            case SimpleType:\r\n            case UnionType: {\r\n                return this.isSubtype(TypeDefinition, supertype);\r\n            }\r\n            case BooleanLiteral: {\r\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\r\n            }\r\n            case Conjunction:\r\n            case Disjunction:\r\n            case Negation:\r\n            case ParameterReference: {\r\n                return this.isSubtype(Condition, supertype);\r\n            }\r\n            case InferredType:\r\n            case Interface:\r\n            case Type: {\r\n                return this.isSubtype(AbstractType, supertype);\r\n            }\r\n            case ParserRule: {\r\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\r\n            }\r\n            case TerminalRule: {\r\n                return this.isSubtype(AbstractRule, supertype);\r\n            }\r\n            default: {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    getReferenceType(refInfo: ReferenceInfo): string {\r\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\r\n        switch (referenceId) {\r\n            case 'Action:type':\r\n            case 'CrossReference:type':\r\n            case 'Interface:superTypes':\r\n            case 'ParserRule:returnType':\r\n            case 'SimpleType:typeRef': {\r\n                return AbstractType;\r\n            }\r\n            case 'Grammar:hiddenTokens':\r\n            case 'ParserRule:hiddenTokens':\r\n            case 'RuleCall:rule': {\r\n                return AbstractRule;\r\n            }\r\n            case 'Grammar:usedGrammars': {\r\n                return Grammar;\r\n            }\r\n            case 'NamedArgument:parameter':\r\n            case 'ParameterReference:parameter': {\r\n                return Parameter;\r\n            }\r\n            case 'TerminalRuleCall:rule': {\r\n                return TerminalRule;\r\n            }\r\n            default: {\r\n                throw new Error(`${referenceId} is not a valid reference id.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    getTypeMetaData(type: string): TypeMetaData {\r\n        switch (type) {\r\n            case AbstractElement: {\r\n                return {\r\n                    name: AbstractElement,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case ArrayLiteral: {\r\n                return {\r\n                    name: ArrayLiteral,\r\n                    properties: [\r\n                        { name: 'elements', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case ArrayType: {\r\n                return {\r\n                    name: ArrayType,\r\n                    properties: [\r\n                        { name: 'elementType' }\r\n                    ]\r\n                };\r\n            }\r\n            case BooleanLiteral: {\r\n                return {\r\n                    name: BooleanLiteral,\r\n                    properties: [\r\n                        { name: 'true', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case Conjunction: {\r\n                return {\r\n                    name: Conjunction,\r\n                    properties: [\r\n                        { name: 'left' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case Disjunction: {\r\n                return {\r\n                    name: Disjunction,\r\n                    properties: [\r\n                        { name: 'left' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case Grammar: {\r\n                return {\r\n                    name: Grammar,\r\n                    properties: [\r\n                        { name: 'definesHiddenTokens', defaultValue: false },\r\n                        { name: 'hiddenTokens', defaultValue: [] },\r\n                        { name: 'imports', defaultValue: [] },\r\n                        { name: 'interfaces', defaultValue: [] },\r\n                        { name: 'isDeclared', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'rules', defaultValue: [] },\r\n                        { name: 'types', defaultValue: [] },\r\n                        { name: 'usedGrammars', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case GrammarImport: {\r\n                return {\r\n                    name: GrammarImport,\r\n                    properties: [\r\n                        { name: 'path' }\r\n                    ]\r\n                };\r\n            }\r\n            case InferredType: {\r\n                return {\r\n                    name: InferredType,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case Interface: {\r\n                return {\r\n                    name: Interface,\r\n                    properties: [\r\n                        { name: 'attributes', defaultValue: [] },\r\n                        { name: 'name' },\r\n                        { name: 'superTypes', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case NamedArgument: {\r\n                return {\r\n                    name: NamedArgument,\r\n                    properties: [\r\n                        { name: 'calledByName', defaultValue: false },\r\n                        { name: 'parameter' },\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case Negation: {\r\n                return {\r\n                    name: Negation,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case NumberLiteral: {\r\n                return {\r\n                    name: NumberLiteral,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case Parameter: {\r\n                return {\r\n                    name: Parameter,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case ParameterReference: {\r\n                return {\r\n                    name: ParameterReference,\r\n                    properties: [\r\n                        { name: 'parameter' }\r\n                    ]\r\n                };\r\n            }\r\n            case ParserRule: {\r\n                return {\r\n                    name: ParserRule,\r\n                    properties: [\r\n                        { name: 'dataType' },\r\n                        { name: 'definesHiddenTokens', defaultValue: false },\r\n                        { name: 'definition' },\r\n                        { name: 'entry', defaultValue: false },\r\n                        { name: 'fragment', defaultValue: false },\r\n                        { name: 'hiddenTokens', defaultValue: [] },\r\n                        { name: 'inferredType' },\r\n                        { name: 'name' },\r\n                        { name: 'parameters', defaultValue: [] },\r\n                        { name: 'returnType' },\r\n                        { name: 'wildcard', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case ReferenceType: {\r\n                return {\r\n                    name: ReferenceType,\r\n                    properties: [\r\n                        { name: 'referenceType' }\r\n                    ]\r\n                };\r\n            }\r\n            case ReturnType: {\r\n                return {\r\n                    name: ReturnType,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case SimpleType: {\r\n                return {\r\n                    name: SimpleType,\r\n                    properties: [\r\n                        { name: 'primitiveType' },\r\n                        { name: 'stringType' },\r\n                        { name: 'typeRef' }\r\n                    ]\r\n                };\r\n            }\r\n            case StringLiteral: {\r\n                return {\r\n                    name: StringLiteral,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalRule: {\r\n                return {\r\n                    name: TerminalRule,\r\n                    properties: [\r\n                        { name: 'definition' },\r\n                        { name: 'fragment', defaultValue: false },\r\n                        { name: 'hidden', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case Type: {\r\n                return {\r\n                    name: Type,\r\n                    properties: [\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case TypeAttribute: {\r\n                return {\r\n                    name: TypeAttribute,\r\n                    properties: [\r\n                        { name: 'defaultValue' },\r\n                        { name: 'isOptional', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case UnionType: {\r\n                return {\r\n                    name: UnionType,\r\n                    properties: [\r\n                        { name: 'types', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case Action: {\r\n                return {\r\n                    name: Action,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'feature' },\r\n                        { name: 'inferredType' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'operator' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case Alternatives: {\r\n                return {\r\n                    name: Alternatives,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Assignment: {\r\n                return {\r\n                    name: Assignment,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'feature' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'operator' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case CharacterRange: {\r\n                return {\r\n                    name: CharacterRange,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'left' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case CrossReference: {\r\n                return {\r\n                    name: CrossReference,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'deprecatedSyntax', defaultValue: false },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case EndOfFile: {\r\n                return {\r\n                    name: EndOfFile,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Group: {\r\n                return {\r\n                    name: Group,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'guardCondition' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Keyword: {\r\n                return {\r\n                    name: Keyword,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case NegatedToken: {\r\n                return {\r\n                    name: NegatedToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case RegexToken: {\r\n                return {\r\n                    name: RegexToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'regex' }\r\n                    ]\r\n                };\r\n            }\r\n            case RuleCall: {\r\n                return {\r\n                    name: RuleCall,\r\n                    properties: [\r\n                        { name: 'arguments', defaultValue: [] },\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'rule' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalAlternatives: {\r\n                return {\r\n                    name: TerminalAlternatives,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalGroup: {\r\n                return {\r\n                    name: TerminalGroup,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalRuleCall: {\r\n                return {\r\n                    name: TerminalRuleCall,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'rule' }\r\n                    ]\r\n                };\r\n            }\r\n            case UnorderedGroup: {\r\n                return {\r\n                    name: UnorderedGroup,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case UntilToken: {\r\n                return {\r\n                    name: UntilToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case Wildcard: {\r\n                return {\r\n                    name: Wildcard,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            default: {\r\n                return {\r\n                    name: type,\r\n                    properties: []\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const reflection = new LangiumGrammarAstReflection();\r\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  GitGraphGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-4KMFLZZN.mjs\";\n\n// src/language/gitGraph/module.ts\nimport {\n  inject,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  EmptyFileSystem\n} from \"langium\";\n\n// src/language/gitGraph/tokenBuilder.ts\nvar GitGraphTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"GitGraphTokenBuilder\");\n  }\n  constructor() {\n    super([\"gitGraph\"]);\n  }\n};\n\n// src/language/gitGraph/module.ts\nvar GitGraphModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new GitGraphTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createGitGraphServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const GitGraph = inject(\n    createDefaultCoreModule({ shared }),\n    GitGraphGeneratedModule,\n    GitGraphModule\n  );\n  shared.ServiceRegistry.register(GitGraph);\n  return { shared, GitGraph };\n}\n__name(createGitGraphServices, \"createGitGraphServices\");\n\nexport {\n  GitGraphModule,\n  createGitGraphServices\n};\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = exports.Event = void 0;\nconst ral_1 = require(\"./ral\");\nvar Event;\n(function (Event) {\n    const _disposable = { dispose() { } };\n    Event.None = function () { return _disposable; };\n})(Event || (exports.Event = Event = {}));\nclass CallbackList {\n    add(callback, context = null, bucket) {\n        if (!this._callbacks) {\n            this._callbacks = [];\n            this._contexts = [];\n        }\n        this._callbacks.push(callback);\n        this._contexts.push(context);\n        if (Array.isArray(bucket)) {\n            bucket.push({ dispose: () => this.remove(callback, context) });\n        }\n    }\n    remove(callback, context = null) {\n        if (!this._callbacks) {\n            return;\n        }\n        let foundCallbackWithDifferentContext = false;\n        for (let i = 0, len = this._callbacks.length; i < len; i++) {\n            if (this._callbacks[i] === callback) {\n                if (this._contexts[i] === context) {\n                    // callback & context match => remove it\n                    this._callbacks.splice(i, 1);\n                    this._contexts.splice(i, 1);\n                    return;\n                }\n                else {\n                    foundCallbackWithDifferentContext = true;\n                }\n            }\n        }\n        if (foundCallbackWithDifferentContext) {\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\n        }\n    }\n    invoke(...args) {\n        if (!this._callbacks) {\n            return [];\n        }\n        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\n        for (let i = 0, len = callbacks.length; i < len; i++) {\n            try {\n                ret.push(callbacks[i].apply(contexts[i], args));\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                (0, ral_1.default)().console.error(e);\n            }\n        }\n        return ret;\n    }\n    isEmpty() {\n        return !this._callbacks || this._callbacks.length === 0;\n    }\n    dispose() {\n        this._callbacks = undefined;\n        this._contexts = undefined;\n    }\n}\nclass Emitter {\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArgs, disposables) => {\n                if (!this._callbacks) {\n                    this._callbacks = new CallbackList();\n                }\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                this._callbacks.add(listener, thisArgs);\n                const result = {\n                    dispose: () => {\n                        if (!this._callbacks) {\n                            // disposable is disposed after emitter is disposed.\n                            return;\n                        }\n                        this._callbacks.remove(listener, thisArgs);\n                        result.dispose = Emitter._noop;\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n                            this._options.onLastListenerRemove(this);\n                        }\n                    }\n                };\n                if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        if (this._callbacks) {\n            this._callbacks.invoke.call(this._callbacks, event);\n        }\n    }\n    dispose() {\n        if (this._callbacks) {\n            this._callbacks.dispose();\n            this._callbacks = undefined;\n        }\n    }\n}\nexports.Emitter = Emitter;\nEmitter._noop = function () { };\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  TreemapGeneratedModule,\n  __name\n} from \"./chunk-4KMFLZZN.mjs\";\n\n// src/language/treemap/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/treemap/tokenBuilder.ts\nvar TreemapTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"TreemapTokenBuilder\");\n  }\n  constructor() {\n    super([\"treemap\"]);\n  }\n};\n\n// src/language/treemap/valueConverter.ts\nvar classDefRegex = /classDef\\s+([A-Z_a-z]\\w+)(?:\\s+([^\\n\\r;]*))?;?/;\nvar TreemapValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"TreemapValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"NUMBER2\") {\n      return parseFloat(input.replace(/,/g, \"\"));\n    } else if (rule.name === \"SEPARATOR\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"STRING2\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"INDENTATION\") {\n      return input.length;\n    } else if (rule.name === \"ClassDef\") {\n      if (typeof input !== \"string\") {\n        return input;\n      }\n      const match = classDefRegex.exec(input);\n      if (match) {\n        return {\n          $type: \"ClassDefStatement\",\n          className: match[1],\n          styleText: match[2] || void 0\n        };\n      }\n    }\n    return void 0;\n  }\n};\n\n// src/language/treemap/treemap-validator.ts\nfunction registerValidationChecks(services) {\n  const validator = services.validation.TreemapValidator;\n  const registry = services.validation.ValidationRegistry;\n  if (registry) {\n    const checks = {\n      Treemap: validator.checkSingleRoot.bind(validator)\n      // Remove unused validation for TreemapRow\n    };\n    registry.register(checks, validator);\n  }\n}\n__name(registerValidationChecks, \"registerValidationChecks\");\nvar TreemapValidator = class {\n  static {\n    __name(this, \"TreemapValidator\");\n  }\n  /**\n   * Validates that a treemap has only one root node.\n   * A root node is defined as a node that has no indentation.\n   */\n  checkSingleRoot(doc, accept) {\n    let rootNodeIndentation;\n    for (const row of doc.TreemapRows) {\n      if (!row.item) {\n        continue;\n      }\n      if (rootNodeIndentation === void 0 && // Check if this is a root node (no indentation)\n      row.indent === void 0) {\n        rootNodeIndentation = 0;\n      } else if (row.indent === void 0) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      } else if (rootNodeIndentation !== void 0 && rootNodeIndentation >= parseInt(row.indent, 10)) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      }\n    }\n  }\n};\n\n// src/language/treemap/module.ts\nvar TreemapModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new TreemapTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new TreemapValueConverter(), \"ValueConverter\")\n  },\n  validation: {\n    TreemapValidator: /* @__PURE__ */ __name(() => new TreemapValidator(), \"TreemapValidator\")\n  }\n};\nfunction createTreemapServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Treemap = inject(\n    createDefaultCoreModule({ shared }),\n    TreemapGeneratedModule,\n    TreemapModule\n  );\n  shared.ServiceRegistry.register(Treemap);\n  registerValidationChecks(Treemap);\n  return { shared, Treemap };\n}\n__name(createTreemapServices, \"createTreemapServices\");\n\nexport {\n  TreemapModule,\n  createTreemapServices\n};\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { assertUnreachable } from '../utils/errors.js';\r\nimport * as ast from '../languages/generated/ast.js';\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { isCompositeCstNode } from '../syntax-tree.js';\r\nimport { getContainerOfType, streamAllContents } from './ast-utils.js';\r\nimport { streamCst } from './cst-utils.js';\r\nimport { escapeRegExp, isWhitespace } from './regexp-utils.js';\r\n\r\n/**\r\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\r\n * the result is `undefined`.\r\n */\r\nexport function getEntryRule(grammar: ast.Grammar): ast.ParserRule | undefined {\r\n    return grammar.rules.find(e => ast.isParserRule(e) && e.entry) as ast.ParserRule;\r\n}\r\n\r\n/**\r\n * Returns all hidden terminal rules of the given grammar, if any.\r\n */\r\nexport function getHiddenRules(grammar: ast.Grammar) {\r\n    return grammar.rules.filter((e): e is ast.TerminalRule => ast.isTerminalRule(e) && e.hidden);\r\n}\r\n\r\n/**\r\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\r\n *\r\n * @param grammar The grammar that contains all rules\r\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\r\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\r\n *      this function returns all rules of the specified grammar.\r\n */\r\nexport function getAllReachableRules(grammar: ast.Grammar, allTerminals: boolean): Set<ast.AbstractRule> {\r\n    const ruleNames = new Set<string>();\r\n    const entryRule = getEntryRule(grammar);\r\n    if (!entryRule) {\r\n        return new Set(grammar.rules);\r\n    }\r\n\r\n    const topMostRules = [entryRule as ast.AbstractRule].concat(getHiddenRules(grammar));\r\n    for (const rule of topMostRules) {\r\n        ruleDfs(rule, ruleNames, allTerminals);\r\n    }\r\n\r\n    const rules = new Set<ast.AbstractRule>();\r\n    for (const rule of grammar.rules) {\r\n        if (ruleNames.has(rule.name) || (ast.isTerminalRule(rule) && rule.hidden)) {\r\n            rules.add(rule);\r\n        }\r\n    }\r\n    return rules;\r\n}\r\n\r\nfunction ruleDfs(rule: ast.AbstractRule, visitedSet: Set<string>, allTerminals: boolean): void {\r\n    visitedSet.add(rule.name);\r\n    streamAllContents(rule).forEach(node => {\r\n        if (ast.isRuleCall(node) || (allTerminals && ast.isTerminalRuleCall(node))) {\r\n            const refRule = node.rule.ref;\r\n            if (refRule && !visitedSet.has(refRule.name)) {\r\n                ruleDfs(refRule, visitedSet, allTerminals);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\r\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\r\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\r\n *\r\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\r\n * and cannot be inferred.\r\n */\r\nexport function getCrossReferenceTerminal(crossRef: ast.CrossReference): ast.AbstractElement | undefined {\r\n    if (crossRef.terminal) {\r\n        return crossRef.terminal;\r\n    } else if (crossRef.type.ref) {\r\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\r\n        return nameAssigment?.terminal;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\r\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\r\n * that contains visible characters is considered a comment.\r\n */\r\nexport function isCommentTerminal(terminalRule: ast.TerminalRule): boolean {\r\n    return terminalRule.hidden && !isWhitespace(terminalRegex(terminalRule));\r\n}\r\n\r\n/**\r\n * Find all CST nodes within the given node that contribute to the specified property.\r\n *\r\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\r\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\r\n */\r\nexport function findNodesForProperty(node: CstNode | undefined, property: string | undefined): CstNode[] {\r\n    if (!node || !property) {\r\n        return [];\r\n    }\r\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\r\n}\r\n\r\n/**\r\n * Find a single CST node within the given node that contributes to the specified property.\r\n *\r\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\r\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\r\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\r\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\r\n *        the node with the specified index is returned.\r\n */\r\nexport function findNodeForProperty(node: CstNode | undefined, property: string | undefined, index?: number): CstNode | undefined {\r\n    if (!node || !property) {\r\n        return undefined;\r\n    }\r\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\r\n    if (nodes.length === 0) {\r\n        return undefined;\r\n    }\r\n    if (index !== undefined) {\r\n        index = Math.max(0, Math.min(index, nodes.length - 1));\r\n    } else {\r\n        index = 0;\r\n    }\r\n    return nodes[index];\r\n}\r\n\r\nfunction findNodesForPropertyInternal(node: CstNode, property: string, element: AstNode | undefined, first: boolean): CstNode[] {\r\n    if (!first) {\r\n        const nodeFeature = getContainerOfType(node.grammarSource, ast.isAssignment);\r\n        if (nodeFeature && nodeFeature.feature === property) {\r\n            return [node];\r\n        }\r\n    }\r\n    if (isCompositeCstNode(node) && node.astNode === element) {\r\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\r\n    }\r\n    return [];\r\n}\r\n\r\n/**\r\n * Find all CST nodes within the given node that correspond to the specified keyword.\r\n *\r\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\r\n * @param keyword A keyword as specified in the grammar.\r\n */\r\nexport function findNodesForKeyword(node: CstNode | undefined, keyword: string): CstNode[] {\r\n    if (!node) {\r\n        return [];\r\n    }\r\n    return findNodesForKeywordInternal(node, keyword, node?.astNode);\r\n}\r\n\r\n/**\r\n * Find a single CST node within the given node that corresponds to the specified keyword.\r\n *\r\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\r\n * @param keyword A keyword as specified in the grammar.\r\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\r\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\r\n *        the node with the specified index is returned.\r\n */\r\nexport function findNodeForKeyword(node: CstNode | undefined, keyword: string, index?: number): CstNode | undefined {\r\n    if (!node) {\r\n        return undefined;\r\n    }\r\n    const nodes = findNodesForKeywordInternal(node, keyword, node?.astNode);\r\n    if (nodes.length === 0) {\r\n        return undefined;\r\n    }\r\n    if (index !== undefined) {\r\n        index = Math.max(0, Math.min(index, nodes.length - 1));\r\n    } else {\r\n        index = 0;\r\n    }\r\n    return nodes[index];\r\n}\r\n\r\nexport function findNodesForKeywordInternal(node: CstNode, keyword: string, element: AstNode | undefined): CstNode[] {\r\n    if (node.astNode !== element) {\r\n        return [];\r\n    }\r\n    if (ast.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\r\n        return [node];\r\n    }\r\n    const treeIterator = streamCst(node).iterator();\r\n    let result: IteratorResult<CstNode>;\r\n    const keywordNodes: CstNode[] = [];\r\n    do {\r\n        result = treeIterator.next();\r\n        if (!result.done) {\r\n            const childNode = result.value;\r\n            if (childNode.astNode === element) {\r\n                if (ast.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\r\n                    keywordNodes.push(childNode);\r\n                }\r\n            } else {\r\n                treeIterator.prune();\r\n            }\r\n        }\r\n    } while (!result.done);\r\n    return keywordNodes;\r\n}\r\n\r\n/**\r\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\r\n * node is returned. If no assignment is found, the result is `undefined`.\r\n *\r\n * @param cstNode A CST node for which to find a property assignment.\r\n */\r\nexport function findAssignment(cstNode: CstNode): ast.Assignment | undefined {\r\n    const astNode = cstNode.astNode;\r\n    // Only search until the ast node of the parent cst node is no longer the original ast node\r\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\r\n    while (astNode === cstNode.container?.astNode) {\r\n        const assignment = getContainerOfType(cstNode.grammarSource, ast.isAssignment);\r\n        if (assignment) {\r\n            return assignment;\r\n        }\r\n        cstNode = cstNode.container;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\r\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\r\n * this function returns `undefined`.\r\n */\r\nexport function findNameAssignment(type: ast.AbstractType): ast.Assignment | undefined {\r\n    let startNode: AstNode = type;\r\n    if (ast.isInferredType(startNode)) {\r\n        // for inferred types, the location to start searching for the name-assignment is different\r\n        if (ast.isAction(startNode.$container)) {\r\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\r\n            startNode = startNode.$container.$container!;\r\n        } else if (ast.isParserRule(startNode.$container)) {\r\n            // investigate the parser rule with the explicitly inferred type\r\n            startNode = startNode.$container;\r\n        } else {\r\n            assertUnreachable(startNode.$container);\r\n        }\r\n    }\r\n    return findNameAssignmentInternal(type, startNode, new Map());\r\n}\r\n\r\nfunction findNameAssignmentInternal(type: ast.AbstractType, startNode: AstNode, cache: Map<ast.AbstractType, ast.Assignment | undefined>): ast.Assignment | undefined {\r\n    // the cache is only required to prevent infinite loops\r\n    function go(node: AstNode, refType: ast.AbstractType): ast.Assignment | undefined {\r\n        let childAssignment: ast.Assignment | undefined = undefined;\r\n        const parentAssignment = getContainerOfType(node, ast.isAssignment);\r\n        // No parent assignment implies unassigned rule call\r\n        if (!parentAssignment) {\r\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\r\n        }\r\n        cache.set(type, childAssignment);\r\n        return childAssignment;\r\n    }\r\n\r\n    if (cache.has(type)) {\r\n        return cache.get(type);\r\n    }\r\n    cache.set(type, undefined);\r\n    for (const node of streamAllContents(startNode)) {\r\n        if (ast.isAssignment(node) && node.feature.toLowerCase() === 'name') {\r\n            cache.set(type, node);\r\n            return node;\r\n        } else if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {\r\n            return go(node, node.rule.ref);\r\n        } else if (ast.isSimpleType(node) && node.typeRef?.ref) {\r\n            return go(node, node.typeRef.ref);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getActionAtElement(element: ast.AbstractElement): ast.Action | undefined {\r\n    const parent = element.$container;\r\n    if (ast.isGroup(parent)) {\r\n        const elements = parent.elements;\r\n        const index = elements.indexOf(element);\r\n        for (let i = index - 1; i >= 0; i--) {\r\n            const item = elements[i];\r\n            if (ast.isAction(item)) {\r\n                return item;\r\n            } else {\r\n                const action = streamAllContents(elements[i]).find(ast.isAction);\r\n                if (action) {\r\n                    return action;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (ast.isAbstractElement(parent)) {\r\n        return getActionAtElement(parent);\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport type Cardinality = '?' | '*' | '+' | undefined;\r\nexport type Operator = '=' | '+=' | '?=' | undefined;\r\n\r\nexport function isOptionalCardinality(cardinality?: Cardinality, element?: ast.AbstractElement): boolean {\r\n    return cardinality === '?' || cardinality === '*' || (ast.isGroup(element) && Boolean(element.guardCondition));\r\n}\r\n\r\nexport function isArrayCardinality(cardinality?: Cardinality): boolean {\r\n    return cardinality === '*' || cardinality === '+';\r\n}\r\n\r\nexport function isArrayOperator(operator?: Operator): boolean {\r\n    return operator === '+=';\r\n}\r\n\r\n/**\r\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\r\n * primitive return type like `number`, `boolean`, etc.\r\n */\r\nexport function isDataTypeRule(rule: ast.ParserRule): boolean {\r\n    return isDataTypeRuleInternal(rule, new Set());\r\n}\r\n\r\nfunction isDataTypeRuleInternal(rule: ast.ParserRule, visited: Set<ast.ParserRule>): boolean {\r\n    if (visited.has(rule)) {\r\n        return true;\r\n    } else {\r\n        visited.add(rule);\r\n    }\r\n    for (const node of streamAllContents(rule)) {\r\n        if (ast.isRuleCall(node)) {\r\n            if (!node.rule.ref) {\r\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\r\n                return false;\r\n            }\r\n            if (ast.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\r\n                return false;\r\n            }\r\n        } else if (ast.isAssignment(node)) {\r\n            return false;\r\n        } else if (ast.isAction(node)) {\r\n            return false;\r\n        }\r\n    }\r\n    return Boolean(rule.definition);\r\n}\r\n\r\nexport function isDataType(type: ast.Type): boolean {\r\n    return isDataTypeInternal(type.type, new Set());\r\n}\r\n\r\nfunction isDataTypeInternal(type: ast.TypeDefinition, visited: Set<ast.TypeDefinition>): boolean {\r\n    if (visited.has(type)) {\r\n        return true;\r\n    } else {\r\n        visited.add(type);\r\n    }\r\n    if (ast.isArrayType(type)) {\r\n        return false;\r\n    } else if (ast.isReferenceType(type)) {\r\n        return false;\r\n    } else if (ast.isUnionType(type)) {\r\n        return type.types.every(e => isDataTypeInternal(e, visited));\r\n    } else if (ast.isSimpleType(type)) {\r\n        if (type.primitiveType !== undefined) {\r\n            return true;\r\n        } else if (type.stringType !== undefined) {\r\n            return true;\r\n        } else if (type.typeRef !== undefined) {\r\n            const ref = type.typeRef.ref;\r\n            if (ast.isType(ref)) {\r\n                return isDataTypeInternal(ref.type, visited);\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function getExplicitRuleType(rule: ast.ParserRule): string | undefined {\r\n    if (rule.inferredType) {\r\n        return rule.inferredType.name;\r\n    } else if (rule.dataType) {\r\n        return rule.dataType;\r\n    } else if (rule.returnType) {\r\n        const refType = rule.returnType.ref;\r\n        if (refType) {\r\n            // check if we need to check Action as return type\r\n            if (ast.isParserRule(refType)) {\r\n                return refType.name;\r\n            } else if (ast.isInterface(refType) || ast.isType(refType)) {\r\n                return refType.name;\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getTypeName(type: ast.AbstractType | ast.Action): string {\r\n    if (ast.isParserRule(type)) {\r\n        return isDataTypeRule(type) ? type.name : getExplicitRuleType(type) ?? type.name;\r\n    } else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {\r\n        return type.name;\r\n    } else if (ast.isAction(type)) {\r\n        const actionType = getActionType(type);\r\n        if (actionType) {\r\n            return actionType;\r\n        }\r\n    } else if (ast.isInferredType(type)) {\r\n        return type.name;\r\n    }\r\n    throw new Error('Cannot get name of Unknown Type');\r\n}\r\n\r\nexport function getActionType(action: ast.Action): string | undefined {\r\n    if (action.inferredType) {\r\n        return action.inferredType.name;\r\n    } else if (action.type?.ref) {\r\n        return getTypeName(action.type.ref);\r\n    }\r\n    return undefined; // not inferring and not referencing a valid type\r\n}\r\n\r\n/**\r\n * This function is used at development time (for code generation and the internal type system) to get the type of the AST node produced by the given rule.\r\n * For data type rules, the name of the rule is returned,\r\n * e.g. \"INT_value returns number: MY_INT;\" returns \"INT_value\".\r\n * @param rule the given rule\r\n * @returns the name of the AST node type of the rule\r\n */\r\nexport function getRuleTypeName(rule: ast.AbstractRule): string {\r\n    if (ast.isTerminalRule(rule)) {\r\n        return rule.type?.name ?? 'string';\r\n    } else {\r\n        return isDataTypeRule(rule) ? rule.name : getExplicitRuleType(rule) ?? rule.name;\r\n    }\r\n}\r\n\r\n/**\r\n * This function is used at runtime to get the actual type of the values produced by the given rule at runtime.\r\n * For data type rules, the name of the declared return type of the rule is returned (if any),\r\n * e.g. \"INT_value returns number: MY_INT;\" returns \"number\".\r\n * @param rule the given rule\r\n * @returns the name of the type of the produced values of the rule at runtime\r\n */\r\nexport function getRuleType(rule: ast.AbstractRule): string {\r\n    if (ast.isTerminalRule(rule)) {\r\n        return rule.type?.name ?? 'string';\r\n    } else {\r\n        return getExplicitRuleType(rule) ?? rule.name;\r\n    }\r\n}\r\n\r\nexport function terminalRegex(terminalRule: ast.TerminalRule): RegExp {\r\n    const flags: Flags = {\r\n        s: false,\r\n        i: false,\r\n        u: false\r\n    };\r\n    const source = abstractElementToRegex(terminalRule.definition, flags);\r\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\r\n    return new RegExp(source, flagText);\r\n}\r\n\r\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\r\nconst WILDCARD = /[\\s\\S]/.source;\r\n\r\ntype Flags = {\r\n    s: boolean;\r\n    i: boolean;\r\n    u: boolean;\r\n}\r\n\r\nfunction abstractElementToRegex(element: ast.AbstractElement, flags?: Flags): string {\r\n    if (ast.isTerminalAlternatives(element)) {\r\n        return terminalAlternativesToRegex(element);\r\n    } else if (ast.isTerminalGroup(element)) {\r\n        return terminalGroupToRegex(element);\r\n    } else if (ast.isCharacterRange(element)) {\r\n        return characterRangeToRegex(element);\r\n    } else if (ast.isTerminalRuleCall(element)) {\r\n        const rule = element.rule.ref;\r\n        if (!rule) {\r\n            throw new Error('Missing rule reference.');\r\n        }\r\n        return withCardinality(abstractElementToRegex(rule.definition), {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead\r\n        });\r\n    } else if (ast.isNegatedToken(element)) {\r\n        return negateTokenToRegex(element);\r\n    } else if (ast.isUntilToken(element)) {\r\n        return untilTokenToRegex(element);\r\n    } else if (ast.isRegexToken(element)) {\r\n        const lastSlash = element.regex.lastIndexOf('/');\r\n        const source = element.regex.substring(1, lastSlash);\r\n        const regexFlags = element.regex.substring(lastSlash + 1);\r\n        if (flags) {\r\n            flags.i = regexFlags.includes('i');\r\n            flags.s = regexFlags.includes('s');\r\n            flags.u = regexFlags.includes('u');\r\n        }\r\n        return withCardinality(source, {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead,\r\n            wrap: false\r\n        });\r\n    } else if (ast.isWildcard(element)) {\r\n        return withCardinality(WILDCARD, {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead\r\n        });\r\n    } else {\r\n        throw new Error(`Invalid terminal element: ${element?.$type}`);\r\n    }\r\n}\r\n\r\nfunction terminalAlternativesToRegex(alternatives: ast.TerminalAlternatives): string {\r\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\r\n        cardinality: alternatives.cardinality,\r\n        lookahead: alternatives.lookahead\r\n    });\r\n}\r\n\r\nfunction terminalGroupToRegex(group: ast.TerminalGroup): string {\r\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\r\n        cardinality: group.cardinality,\r\n        lookahead: group.lookahead\r\n    });\r\n}\r\n\r\nfunction untilTokenToRegex(until: ast.UntilToken): string {\r\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\r\n        cardinality: until.cardinality,\r\n        lookahead: until.lookahead\r\n    });\r\n}\r\n\r\nfunction negateTokenToRegex(negate: ast.NegatedToken): string {\r\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\r\n        cardinality: negate.cardinality,\r\n        lookahead: negate.lookahead\r\n    });\r\n}\r\n\r\nfunction characterRangeToRegex(range: ast.CharacterRange): string {\r\n    if (range.right) {\r\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\r\n            cardinality: range.cardinality,\r\n            lookahead: range.lookahead,\r\n            wrap: false\r\n        });\r\n    }\r\n    return withCardinality(keywordToRegex(range.left), {\r\n        cardinality: range.cardinality,\r\n        lookahead: range.lookahead,\r\n        wrap: false\r\n    });\r\n}\r\n\r\nfunction keywordToRegex(keyword: ast.Keyword): string {\r\n    return escapeRegExp(keyword.value);\r\n}\r\n\r\nfunction withCardinality(regex: string, options: {\r\n    cardinality?: string\r\n    wrap?: boolean\r\n    lookahead?: string\r\n}): string {\r\n    if (options.wrap !== false || options.lookahead) {\r\n        regex = `(${options.lookahead ?? ''}${regex})`;\r\n    }\r\n    if (options.cardinality) {\r\n        return `${regex}${options.cardinality}`;\r\n    }\r\n    return regex;\r\n}\r\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  RadarGeneratedModule,\n  __name\n} from \"./chunk-4KMFLZZN.mjs\";\n\n// src/language/radar/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/radar/tokenBuilder.ts\nvar RadarTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"RadarTokenBuilder\");\n  }\n  constructor() {\n    super([\"radar-beta\"]);\n  }\n};\n\n// src/language/radar/module.ts\nvar RadarModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new RadarTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createRadarServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Radar = inject(\n    createDefaultCoreModule({ shared }),\n    RadarGeneratedModule,\n    RadarModule\n  );\n  shared.ServiceRegistry.register(Radar);\n  return { shared, Radar };\n}\n__name(createRadarServices, \"createRadarServices\");\n\nexport {\n  RadarModule,\n  createRadarServices\n};\n","import baseFlatten from './_baseFlatten.js';\nimport map from './map.js';\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nexport default flatMap;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { TokenType } from 'chevrotain';\r\nimport type { URI } from './utils/uri-utils.js';\r\nimport type { AbstractElement } from './languages/generated/ast.js';\r\nimport type { DocumentSegment, LangiumDocument } from './workspace/documents.js';\r\n\r\n/**\r\n * A node in the Abstract Syntax Tree (AST).\r\n */\r\nexport interface AstNode {\r\n    /** Every AST node has a type corresponding to what was specified in the grammar declaration. */\r\n    readonly $type: string;\r\n    /** The container node in the AST; every node except the root node has a container. */\r\n    readonly $container?: AstNode;\r\n    /** The property of the `$container` node that contains this node. This is either a direct reference or an array. */\r\n    readonly $containerProperty?: string;\r\n    /** In case `$containerProperty` is an array, the array index is stored here. */\r\n    readonly $containerIndex?: number;\r\n    /** The Concrete Syntax Tree (CST) node of the text range from which this node was parsed. */\r\n    readonly $cstNode?: CstNode;\r\n    /** The document containing the AST; only the root node has a direct reference to the document. */\r\n    readonly $document?: LangiumDocument;\r\n}\r\n\r\nexport function isAstNode(obj: unknown): obj is AstNode {\r\n    return typeof obj === 'object' && obj !== null && typeof (obj as AstNode).$type === 'string';\r\n}\r\n\r\nexport interface GenericAstNode extends AstNode {\r\n    [key: string]: unknown\r\n}\r\n\r\ntype SpecificNodeProperties<N extends AstNode> = keyof Omit<N, keyof AstNode | number | symbol>;\r\n\r\n/**\r\n * The property names of a given AST node type.\r\n */\r\nexport type Properties<N extends AstNode> = SpecificNodeProperties<N> extends never ? string : SpecificNodeProperties<N>\r\n\r\n/**\r\n * A cross-reference in the AST. Cross-references may or may not be successfully resolved.\r\n */\r\nexport interface Reference<T extends AstNode = AstNode> {\r\n    /**\r\n     * The target AST node of this reference. Accessing this property may trigger cross-reference\r\n     * resolution by the `Linker` in case it has not been done yet. If the reference cannot be resolved,\r\n     * the value is `undefined`.\r\n     */\r\n    readonly ref?: T;\r\n\r\n    /** If any problem occurred while resolving the reference, it is described by this property. */\r\n    readonly error?: LinkingError;\r\n    /** The CST node from which the reference was parsed */\r\n    readonly $refNode?: CstNode;\r\n    /** The actual text used to look up in the surrounding scope */\r\n    readonly $refText: string;\r\n    /** The node description for the AstNode returned by `ref`  */\r\n    readonly $nodeDescription?: AstNodeDescription;\r\n}\r\n\r\nexport function isReference(obj: unknown): obj is Reference {\r\n    return typeof obj === 'object' && obj !== null && typeof (obj as Reference).$refText === 'string';\r\n}\r\n\r\nexport type ResolvedReference<T extends AstNode = AstNode> = Reference<T> & {\r\n    readonly ref: T;\r\n}\r\n\r\n/**\r\n * A description of an AST node is used when constructing scopes and looking up cross-reference targets.\r\n */\r\nexport interface AstNodeDescription {\r\n    /** The target node; should be present only for local references (linking to the same document). */\r\n    node?: AstNode;\r\n    /**\r\n     * The document segment that represents the range of the name of the AST node.\r\n     */\r\n    nameSegment?: DocumentSegment;\r\n    /**\r\n     * The document segment that represents the full range of the AST node.\r\n     */\r\n    selectionSegment?: DocumentSegment;\r\n    /** `$type` property value of the AST node */\r\n    type: string;\r\n    /** Name of the AST node; this is usually determined by the `NameProvider` service. */\r\n    name: string;\r\n    /** URI to the document containing the AST node */\r\n    documentUri: URI;\r\n    /** Navigation path inside the document */\r\n    path: string;\r\n}\r\n\r\nexport function isAstNodeDescription(obj: unknown): obj is AstNodeDescription {\r\n    return typeof obj === 'object' && obj !== null\r\n        && typeof (obj as AstNodeDescription).name === 'string'\r\n        && typeof (obj as AstNodeDescription).type === 'string'\r\n        && typeof (obj as AstNodeDescription).path === 'string';\r\n}\r\n\r\n/**\r\n * Information about a cross-reference. This is used when traversing references in an AST or to describe\r\n * unresolved references.\r\n */\r\nexport interface ReferenceInfo {\r\n    reference: Reference\r\n    container: AstNode\r\n    property: string\r\n    index?: number\r\n}\r\n\r\n/**\r\n * Used to collect information when the `Linker` service fails to resolve a cross-reference.\r\n */\r\nexport interface LinkingError extends ReferenceInfo {\r\n    message: string;\r\n    targetDescription?: AstNodeDescription;\r\n}\r\n\r\nexport function isLinkingError(obj: unknown): obj is LinkingError {\r\n    return typeof obj === 'object' && obj !== null\r\n        && isAstNode((obj as LinkingError).container)\r\n        && isReference((obj as LinkingError).reference)\r\n        && typeof (obj as LinkingError).message === 'string';\r\n}\r\n\r\n/**\r\n * Service used for generic access to the structure of the AST. This service is shared between\r\n * all involved languages, so it operates on the superset of types of these languages.\r\n */\r\nexport interface AstReflection {\r\n    getAllTypes(): string[]\r\n    getAllSubTypes(type: string): string[]\r\n    getReferenceType(refInfo: ReferenceInfo): string\r\n    getTypeMetaData(type: string): TypeMetaData\r\n    isInstance(node: unknown, type: string): boolean\r\n    isSubtype(subtype: string, supertype: string): boolean\r\n}\r\n\r\n/**\r\n * An abstract implementation of the {@link AstReflection} interface.\r\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\r\n */\r\nexport abstract class AbstractAstReflection implements AstReflection {\r\n\r\n    protected subtypes: Record<string, Record<string, boolean | undefined>> = {};\r\n    protected allSubtypes: Record<string, string[] | undefined> = {};\r\n\r\n    abstract getAllTypes(): string[];\r\n    abstract getReferenceType(refInfo: ReferenceInfo): string;\r\n    abstract getTypeMetaData(type: string): TypeMetaData;\r\n    protected abstract computeIsSubtype(subtype: string, supertype: string): boolean;\r\n\r\n    isInstance(node: unknown, type: string): boolean {\r\n        return isAstNode(node) && this.isSubtype(node.$type, type);\r\n    }\r\n\r\n    isSubtype(subtype: string, supertype: string): boolean {\r\n        if (subtype === supertype) {\r\n            return true;\r\n        }\r\n        let nested = this.subtypes[subtype];\r\n        if (!nested) {\r\n            nested = this.subtypes[subtype] = {};\r\n        }\r\n        const existing = nested[supertype];\r\n        if (existing !== undefined) {\r\n            return existing;\r\n        } else {\r\n            const result = this.computeIsSubtype(subtype, supertype);\r\n            nested[supertype] = result;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    getAllSubTypes(type: string): string[] {\r\n        const existing = this.allSubtypes[type];\r\n        if (existing) {\r\n            return existing;\r\n        } else {\r\n            const allTypes = this.getAllTypes();\r\n            const types: string[] = [];\r\n            for (const possibleSubType of allTypes) {\r\n                if (this.isSubtype(possibleSubType, type)) {\r\n                    types.push(possibleSubType);\r\n                }\r\n            }\r\n            this.allSubtypes[type] = types;\r\n            return types;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Represents runtime meta data about a meta model type.\r\n */\r\nexport interface TypeMetaData {\r\n    /** The name of this meta model type. Corresponds to the `AstNode.$type` value. */\r\n    name: string\r\n    /** A list of properties. They can contain default values for their respective property in the AST. */\r\n    properties: TypeProperty[]\r\n}\r\n\r\n/**\r\n * Describes the meta data of a property of an AST node.\r\n *\r\n * The optional `defaultValue` indicates that the property is mandatory in the AST node.\r\n * For example, if an AST node contains an array, but no elements of this array have been parsed, we still expect an empty array instead of `undefined`.\r\n */\r\nexport interface TypeProperty {\r\n    name: string\r\n    defaultValue?: PropertyType\r\n}\r\n\r\n/**\r\n * Represents a default value for an AST property.\r\n */\r\nexport type PropertyType = number | string | boolean | PropertyType[];\r\n\r\n/**\r\n * A node in the Concrete Syntax Tree (CST).\r\n */\r\nexport interface CstNode extends DocumentSegment {\r\n    /** The container node in the CST */\r\n    readonly container?: CompositeCstNode;\r\n    /** @deprecated use `container` instead. */\r\n    readonly parent?: CompositeCstNode;\r\n    /** The actual text */\r\n    readonly text: string;\r\n    /** The root CST node */\r\n    readonly root: RootCstNode;\r\n    /** The grammar element from which this node was parsed */\r\n    readonly grammarSource?: AbstractElement;\r\n    /** @deprecated use `grammarSource` instead. */\r\n    readonly feature?: AbstractElement;\r\n    /** The AST node created from this CST node */\r\n    readonly astNode: AstNode;\r\n    /** @deprecated use `astNode` instead. */\r\n    readonly element: AstNode;\r\n    /** Whether the token is hidden, i.e. not explicitly part of the containing grammar rule */\r\n    readonly hidden: boolean;\r\n}\r\n\r\n/**\r\n * A composite CST node contains other nodes, but no directly associated token.\r\n */\r\nexport interface CompositeCstNode extends CstNode {\r\n    readonly content: CstNode[];\r\n    /** @deprecated use `content` instead. */\r\n    readonly children: CstNode[];\r\n}\r\n\r\nexport function isCompositeCstNode(node: unknown): node is CompositeCstNode {\r\n    return typeof node === 'object' && node !== null && Array.isArray((node as CompositeCstNode).content);\r\n}\r\n\r\n/**\r\n * A leaf CST node corresponds to a token in the input token stream.\r\n */\r\nexport interface LeafCstNode extends CstNode {\r\n    readonly tokenType: TokenType;\r\n}\r\n\r\nexport function isLeafCstNode(node: unknown): node is LeafCstNode {\r\n    return typeof node === 'object' && node !== null && typeof (node as LeafCstNode).tokenType === 'object';\r\n}\r\n\r\nexport interface RootCstNode extends CompositeCstNode {\r\n    readonly fullText: string\r\n}\r\n\r\nexport function isRootCstNode(node: unknown): node is RootCstNode {\r\n    return isCompositeCstNode(node) && typeof (node as RootCstNode).fullText === 'string';\r\n}\r\n\r\n/**\r\n * Returns a type to have only properties names (!) of a type T whose property value is of a certain type K.\r\n */\r\ntype ExtractKeysOfValueType<T, K> = { [I in keyof T]: T[I] extends K ? I : never }[keyof T];\r\n\r\n/**\r\n * Returns the property names (!) of an AstNode that are cross-references.\r\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.property)`.\r\n */\r\nexport type CrossReferencesOfAstNodeType<N extends AstNode> = (\r\n    ExtractKeysOfValueType<N, Reference|undefined>\r\n    | ExtractKeysOfValueType<N, Array<Reference|undefined>|undefined>\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\n) & {};\r\n\r\n/**\r\n * Represents the enumeration-like type, that lists all AstNode types of your grammar.\r\n */\r\nexport type AstTypeList<T> = Record<keyof T, AstNode>;\r\n\r\n/**\r\n * Returns all types that contain cross-references, A is meant to be the interface `XXXAstType` fromm your generated `ast.ts` file.\r\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.container)`.\r\n */\r\nexport type AstNodeTypesWithCrossReferences<A extends AstTypeList<A>> = {\r\n    [T in keyof A]: CrossReferencesOfAstNodeType<A[T]> extends never ? never : A[T]\r\n}[keyof A];\r\n\r\nexport type Mutable<T> = {\r\n    -readonly [P in keyof T]: T[P]\r\n};\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CstNode } from '../syntax-tree.js';\r\n\r\nexport class ErrorWithLocation extends Error {\r\n    constructor(node: CstNode | undefined, message: string) {\r\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\r\n    }\r\n}\r\n\r\nexport function assertUnreachable(_: never): never {\r\n    throw new Error('Error! The input value was not handled.');\r\n}\r\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { createDefaultCoreModule, createDefaultSharedCoreModule } from '../default-module.js';\r\nimport type { Module } from '../dependency-injection.js';\r\nimport { inject } from '../dependency-injection.js';\r\nimport * as ast from '../languages/generated/ast.js';\r\nimport type { LangiumCoreServices, LangiumSharedCoreServices, PartialLangiumCoreServices, PartialLangiumSharedCoreServices } from '../services.js';\r\nimport type { Mutable } from '../syntax-tree.js';\r\nimport { EmptyFileSystem } from '../workspace/file-system-provider.js';\r\nimport { URI } from './uri-utils.js';\r\n\r\nconst minimalGrammarModule: Module<LangiumCoreServices, PartialLangiumCoreServices> = {\r\n    Grammar: () => undefined as unknown as ast.Grammar,\r\n    LanguageMetaData: () => ({\r\n        caseInsensitive: false,\r\n        fileExtensions: ['.langium'],\r\n        languageId: 'langium'\r\n    })\r\n};\r\n\r\nconst minimalSharedGrammarModule: Module<LangiumSharedCoreServices, PartialLangiumSharedCoreServices> = {\r\n    AstReflection: () => new ast.LangiumGrammarAstReflection()\r\n};\r\n\r\nfunction createMinimalGrammarServices(): LangiumCoreServices {\r\n    const shared = inject(\r\n        createDefaultSharedCoreModule(EmptyFileSystem),\r\n        minimalSharedGrammarModule\r\n    );\r\n    const grammar = inject(\r\n        createDefaultCoreModule({ shared }),\r\n        minimalGrammarModule\r\n    );\r\n    shared.ServiceRegistry.register(grammar);\r\n    return grammar;\r\n}\r\n\r\n/**\r\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\r\n * most notably the parser builder which interprets the grammar to create a parser.\r\n */\r\nexport function loadGrammarFromJson(json: string): ast.Grammar {\r\n    const services = createMinimalGrammarServices();\r\n    const astNode = services.serializer.JsonSerializer.deserialize(json) as Mutable<ast.Grammar>;\r\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, URI.parse(`memory://${astNode.name ?? 'grammar'}.langium`));\r\n    return astNode;\r\n}\r\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/language/generated/ast.ts\nimport { AbstractAstReflection } from \"langium\";\nvar Statement = \"Statement\";\nvar Architecture = \"Architecture\";\nfunction isArchitecture(item) {\n  return reflection.isInstance(item, Architecture);\n}\n__name(isArchitecture, \"isArchitecture\");\nvar Axis = \"Axis\";\nvar Branch = \"Branch\";\nfunction isBranch(item) {\n  return reflection.isInstance(item, Branch);\n}\n__name(isBranch, \"isBranch\");\nvar Checkout = \"Checkout\";\nvar CherryPicking = \"CherryPicking\";\nvar ClassDefStatement = \"ClassDefStatement\";\nvar Commit = \"Commit\";\nfunction isCommit(item) {\n  return reflection.isInstance(item, Commit);\n}\n__name(isCommit, \"isCommit\");\nvar Curve = \"Curve\";\nvar Edge = \"Edge\";\nvar Entry = \"Entry\";\nvar GitGraph = \"GitGraph\";\nfunction isGitGraph(item) {\n  return reflection.isInstance(item, GitGraph);\n}\n__name(isGitGraph, \"isGitGraph\");\nvar Group = \"Group\";\nvar Info = \"Info\";\nfunction isInfo(item) {\n  return reflection.isInstance(item, Info);\n}\n__name(isInfo, \"isInfo\");\nvar Item = \"Item\";\nvar Junction = \"Junction\";\nvar Merge = \"Merge\";\nfunction isMerge(item) {\n  return reflection.isInstance(item, Merge);\n}\n__name(isMerge, \"isMerge\");\nvar Option = \"Option\";\nvar Packet = \"Packet\";\nfunction isPacket(item) {\n  return reflection.isInstance(item, Packet);\n}\n__name(isPacket, \"isPacket\");\nvar PacketBlock = \"PacketBlock\";\nfunction isPacketBlock(item) {\n  return reflection.isInstance(item, PacketBlock);\n}\n__name(isPacketBlock, \"isPacketBlock\");\nvar Pie = \"Pie\";\nfunction isPie(item) {\n  return reflection.isInstance(item, Pie);\n}\n__name(isPie, \"isPie\");\nvar PieSection = \"PieSection\";\nfunction isPieSection(item) {\n  return reflection.isInstance(item, PieSection);\n}\n__name(isPieSection, \"isPieSection\");\nvar Radar = \"Radar\";\nvar Service = \"Service\";\nvar Treemap = \"Treemap\";\nfunction isTreemap(item) {\n  return reflection.isInstance(item, Treemap);\n}\n__name(isTreemap, \"isTreemap\");\nvar TreemapRow = \"TreemapRow\";\nvar Direction = \"Direction\";\nvar Leaf = \"Leaf\";\nvar Section = \"Section\";\nvar MermaidAstReflection = class extends AbstractAstReflection {\n  static {\n    __name(this, \"MermaidAstReflection\");\n  }\n  getAllTypes() {\n    return [Architecture, Axis, Branch, Checkout, CherryPicking, ClassDefStatement, Commit, Curve, Direction, Edge, Entry, GitGraph, Group, Info, Item, Junction, Leaf, Merge, Option, Packet, PacketBlock, Pie, PieSection, Radar, Section, Service, Statement, Treemap, TreemapRow];\n  }\n  computeIsSubtype(subtype, supertype) {\n    switch (subtype) {\n      case Branch:\n      case Checkout:\n      case CherryPicking:\n      case Commit:\n      case Merge: {\n        return this.isSubtype(Statement, supertype);\n      }\n      case Direction: {\n        return this.isSubtype(GitGraph, supertype);\n      }\n      case Leaf:\n      case Section: {\n        return this.isSubtype(Item, supertype);\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  getReferenceType(refInfo) {\n    const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n    switch (referenceId) {\n      case \"Entry:axis\": {\n        return Axis;\n      }\n      default: {\n        throw new Error(`${referenceId} is not a valid reference id.`);\n      }\n    }\n  }\n  getTypeMetaData(type) {\n    switch (type) {\n      case Architecture: {\n        return {\n          name: Architecture,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"edges\", defaultValue: [] },\n            { name: \"groups\", defaultValue: [] },\n            { name: \"junctions\", defaultValue: [] },\n            { name: \"services\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Axis: {\n        return {\n          name: Axis,\n          properties: [\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Branch: {\n        return {\n          name: Branch,\n          properties: [\n            { name: \"name\" },\n            { name: \"order\" }\n          ]\n        };\n      }\n      case Checkout: {\n        return {\n          name: Checkout,\n          properties: [\n            { name: \"branch\" }\n          ]\n        };\n      }\n      case CherryPicking: {\n        return {\n          name: CherryPicking,\n          properties: [\n            { name: \"id\" },\n            { name: \"parent\" },\n            { name: \"tags\", defaultValue: [] }\n          ]\n        };\n      }\n      case ClassDefStatement: {\n        return {\n          name: ClassDefStatement,\n          properties: [\n            { name: \"className\" },\n            { name: \"styleText\" }\n          ]\n        };\n      }\n      case Commit: {\n        return {\n          name: Commit,\n          properties: [\n            { name: \"id\" },\n            { name: \"message\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Curve: {\n        return {\n          name: Curve,\n          properties: [\n            { name: \"entries\", defaultValue: [] },\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Edge: {\n        return {\n          name: Edge,\n          properties: [\n            { name: \"lhsDir\" },\n            { name: \"lhsGroup\", defaultValue: false },\n            { name: \"lhsId\" },\n            { name: \"lhsInto\", defaultValue: false },\n            { name: \"rhsDir\" },\n            { name: \"rhsGroup\", defaultValue: false },\n            { name: \"rhsId\" },\n            { name: \"rhsInto\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Entry: {\n        return {\n          name: Entry,\n          properties: [\n            { name: \"axis\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case GitGraph: {\n        return {\n          name: GitGraph,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Group: {\n        return {\n          name: Group,\n          properties: [\n            { name: \"icon\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Info: {\n        return {\n          name: Info,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Item: {\n        return {\n          name: Item,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Junction: {\n        return {\n          name: Junction,\n          properties: [\n            { name: \"id\" },\n            { name: \"in\" }\n          ]\n        };\n      }\n      case Merge: {\n        return {\n          name: Merge,\n          properties: [\n            { name: \"branch\" },\n            { name: \"id\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Option: {\n        return {\n          name: Option,\n          properties: [\n            { name: \"name\" },\n            { name: \"value\", defaultValue: false }\n          ]\n        };\n      }\n      case Packet: {\n        return {\n          name: Packet,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"blocks\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PacketBlock: {\n        return {\n          name: PacketBlock,\n          properties: [\n            { name: \"bits\" },\n            { name: \"end\" },\n            { name: \"label\" },\n            { name: \"start\" }\n          ]\n        };\n      }\n      case Pie: {\n        return {\n          name: Pie,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"sections\", defaultValue: [] },\n            { name: \"showData\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PieSection: {\n        return {\n          name: PieSection,\n          properties: [\n            { name: \"label\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case Radar: {\n        return {\n          name: Radar,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"axes\", defaultValue: [] },\n            { name: \"curves\", defaultValue: [] },\n            { name: \"options\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Service: {\n        return {\n          name: Service,\n          properties: [\n            { name: \"icon\" },\n            { name: \"iconText\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Treemap: {\n        return {\n          name: Treemap,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" },\n            { name: \"TreemapRows\", defaultValue: [] }\n          ]\n        };\n      }\n      case TreemapRow: {\n        return {\n          name: TreemapRow,\n          properties: [\n            { name: \"indent\" },\n            { name: \"item\" }\n          ]\n        };\n      }\n      case Direction: {\n        return {\n          name: Direction,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"dir\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Leaf: {\n        return {\n          name: Leaf,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case Section: {\n        return {\n          name: Section,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      default: {\n        return {\n          name: type,\n          properties: []\n        };\n      }\n    }\n  }\n};\nvar reflection = new MermaidAstReflection();\n\n// src/language/generated/grammar.ts\nimport { loadGrammarFromJson } from \"langium\";\nvar loadedInfoGrammar;\nvar InfoGrammar = /* @__PURE__ */ __name(() => loadedInfoGrammar ?? (loadedInfoGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Info\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Info\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"info\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"showInfo\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"InfoGrammar\");\nvar loadedPacketGrammar;\nvar PacketGrammar = /* @__PURE__ */ __name(() => loadedPacketGrammar ?? (loadedPacketGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Packet\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Packet\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"packet\"},{\"$type\":\"Keyword\",\"value\":\"packet-beta\"}]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PacketBlock\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"start\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"end\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"bits\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]}]},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"PacketGrammar\");\nvar loadedPieGrammar;\nvar PieGrammar = /* @__PURE__ */ __name(() => loadedPieGrammar ?? (loadedPieGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Pie\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Pie\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"pie\"},{\"$type\":\"Assignment\",\"feature\":\"showData\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showData\"},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PieSection\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"PieGrammar\");\nvar loadedArchitectureGrammar;\nvar ArchitectureGrammar = /* @__PURE__ */ __name(() => loadedArchitectureGrammar ?? (loadedArchitectureGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Architecture\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Architecture\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"architecture-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"groups\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"services\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"junctions\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"edges\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"LeftPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"lhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"RightPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"rhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Arrow\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"lhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"--\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"-\"}]}]},{\"$type\":\"Assignment\",\"feature\":\"rhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Group\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"group\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@28\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Service\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"service\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"iconText\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@28\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Junction\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"junction\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Edge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"lhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"lhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"rhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"rhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_DIRECTION\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"L\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"R\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"T\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"B\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_GROUP\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\{group\\\\\\\\}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_INTO\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/<|>/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\([\\\\\\\\w-:]+\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\[[\\\\\\\\w ]+\\\\\\\\]/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"ArchitectureGrammar\");\nvar loadedGitGraphGrammar;\nvar GitGraphGrammar = /* @__PURE__ */ __name(() => loadedGitGraphGrammar ?? (loadedGitGraphGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"GitGraph\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"GitGraph\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Keyword\",\"value\":\":\"}]},{\"$type\":\"Keyword\",\"value\":\"gitGraph:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"statements\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Direction\",\"definition\":{\"$type\":\"Assignment\",\"feature\":\"dir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"LR\"},{\"$type\":\"Keyword\",\"value\":\"TB\"},{\"$type\":\"Keyword\",\"value\":\"BT\"}]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Commit\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"commit\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"msg:\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"message\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Branch\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"branch\"},{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"order:\"},{\"$type\":\"Assignment\",\"feature\":\"order\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Merge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"merge\"},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Checkout\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"checkout\"},{\"$type\":\"Keyword\",\"value\":\"switch\"}]},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"CherryPicking\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"cherry-pick\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"parent:\"},{\"$type\":\"Assignment\",\"feature\":\"parent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"name\":\"REFERENCE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\w([-\\\\\\\\./\\\\\\\\w]*[-\\\\\\\\w])?/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"GitGraphGrammar\");\nvar loadedRadarGrammar;\nvar RadarGrammar = /* @__PURE__ */ __name(() => loadedRadarGrammar ?? (loadedRadarGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Radar\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Radar\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\"radar-beta:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"axis\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"curve\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Label\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"[\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"]\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Axis\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Curve\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Keyword\",\"value\":\"{\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\"}\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Entries\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"DetailedEntry\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"axis\",\"operator\":\"=\",\"terminal\":{\"$type\":\"CrossReference\",\"type\":{\"$ref\":\"#/rules@2\"},\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},\"deprecatedSyntax\":false}},{\"$type\":\"Keyword\",\"value\":\":\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"NumberEntry\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Option\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showLegend\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"ticks\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"max\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"min\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"graticule\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"GRATICULE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"circle\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"polygon\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Entry\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"axis\",\"isOptional\":true,\"type\":{\"$type\":\"ReferenceType\",\"referenceType\":{\"$type\":\"SimpleType\",\"typeRef\":{\"$ref\":\"#/rules@2\"}}}},{\"$type\":\"TypeAttribute\",\"name\":\"value\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"number\"},\"isOptional\":false}],\"superTypes\":[]}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"types\":[],\"usedGrammars\":[]}`)), \"RadarGrammar\");\nvar loadedTreemapGrammar;\nvar TreemapGrammar = /* @__PURE__ */ __name(() => loadedTreemapGrammar ?? (loadedTreemapGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Treemap\",\"rules\":[{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Treemap\",\"returnType\":{\"$ref\":\"#/interfaces@4\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@0\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"TreemapRows\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"TREEMAP_KEYWORD\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"treemap-beta\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"treemap\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"CLASS_DEF\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/classDef\\\\\\\\s+([a-zA-Z_][a-zA-Z0-9_]+)(?:\\\\\\\\s+([^;\\\\\\\\r\\\\\\\\n]*))?(?:;)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STYLE_SEPARATOR\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\":::\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"SEPARATOR\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\":\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"COMMA\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\",\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WS\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[ \\\\\\\\t]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"ML_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\%\\\\\\\\%[^\\\\\\\\n]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"NL\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false},{\"$type\":\"ParserRule\",\"name\":\"TreemapRow\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"indent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"item\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"ClassDef\",\"dataType\":\"string\",\"definition\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Item\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Section\",\"returnType\":{\"$ref\":\"#/interfaces@1\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"classSelector\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Leaf\",\"returnType\":{\"$ref\":\"#/interfaces@2\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"classSelector\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INDENTATION\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[ \\\\\\\\t]{1,}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[a-zA-Z_][a-zA-Z0-9_]*/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9_\\\\\\\\.\\\\\\\\,]+/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"MyNumber\",\"dataType\":\"number\",\"definition\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false}],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Item\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"name\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"classSelector\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]},{\"$type\":\"Interface\",\"name\":\"Section\",\"superTypes\":[{\"$ref\":\"#/interfaces@0\"}],\"attributes\":[]},{\"$type\":\"Interface\",\"name\":\"Leaf\",\"superTypes\":[{\"$ref\":\"#/interfaces@0\"}],\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"value\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"number\"},\"isOptional\":false}]},{\"$type\":\"Interface\",\"name\":\"ClassDefStatement\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"className\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"styleText\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false}],\"superTypes\":[]},{\"$type\":\"Interface\",\"name\":\"Treemap\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"TreemapRows\",\"type\":{\"$type\":\"ArrayType\",\"elementType\":{\"$type\":\"SimpleType\",\"typeRef\":{\"$ref\":\"#/rules@14\"}}},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"imports\":[],\"types\":[],\"usedGrammars\":[],\"$comment\":\"/**\\\\n * Treemap grammar for Langium\\\\n * Converted from mindmap grammar\\\\n *\\\\n * The ML_COMMENT and NL hidden terminals handle whitespace, comments, and newlines\\\\n * before the treemap keyword, allowing for empty lines and comments before the\\\\n * treemap declaration.\\\\n */\"}`)), \"TreemapGrammar\");\n\n// src/language/generated/module.ts\nvar InfoLanguageMetaData = {\n  languageId: \"info\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PacketLanguageMetaData = {\n  languageId: \"packet\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PieLanguageMetaData = {\n  languageId: \"pie\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar ArchitectureLanguageMetaData = {\n  languageId: \"architecture\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar GitGraphLanguageMetaData = {\n  languageId: \"gitGraph\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar RadarLanguageMetaData = {\n  languageId: \"radar\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar TreemapLanguageMetaData = {\n  languageId: \"treemap\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar MermaidGeneratedSharedModule = {\n  AstReflection: /* @__PURE__ */ __name(() => new MermaidAstReflection(), \"AstReflection\")\n};\nvar InfoGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => InfoGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => InfoLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PacketGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PacketGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PacketLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PieGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PieGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PieLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar ArchitectureGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => ArchitectureGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => ArchitectureLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar GitGraphGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => GitGraphGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => GitGraphLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar RadarGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => RadarGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => RadarLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar TreemapGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => TreemapGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => TreemapLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\n\n// src/language/common/valueConverter.ts\nimport { DefaultValueConverter } from \"langium\";\n\n// src/language/common/matcher.ts\nvar accessibilityDescrRegex = /accDescr(?:[\\t ]*:([^\\n\\r]*)|\\s*{([^}]*)})/;\nvar accessibilityTitleRegex = /accTitle[\\t ]*:([^\\n\\r]*)/;\nvar titleRegex = /title([\\t ][^\\n\\r]*|)/;\n\n// src/language/common/valueConverter.ts\nvar rulesRegexes = {\n  ACC_DESCR: accessibilityDescrRegex,\n  ACC_TITLE: accessibilityTitleRegex,\n  TITLE: titleRegex\n};\nvar AbstractMermaidValueConverter = class extends DefaultValueConverter {\n  static {\n    __name(this, \"AbstractMermaidValueConverter\");\n  }\n  runConverter(rule, input, cstNode) {\n    let value = this.runCommonConverter(rule, input, cstNode);\n    if (value === void 0) {\n      value = this.runCustomConverter(rule, input, cstNode);\n    }\n    if (value === void 0) {\n      return super.runConverter(rule, input, cstNode);\n    }\n    return value;\n  }\n  runCommonConverter(rule, input, _cstNode) {\n    const regex = rulesRegexes[rule.name];\n    if (regex === void 0) {\n      return void 0;\n    }\n    const match = regex.exec(input);\n    if (match === null) {\n      return void 0;\n    }\n    if (match[1] !== void 0) {\n      return match[1].trim().replace(/[\\t ]{2,}/gm, \" \");\n    }\n    if (match[2] !== void 0) {\n      return match[2].replace(/^\\s*/gm, \"\").replace(/\\s+$/gm, \"\").replace(/[\\t ]{2,}/gm, \" \").replace(/[\\n\\r]{2,}/gm, \"\\n\");\n    }\n    return void 0;\n  }\n};\nvar CommonValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"CommonValueConverter\");\n  }\n  runCustomConverter(_rule, _input, _cstNode) {\n    return void 0;\n  }\n};\n\n// src/language/common/tokenBuilder.ts\nimport { DefaultTokenBuilder } from \"langium\";\nvar AbstractMermaidTokenBuilder = class extends DefaultTokenBuilder {\n  static {\n    __name(this, \"AbstractMermaidTokenBuilder\");\n  }\n  constructor(keywords) {\n    super();\n    this.keywords = new Set(keywords);\n  }\n  buildKeywordTokens(rules, terminalTokens, options) {\n    const tokenTypes = super.buildKeywordTokens(rules, terminalTokens, options);\n    tokenTypes.forEach((tokenType) => {\n      if (this.keywords.has(tokenType.name) && tokenType.PATTERN !== void 0) {\n        tokenType.PATTERN = new RegExp(tokenType.PATTERN.toString() + \"(?:(?=%%)|(?!\\\\S))\");\n      }\n    });\n    return tokenTypes;\n  }\n};\nvar CommonTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"CommonTokenBuilder\");\n  }\n};\n\nexport {\n  __name,\n  Statement,\n  Architecture,\n  isArchitecture,\n  Branch,\n  isBranch,\n  Commit,\n  isCommit,\n  GitGraph,\n  isGitGraph,\n  Info,\n  isInfo,\n  Merge,\n  isMerge,\n  Packet,\n  isPacket,\n  PacketBlock,\n  isPacketBlock,\n  Pie,\n  isPie,\n  PieSection,\n  isPieSection,\n  Radar,\n  Treemap,\n  isTreemap,\n  MermaidGeneratedSharedModule,\n  InfoGeneratedModule,\n  PacketGeneratedModule,\n  PieGeneratedModule,\n  ArchitectureGeneratedModule,\n  GitGraphGeneratedModule,\n  RadarGeneratedModule,\n  TreemapGeneratedModule,\n  AbstractMermaidValueConverter,\n  CommonValueConverter,\n  AbstractMermaidTokenBuilder,\n  CommonTokenBuilder\n};\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","import {\n  GitGraphModule,\n  createGitGraphServices\n} from \"./chunks/mermaid-parser.core/chunk-BN7GFLIU.mjs\";\nimport {\n  InfoModule,\n  createInfoServices\n} from \"./chunks/mermaid-parser.core/chunk-T44TD3VJ.mjs\";\nimport {\n  PacketModule,\n  createPacketServices\n} from \"./chunks/mermaid-parser.core/chunk-KMC2YHZD.mjs\";\nimport {\n  PieModule,\n  createPieServices\n} from \"./chunks/mermaid-parser.core/chunk-WFWHJNB7.mjs\";\nimport {\n  ArchitectureModule,\n  createArchitectureServices\n} from \"./chunks/mermaid-parser.core/chunk-JEIROHC2.mjs\";\nimport {\n  RadarModule,\n  createRadarServices\n} from \"./chunks/mermaid-parser.core/chunk-WFRQ32O7.mjs\";\nimport {\n  TreemapModule,\n  createTreemapServices\n} from \"./chunks/mermaid-parser.core/chunk-XRWGC2XP.mjs\";\nimport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  Info,\n  InfoGeneratedModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  Pie,\n  PieGeneratedModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  Statement,\n  Treemap,\n  TreemapGeneratedModule,\n  __name,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  isTreemap\n} from \"./chunks/mermaid-parser.core/chunk-4KMFLZZN.mjs\";\n\n// src/parse.ts\nvar parsers = {};\nvar initializers = {\n  info: /* @__PURE__ */ __name(async () => {\n    const { createInfoServices: createInfoServices2 } = await import(\"./chunks/mermaid-parser.core/info-63CPKGFF.mjs\");\n    const parser = createInfoServices2().Info.parser.LangiumParser;\n    parsers.info = parser;\n  }, \"info\"),\n  packet: /* @__PURE__ */ __name(async () => {\n    const { createPacketServices: createPacketServices2 } = await import(\"./chunks/mermaid-parser.core/packet-HUATNLJX.mjs\");\n    const parser = createPacketServices2().Packet.parser.LangiumParser;\n    parsers.packet = parser;\n  }, \"packet\"),\n  pie: /* @__PURE__ */ __name(async () => {\n    const { createPieServices: createPieServices2 } = await import(\"./chunks/mermaid-parser.core/pie-WTHONI2E.mjs\");\n    const parser = createPieServices2().Pie.parser.LangiumParser;\n    parsers.pie = parser;\n  }, \"pie\"),\n  architecture: /* @__PURE__ */ __name(async () => {\n    const { createArchitectureServices: createArchitectureServices2 } = await import(\"./chunks/mermaid-parser.core/architecture-O4VJ6CD3.mjs\");\n    const parser = createArchitectureServices2().Architecture.parser.LangiumParser;\n    parsers.architecture = parser;\n  }, \"architecture\"),\n  gitGraph: /* @__PURE__ */ __name(async () => {\n    const { createGitGraphServices: createGitGraphServices2 } = await import(\"./chunks/mermaid-parser.core/gitGraph-ZV4HHKMB.mjs\");\n    const parser = createGitGraphServices2().GitGraph.parser.LangiumParser;\n    parsers.gitGraph = parser;\n  }, \"gitGraph\"),\n  radar: /* @__PURE__ */ __name(async () => {\n    const { createRadarServices: createRadarServices2 } = await import(\"./chunks/mermaid-parser.core/radar-NJJJXTRR.mjs\");\n    const parser = createRadarServices2().Radar.parser.LangiumParser;\n    parsers.radar = parser;\n  }, \"radar\"),\n  treemap: /* @__PURE__ */ __name(async () => {\n    const { createTreemapServices: createTreemapServices2 } = await import(\"./chunks/mermaid-parser.core/treemap-75Q7IDZK.mjs\");\n    const parser = createTreemapServices2().Treemap.parser.LangiumParser;\n    parsers.treemap = parser;\n  }, \"treemap\")\n};\nasync function parse(diagramType, text) {\n  const initializer = initializers[diagramType];\n  if (!initializer) {\n    throw new Error(`Unknown diagram type: ${diagramType}`);\n  }\n  if (!parsers[diagramType]) {\n    await initializer();\n  }\n  const parser = parsers[diagramType];\n  const result = parser.parse(text);\n  if (result.lexerErrors.length > 0 || result.parserErrors.length > 0) {\n    throw new MermaidParseError(result);\n  }\n  return result.value;\n}\n__name(parse, \"parse\");\nvar MermaidParseError = class extends Error {\n  constructor(result) {\n    const lexerErrors = result.lexerErrors.map((err) => err.message).join(\"\\n\");\n    const parserErrors = result.parserErrors.map((err) => err.message).join(\"\\n\");\n    super(`Parsing failed: ${lexerErrors} ${parserErrors}`);\n    this.result = result;\n  }\n  static {\n    __name(this, \"MermaidParseError\");\n  }\n};\nexport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  ArchitectureModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  GitGraphModule,\n  Info,\n  InfoGeneratedModule,\n  InfoModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  MermaidParseError,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  PacketModule,\n  Pie,\n  PieGeneratedModule,\n  PieModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  RadarModule,\n  Statement,\n  Treemap,\n  TreemapGeneratedModule,\n  TreemapModule,\n  createArchitectureServices,\n  createGitGraphServices,\n  createInfoServices,\n  createPacketServices,\n  createPieServices,\n  createRadarServices,\n  createTreemapServices,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  isTreemap,\n  parse\n};\n","// based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\nexport function toFastProperties(toBecomeFast: any) {\n  function FakeConstructor() {}\n\n  // If our object is used as a constructor, it would receive\n  FakeConstructor.prototype = toBecomeFast;\n  const fakeInstance = new (FakeConstructor as any)();\n\n  function fakeAccess() {\n    return typeof fakeInstance.bar;\n  }\n\n  // help V8 understand this is a \"real\" prototype by actually using\n  // the fake instance.\n  fakeAccess();\n  fakeAccess();\n\n  // Always true condition to suppress the Firefox warning of unreachable\n  // code after a return statement.\n  if (1) return toBecomeFast;\n\n  // Eval prevents optimization of this method (even though this is dead code)\n  // - https://esbuild.github.io/content-types/#direct-eval\n  /* istanbul ignore next */\n  // tslint:disable-next-line\n  (0, eval)(toBecomeFast);\n}\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.drop([1, 2, 3]);\n * // => [2, 3]\n *\n * _.drop([1, 2, 3], 2);\n * // => [3]\n *\n * _.drop([1, 2, 3], 5);\n * // => []\n *\n * _.drop([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction drop(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default drop;\n","import assignValue from './_assignValue.js';\nimport copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport isArrayLike from './isArrayLike.js';\nimport isPrototype from './_isPrototype.js';\nimport keys from './keys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nexport default assign;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport basePickBy from './_basePickBy.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nexport default pickBy;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar regexpTag = '[object RegExp]';\n\n/**\n * The base implementation of `_.isRegExp` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n */\nfunction baseIsRegExp(value) {\n  return isObjectLike(value) && baseGetTag(value) == regexpTag;\n}\n\nexport default baseIsRegExp;\n","import baseIsRegExp from './_baseIsRegExp.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;\n\n/**\n * Checks if `value` is classified as a `RegExp` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n * @example\n *\n * _.isRegExp(/abc/);\n * // => true\n *\n * _.isRegExp('/abc/');\n * // => false\n */\nvar isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\nexport default isRegExp;\n","import { assign, forEach, isRegExp, isString, map, pickBy } from \"lodash-es\";\nimport type {\n  IGASTVisitor,\n  IProduction,\n  IProductionWithOccurrence,\n  ISerializedGast,\n  TokenType,\n} from \"@chevrotain/types\";\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nexport abstract class AbstractProduction<T extends IProduction = IProduction>\n  implements IProduction\n{\n  public get definition(): T[] {\n    return this._definition;\n  }\n  public set definition(value: T[]) {\n    this._definition = value;\n  }\n\n  constructor(protected _definition: T[]) {}\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    forEach(this.definition, (prod) => {\n      prod.accept(visitor);\n    });\n  }\n}\n\nexport class NonTerminal\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public nonTerminalName!: string;\n  public label?: string;\n  public referencedRule!: Rule;\n  public idx: number = 1;\n\n  constructor(options: {\n    nonTerminalName: string;\n    label?: string;\n    referencedRule?: Rule;\n    idx?: number;\n  }) {\n    super([]);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  set definition(definition: IProduction[]) {\n    // immutable\n  }\n\n  get definition(): IProduction[] {\n    if (this.referencedRule !== undefined) {\n      return this.referencedRule.definition;\n    }\n    return [];\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    // don't visit children of a reference, we will get cyclic infinite loops if we do so\n  }\n}\n\nexport class Rule extends AbstractProduction {\n  public name!: string;\n  public orgText: string = \"\";\n\n  constructor(options: {\n    name: string;\n    definition: IProduction[];\n    orgText?: string;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternative extends AbstractProduction {\n  public ignoreAmbiguities: boolean = false;\n\n  constructor(options: {\n    definition: IProduction[];\n    ignoreAmbiguities?: boolean;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Option\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatory\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatoryWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Repetition\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternation\n  extends AbstractProduction<Alternative>\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public ignoreAmbiguities: boolean = false;\n  public hasPredicates: boolean = false;\n  public maxLookahead?: number;\n\n  public get definition(): Alternative[] {\n    return this._definition;\n  }\n  public set definition(value: Alternative[]) {\n    this._definition = value;\n  }\n\n  constructor(options: {\n    definition: Alternative[];\n    idx?: number;\n    ignoreAmbiguities?: boolean;\n    hasPredicates?: boolean;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Terminal implements IProductionWithOccurrence {\n  public terminalType!: TokenType;\n  public label?: string;\n  public idx: number = 1;\n\n  constructor(options: {\n    terminalType: TokenType;\n    label?: string;\n    idx?: number;\n  }) {\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n  }\n}\n\nexport interface ISerializedBasic extends ISerializedGast {\n  type:\n    | \"Alternative\"\n    | \"Option\"\n    | \"RepetitionMandatory\"\n    | \"Repetition\"\n    | \"Alternation\";\n  idx?: number;\n}\n\nexport interface ISerializedGastRule extends ISerializedGast {\n  type: \"Rule\";\n  name: string;\n  orgText: string;\n}\n\nexport interface ISerializedNonTerminal extends ISerializedGast {\n  type: \"NonTerminal\";\n  name: string;\n  label?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminal extends ISerializedGast {\n  type: \"Terminal\";\n  name: string;\n  terminalLabel?: string;\n  label?: string;\n  pattern?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminalWithSeparator extends ISerializedGast {\n  type: \"RepetitionMandatoryWithSeparator\" | \"RepetitionWithSeparator\";\n  idx: number;\n  separator: ISerializedTerminal;\n}\n\nexport type ISerializedGastAny =\n  | ISerializedBasic\n  | ISerializedGastRule\n  | ISerializedNonTerminal\n  | ISerializedTerminal\n  | ISerializedTerminalWithSeparator;\n\nexport function serializeGrammar(topRules: Rule[]): ISerializedGast[] {\n  return map(topRules, serializeProduction);\n}\n\nexport function serializeProduction(node: IProduction): ISerializedGast {\n  function convertDefinition(definition: IProduction[]): ISerializedGast[] {\n    return map(definition, serializeProduction);\n  }\n  /* istanbul ignore else */\n  if (node instanceof NonTerminal) {\n    const serializedNonTerminal: ISerializedNonTerminal = {\n      type: \"NonTerminal\",\n      name: node.nonTerminalName,\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedNonTerminal.label = node.label;\n    }\n\n    return serializedNonTerminal;\n  } else if (node instanceof Alternative) {\n    return <ISerializedBasic>{\n      type: \"Alternative\",\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Option) {\n    return <ISerializedBasic>{\n      type: \"Option\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatory) {\n    return <ISerializedBasic>{\n      type: \"RepetitionMandatory\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatoryWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionMandatoryWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Repetition) {\n    return <ISerializedBasic>{\n      type: \"Repetition\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Alternation) {\n    return <ISerializedBasic>{\n      type: \"Alternation\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Terminal) {\n    const serializedTerminal = <ISerializedTerminal>{\n      type: \"Terminal\",\n      name: node.terminalType.name,\n      label: tokenLabel(node.terminalType),\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedTerminal.terminalLabel = node.label;\n    }\n\n    const pattern = node.terminalType.PATTERN;\n    if (node.terminalType.PATTERN) {\n      serializedTerminal.pattern = isRegExp(pattern)\n        ? (<any>pattern).source\n        : pattern;\n    }\n\n    return serializedTerminal;\n  } else if (node instanceof Rule) {\n    return <ISerializedGastRule>{\n      type: \"Rule\",\n      name: node.name,\n      orgText: node.orgText,\n      definition: convertDefinition(node.definition),\n    };\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction } from \"@chevrotain/types\";\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node;\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n      case Alternative:\n        return this.visitAlternative(nodeAny);\n      case Option:\n        return this.visitOption(nodeAny);\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n      case Repetition:\n        return this.visitRepetition(nodeAny);\n      case Alternation:\n        return this.visitAlternation(nodeAny);\n      case Terminal:\n        return this.visitTerminal(nodeAny);\n      case Rule:\n        return this.visitRule(nodeAny);\n      /* c8 ignore next 2 */\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  }\n\n  /* c8 ignore next */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* c8 ignore next */\n  public visitAlternative(node: Alternative): any {}\n\n  /* c8 ignore next */\n  public visitOption(node: Option): any {}\n\n  /* c8 ignore next */\n  public visitRepetition(node: Repetition): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* c8 ignore next 3 */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* c8 ignore next */\n  public visitAlternation(node: Alternation): any {}\n\n  /* c8 ignore next */\n  public visitTerminal(node: Terminal): any {}\n\n  /* c8 ignore next */\n  public visitRule(node: Rule): any {}\n}\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.some` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction baseSome(collection, predicate) {\n  var result;\n\n  baseEach(collection, function(value, index, collection) {\n    result = predicate(value, index, collection);\n    return !result;\n  });\n  return !!result;\n}\n\nexport default baseSome;\n","import arraySome from './_arraySome.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseSome from './_baseSome.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **any** element of `collection`.\n * Iteration is stopped once `predicate` returns truthy. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n * @example\n *\n * _.some([null, 0, 'yes', false], Boolean);\n * // => true\n *\n * var users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.some(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.some(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.some(users, 'active');\n * // => true\n */\nfunction some(collection, predicate, guard) {\n  var func = isArray(collection) ? arraySome : baseSome;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default some;\n","import baseIndexOf from './_baseIndexOf.js';\nimport isArrayLike from './isArrayLike.js';\nimport isString from './isString.js';\nimport toInteger from './toInteger.js';\nimport values from './values.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nexport default includes;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default arrayEvery;\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nexport default baseEvery;\n","import arrayEvery from './_arrayEvery.js';\nimport baseEvery from './_baseEvery.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default every;\n","import { every, includes, some } from \"lodash-es\";\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction, IProductionWithOccurrence } from \"@chevrotain/types\";\n\nexport function isSequenceProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return (\n    prod instanceof Alternative ||\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionMandatory ||\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod instanceof RepetitionWithSeparator ||\n    prod instanceof Terminal ||\n    prod instanceof Rule\n  );\n}\n\nexport function isOptionalProd(\n  prod: IProduction,\n  alreadyVisited: NonTerminal[] = [],\n): boolean {\n  const isDirectlyOptional =\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionWithSeparator;\n  if (isDirectlyOptional) {\n    return true;\n  }\n\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some((<Alternation>prod).definition, (subProd: IProduction) => {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n    return every(\n      (<AbstractProduction>prod).definition,\n      (subProd: IProduction) => {\n        return isOptionalProd(subProd, alreadyVisited);\n      },\n    );\n  } else {\n    return false;\n  }\n}\n\nexport function isBranchingProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return prod instanceof Alternation;\n}\n\nexport function getProductionDslName(prod: IProductionWithOccurrence): string {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof Option) {\n    return \"OPTION\";\n  } else if (prod instanceof Alternation) {\n    return \"OR\";\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\";\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import { drop, forEach } from \"lodash-es\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction } from \"@chevrotain/types\";\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: { definition: IProduction[] }, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1);\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, <any>fullOrRest);\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, <any>fullOrRest);\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(manyProd, fullManyRest);\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(manySepProd, fullManySepRest);\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest);\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] });\n      this.walk(prodWrapper, <any>fullOrRest);\n    });\n  }\n}\n\nfunction restForRepetitionWithSeparator(\n  repSepProd: RepetitionWithSeparator,\n  currRest: IProduction[],\n  prevRest: IProduction[],\n) {\n  const repSepRest = [\n    new Option({\n      definition: [\n        new Terminal({ terminalType: repSepProd.separator }) as IProduction,\n      ].concat(repSepProd.definition),\n    }) as IProduction,\n  ];\n  const fullRepSepRest: IProduction[] = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}\n","import baseUniq from './_baseUniq.js';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nexport default uniq;\n","import { flatten, map, uniq } from \"lodash-es\";\nimport {\n  isBranchingProd,\n  isOptionalProd,\n  isSequenceProd,\n  NonTerminal,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\nexport function first(prod: IProduction): TokenType[] {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first((<NonTerminal>prod).referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(<Terminal>prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function firstForSequence(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  let firstSet: TokenType[] = [];\n  const seq = prod.definition;\n  let nextSubProdIdx = 0;\n  let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  let currSubProd;\n  // so we enter the loop at least once (if the definition is not empty\n  let isLastInnerProdOptional = true;\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n\n  return uniq(firstSet);\n}\n\nexport function firstForBranching(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  const allAlternativesFirsts: TokenType[][] = map(\n    prod.definition,\n    (innerProd) => {\n      return first(innerProd);\n    },\n  );\n  return uniq(flatten<TokenType>(allAlternativesFirsts));\n}\n\nexport function firstForTerminal(terminal: Terminal): TokenType[] {\n  return [terminal.terminalType];\n}\n","// TODO: can this be removed? where is it used?\nexport const IN = \"_~IN~_\";\n","import { RestWalker } from \"./rest.js\";\nimport { first } from \"./first.js\";\nimport { assign, forEach } from \"lodash-es\";\nimport { IN } from \"../constants.js\";\nimport { Alternative, NonTerminal, Rule, Terminal } from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nexport class ResyncFollowsWalker extends RestWalker {\n  public follows: Record<string, TokenType[]> = {};\n\n  constructor(private topProd: Rule) {\n    super();\n  }\n\n  startWalking(): Record<string, TokenType[]> {\n    this.walk(this.topProd);\n    return this.follows;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // do nothing! just like in the public sector after 13:00\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    const followName =\n      buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n      this.topProd.name;\n    const fullRest: IProduction[] = currRest.concat(prevRest);\n    const restProd = new Alternative({ definition: fullRest });\n    const t_in_topProd_follows = first(restProd);\n    this.follows[followName] = t_in_topProd_follows;\n  }\n}\n\nexport function computeAllProdsFollows(\n  topProductions: Rule[],\n): Record<string, TokenType[]> {\n  const reSyncFollows = {};\n\n  forEach(topProductions, (topProd) => {\n    const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n    assign(reSyncFollows, currRefsFollow);\n  });\n  return reSyncFollows;\n}\n\nexport function buildBetweenProdsFollowPrefix(\n  inner: Rule,\n  occurenceInParent: number,\n): string {\n  return inner.name + occurenceInParent + IN;\n}\n\nexport function buildInProdFollowPrefix(terminal: Terminal): string {\n  const terminalName = terminal.terminalType.name;\n  return terminalName + terminal.idx + IN;\n}\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nexport default negate;\n","import arrayFilter from './_arrayFilter.js';\nimport baseFilter from './_baseFilter.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport negate from './negate.js';\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nexport default reject;\n","import baseIndexOf from './_baseIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nexport default indexOf;\n","import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nexport default difference;\n","/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default compact;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nexport default head;\n","export function PRINT_ERROR(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js */\n  if (console && console.error) {\n    console.error(`Error: ${msg}`);\n  }\n}\n\nexport function PRINT_WARNING(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js*/\n  if (console && console.warn) {\n    // TODO: modify docs accordingly\n    console.warn(`Warning: ${msg}`);\n  }\n}\n","import {\n  Alternative,\n  Assertion,\n  Atom,\n  Disjunction,\n  RegExpParser,\n  RegExpPattern,\n} from \"@chevrotain/regexp-to-ast\";\n\nlet regExpAstCache: { [regex: string]: RegExpPattern } = {};\nconst regExpParser = new RegExpParser();\n\n// this should be moved to regexp-to-ast\nexport type ASTNode =\n  | RegExpPattern\n  | Disjunction\n  | Alternative\n  | Assertion\n  | Atom;\n\nexport function getRegExpAst(regExp: RegExp): RegExpPattern {\n  const regExpStr = regExp.toString();\n  if (regExpAstCache.hasOwnProperty(regExpStr)) {\n    return regExpAstCache[regExpStr];\n  } else {\n    const regExpAst = regExpParser.pattern(regExpStr);\n    regExpAstCache[regExpStr] = regExpAst;\n    return regExpAst;\n  }\n}\n\nexport function clearRegExpParserCache() {\n  regExpAstCache = {};\n}\n","import {\n  Alternative,\n  Atom,\n  BaseRegExpVisitor,\n  Character,\n  Disjunction,\n  Group,\n  Set,\n} from \"@chevrotain/regexp-to-ast\";\nimport { every, find, forEach, includes, isArray, values } from \"lodash-es\";\nimport { PRINT_ERROR, PRINT_WARNING } from \"@chevrotain/utils\";\nimport { ASTNode, getRegExpAst } from \"./reg_exp_parser.js\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer.js\";\n\nconst complementErrorMessage =\n  \"Complement Sets are not supported for first char optimization\";\nexport const failedOptimizationPrefixMsg =\n  'Unable to use \"first char\" lexer optimizations:\\n';\n\nexport function getOptimizedStartCodesIndices(\n  regExp: RegExp,\n  ensureOptimizations = false,\n): number[] {\n  try {\n    const ast = getRegExpAst(regExp);\n    const firstChars = firstCharOptimizedIndices(\n      ast.value,\n      {},\n      ast.flags.ignoreCase,\n    );\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        PRINT_WARNING(\n          `${failedOptimizationPrefixMsg}` +\n            `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n            \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\",\n        );\n      }\n    } else {\n      let msgSuffix = \"\";\n      if (ensureOptimizations) {\n        msgSuffix =\n          \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n      PRINT_ERROR(\n        `${failedOptimizationPrefixMsg}\\n` +\n          `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n          `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n          \"\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" +\n          msgSuffix,\n      );\n    }\n  }\n\n  return [];\n}\n\nexport function firstCharOptimizedIndices(\n  ast: ASTNode,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n): number[] {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (let i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n      break;\n    case \"Alternative\":\n      const terms = ast.value;\n      for (let i = 0; i < terms.length; i++) {\n        const term = terms[i];\n\n        // skip terms that cannot effect the first char results\n        switch (term.type) {\n          case \"EndAnchor\":\n          // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n          case \"GroupBackReference\":\n          // assertions do not affect potential starting codes\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        const atom = term;\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n            forEach(atom.value, (code) => {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                const range = code as any;\n                // cannot optimize when ignoreCase is\n                if (ignoreCase === true) {\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                }\n                // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to && rangeCode < minOptimizationVal;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n\n                  // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                  if (range.to >= minOptimizationVal) {\n                    const minUnOptVal =\n                      range.from >= minOptimizationVal\n                        ? range.from\n                        : minOptimizationVal;\n                    const maxUnOptVal = range.to;\n                    const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                    const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n\n                    for (\n                      let currOptIdx = minOptIdx;\n                      currOptIdx <= maxOptIdx;\n                      currOptIdx++\n                    ) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n          /* istanbul ignore next */\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        }\n\n        // reached a mandatory production, no more **start** codes can be found on this alternative\n        const isOptionalQuantifier =\n          atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n        if (\n          // A group may be optional due to empty contents /(?:)/\n          // or if everything inside it is optional /((a)?)/\n          (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n          // If this term is not a group it may only be optional if it has an optional quantifier\n          (atom.type !== \"Group\" && isOptionalQuantifier === false)\n        ) {\n          break;\n        }\n      }\n      break;\n    /* istanbul ignore next */\n    default:\n      throw Error(\"non exhaustive match!\");\n  }\n\n  // console.log(Object.keys(result).length)\n  return values(result);\n}\n\nfunction addOptimizedIdxToResult(\n  code: number,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n) {\n  const optimizedCharIdx = charCodeToOptimizedIndex(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(\n  code: number,\n  result: { [charCode: number]: number },\n) {\n  const char = String.fromCharCode(code);\n  const upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n  if (upperChar !== char) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    const lowerChar = char.toLowerCase();\n    if (lowerChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(\n        lowerChar.charCodeAt(0),\n      );\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode: Set, targetCharCodes: number[]) {\n  return find(setNode.value, (codeOrRange) => {\n    if (typeof codeOrRange === \"number\") {\n      return includes(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      const range = <any>codeOrRange;\n      return (\n        find(\n          targetCharCodes,\n          (targetCode) => range.from <= targetCode && targetCode <= range.to,\n        ) !== undefined\n      );\n    }\n  });\n}\n\nfunction isWholeOptional(ast: any): boolean {\n  const quantifier = (ast as Atom).quantifier;\n  if (quantifier && quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return isArray(ast.value)\n    ? every(ast.value, isWholeOptional)\n    : isWholeOptional(ast.value);\n}\n\nclass CharCodeFinder extends BaseRegExpVisitor {\n  found: boolean = false;\n\n  constructor(private targetCharCodes: number[]) {\n    super();\n  }\n\n  visitChildren(node: ASTNode) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    }\n\n    // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    super.visitChildren(node);\n  }\n\n  visitCharacter(node: Character) {\n    if (includes(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  }\n\n  visitSet(node: Set) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  }\n}\n\nexport function canMatchCharCode(\n  charCodes: number[],\n  pattern: RegExp | string,\n) {\n  if (pattern instanceof RegExp) {\n    const ast = getRegExpAst(pattern);\n    const charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return (\n      find(<any>pattern, (char) => {\n        return includes(charCodes, (<string>char).charCodeAt(0));\n      }) !== undefined\n    );\n  }\n}\n","import { BaseRegExpVisitor } from \"@chevrotain/regexp-to-ast\";\nimport {\n  IRegExpExec,\n  Lexer,\n  LexerDefinitionErrorType,\n} from \"./lexer_public.js\";\nimport {\n  compact,\n  defaults,\n  difference,\n  filter,\n  find,\n  first,\n  flatten,\n  forEach,\n  has,\n  includes,\n  indexOf,\n  isArray,\n  isEmpty,\n  isFunction,\n  isRegExp,\n  isString,\n  isUndefined,\n  keys,\n  map,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport { PRINT_ERROR } from \"@chevrotain/utils\";\nimport {\n  canMatchCharCode,\n  failedOptimizationPrefixMsg,\n  getOptimizedStartCodesIndices,\n} from \"./reg_exp.js\";\nimport {\n  ILexerDefinitionError,\n  ILineTerminatorsTester,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\n\nconst PATTERN = \"PATTERN\";\nexport const DEFAULT_MODE = \"defaultMode\";\nexport const MODES = \"modes\";\n\nexport interface IPatternConfig {\n  pattern: IRegExpExec | string;\n  longerAlt: number[] | undefined;\n  canLineTerminator: boolean;\n  isCustom: boolean;\n  short: number | false;\n  group: string | undefined | false;\n  push: string | undefined;\n  pop: boolean;\n  tokenType: TokenType;\n  tokenTypeIdx: number;\n}\n\nexport interface IAnalyzeResult {\n  patternIdxToConfig: IPatternConfig[];\n  charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] };\n  emptyGroups: { [groupName: string]: IToken[] };\n  hasCustom: boolean;\n  canBeOptimized: boolean;\n}\n\nexport let SUPPORT_STICKY =\n  typeof (<any>new RegExp(\"(?:)\")).sticky === \"boolean\";\n\nexport function disableSticky() {\n  SUPPORT_STICKY = false;\n}\n\nexport function enableSticky() {\n  SUPPORT_STICKY = true;\n}\n\nexport function analyzeTokenTypes(\n  tokenTypes: TokenType[],\n  options: {\n    positionTracking?: \"full\" | \"onlyStart\" | \"onlyOffset\";\n    ensureOptimizations?: boolean;\n    lineTerminatorCharacters?: (number | string)[];\n    // TODO: should `useSticky` be an argument here?\n    useSticky?: boolean;\n    safeMode?: boolean;\n    tracer?: (msg: string, action: () => void) => void;\n  },\n): IAnalyzeResult {\n  options = defaults(options, {\n    useSticky: SUPPORT_STICKY,\n    debug: false as boolean,\n    safeMode: false as boolean,\n    positionTracking: \"full\",\n    lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n    tracer: (msg: string, action: Function) => action(),\n  });\n\n  const tracer = options.tracer!;\n\n  tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n    initCharCodeToOptimizedIndexMap();\n  });\n\n  let onlyRelevantTypes: TokenType[];\n  tracer(\"Reject Lexer.NA\", () => {\n    onlyRelevantTypes = reject(tokenTypes, (currType) => {\n      return currType[PATTERN] === Lexer.NA;\n    });\n  });\n\n  let hasCustom = false;\n  let allTransformedPatterns: (IRegExpExec | string)[];\n  tracer(\"Transform Patterns\", () => {\n    hasCustom = false;\n    allTransformedPatterns = map(\n      onlyRelevantTypes,\n      (currType): IRegExpExec | string => {\n        const currPattern = currType[PATTERN];\n\n        /* istanbul ignore else */\n        if (isRegExp(currPattern)) {\n          const regExpSource = currPattern.source;\n          if (\n            regExpSource.length === 1 &&\n            // only these regExp meta characters which can appear in a length one regExp\n            regExpSource !== \"^\" &&\n            regExpSource !== \"$\" &&\n            regExpSource !== \".\" &&\n            !currPattern.ignoreCase\n          ) {\n            return regExpSource;\n          } else if (\n            regExpSource.length === 2 &&\n            regExpSource[0] === \"\\\\\" &&\n            // not a meta character\n            !includes(\n              [\n                \"d\",\n                \"D\",\n                \"s\",\n                \"S\",\n                \"t\",\n                \"r\",\n                \"n\",\n                \"t\",\n                \"0\",\n                \"c\",\n                \"b\",\n                \"B\",\n                \"f\",\n                \"v\",\n                \"w\",\n                \"W\",\n              ],\n              regExpSource[1],\n            )\n          ) {\n            // escaped meta Characters: /\\+/ /\\[/\n            // or redundant escaping: /\\a/\n            // without the escaping \"\\\"\n            return regExpSource[1];\n          } else {\n            return options.useSticky\n              ? addStickyFlag(currPattern)\n              : addStartOfInput(currPattern);\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true;\n          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n          return { exec: currPattern };\n        } else if (typeof currPattern === \"object\") {\n          hasCustom = true;\n          // ICustomPattern\n          return currPattern;\n        } else if (typeof currPattern === \"string\") {\n          if (currPattern.length === 1) {\n            return currPattern;\n          } else {\n            const escapedRegExpString = currPattern.replace(\n              /[\\\\^$.*+?()[\\]{}|]/g,\n              \"\\\\$&\",\n            );\n            const wrappedRegExp = new RegExp(escapedRegExpString);\n            return options.useSticky\n              ? addStickyFlag(wrappedRegExp)\n              : addStartOfInput(wrappedRegExp);\n          }\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      },\n    );\n  });\n\n  let patternIdxToType: number[];\n  let patternIdxToGroup: (string | undefined | false)[];\n  let patternIdxToLongerAltIdxArr: (number[] | undefined)[];\n  let patternIdxToPushMode: (string | undefined)[];\n  let patternIdxToPopMode: boolean[];\n  tracer(\"misc mapping\", () => {\n    patternIdxToType = map(\n      onlyRelevantTypes,\n      (currType) => currType.tokenTypeIdx!,\n    );\n\n    patternIdxToGroup = map(onlyRelevantTypes, (clazz: any) => {\n      const groupName = clazz.GROUP;\n      /* istanbul ignore next */\n      if (groupName === Lexer.SKIPPED) {\n        return undefined;\n      } else if (isString(groupName)) {\n        return groupName;\n      } else if (isUndefined(groupName)) {\n        return false;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n\n    patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz: any) => {\n      const longerAltType = clazz.LONGER_ALT;\n\n      if (longerAltType) {\n        const longerAltIdxArr = isArray(longerAltType)\n          ? map(longerAltType, (type: any) => indexOf(onlyRelevantTypes, type))\n          : [indexOf(onlyRelevantTypes, longerAltType)];\n        return longerAltIdxArr;\n      }\n    });\n\n    patternIdxToPushMode = map(\n      onlyRelevantTypes,\n      (clazz: any) => clazz.PUSH_MODE,\n    );\n\n    patternIdxToPopMode = map(onlyRelevantTypes, (clazz: any) =>\n      has(clazz, \"POP_MODE\"),\n    );\n  });\n\n  let patternIdxToCanLineTerminator: boolean[];\n  tracer(\"Line Terminator Handling\", () => {\n    const lineTerminatorCharCodes = getCharCodes(\n      options.lineTerminatorCharacters!,\n    );\n    patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false);\n    if (options.positionTracking !== \"onlyOffset\") {\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n        if (has(tokType, \"LINE_BREAKS\")) {\n          return !!tokType.LINE_BREAKS;\n        } else {\n          return (\n            checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n            canMatchCharCode(\n              lineTerminatorCharCodes,\n              tokType.PATTERN as RegExp | string,\n            )\n          );\n        }\n      });\n    }\n  });\n\n  let patternIdxToIsCustom: boolean[];\n  let patternIdxToShort: (number | false)[];\n  let emptyGroups!: { [groupName: string]: IToken[] };\n  let patternIdxToConfig!: IPatternConfig[];\n  tracer(\"Misc Mapping #2\", () => {\n    patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n    patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n\n    emptyGroups = reduce(\n      onlyRelevantTypes,\n      (acc, clazz: any) => {\n        const groupName = clazz.GROUP;\n        if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n          acc[groupName] = [];\n        }\n        return acc;\n      },\n      {} as { [groupName: string]: IToken[] },\n    );\n\n    patternIdxToConfig = map(\n      allTransformedPatterns,\n      (x, idx): IPatternConfig => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx],\n        };\n      },\n    );\n  });\n\n  let canBeOptimized = true;\n  let charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] } =\n    [];\n\n  if (!options.safeMode) {\n    tracer(\"First Char Optimization\", () => {\n      charCodeToPatternIdxToConfig = reduce(\n        onlyRelevantTypes,\n        (result, currTokType, idx) => {\n          if (typeof currTokType.PATTERN === \"string\") {\n            const charCode = currTokType.PATTERN.charCodeAt(0);\n            const optimizedIdx = charCodeToOptimizedIndex(charCode);\n            addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n          } else if (isArray(currTokType.START_CHARS_HINT)) {\n            let lastOptimizedIdx: number;\n            forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n              const charCode =\n                typeof charOrInt === \"string\"\n                  ? charOrInt.charCodeAt(0)\n                  : charOrInt;\n              const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n              // Avoid adding the config multiple times\n              /* istanbul ignore else */\n              // - Difficult to check this scenario effects as it is only a performance\n              //   optimization that does not change correctness\n              if (lastOptimizedIdx !== currOptimizedIdx) {\n                lastOptimizedIdx = currOptimizedIdx;\n                addToMapOfArrays(\n                  result,\n                  currOptimizedIdx,\n                  patternIdxToConfig[idx],\n                );\n              }\n            });\n          } else if (isRegExp(currTokType.PATTERN)) {\n            if (currTokType.PATTERN.unicode) {\n              canBeOptimized = false;\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\n                  `${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                    \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\",\n                );\n              }\n            } else {\n              const optimizedCodes = getOptimizedStartCodesIndices(\n                currTokType.PATTERN,\n                options.ensureOptimizations,\n              );\n              /* istanbul ignore if */\n              // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n              // the first should be a different validation and the second cannot be tested.\n              if (isEmpty(optimizedCodes)) {\n                // we cannot understand what codes may start possible matches\n                // The optimization correctness requires knowing start codes for ALL patterns.\n                // Not actually sure this is an error, no debug message\n                canBeOptimized = false;\n              }\n              forEach(optimizedCodes, (code) => {\n                addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n              });\n            }\n          } else {\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(\n                `${failedOptimizationPrefixMsg}` +\n                  `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                  \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                  \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\",\n              );\n            }\n            canBeOptimized = false;\n          }\n\n          return result;\n        },\n        [] as { [charCode: number]: IPatternConfig[] },\n      );\n    });\n  }\n\n  return {\n    emptyGroups: emptyGroups,\n    patternIdxToConfig: patternIdxToConfig,\n    charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n    hasCustom: hasCustom,\n    canBeOptimized: canBeOptimized,\n  };\n}\n\nexport function validatePatterns(\n  tokenTypes: TokenType[],\n  validModesNames: string[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n\n  const missingResult = findMissingPatterns(tokenTypes);\n  errors = errors.concat(missingResult.errors);\n\n  const invalidResult = findInvalidPatterns(missingResult.valid);\n  const validTokenTypes = invalidResult.valid;\n  errors = errors.concat(invalidResult.errors);\n\n  errors = errors.concat(validateRegExpPattern(validTokenTypes));\n\n  errors = errors.concat(findInvalidGroupType(validTokenTypes));\n\n  errors = errors.concat(\n    findModesThatDoNotExist(validTokenTypes, validModesNames),\n  );\n\n  errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n\n  return errors;\n}\n\nfunction validateRegExpPattern(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n  const withRegExpPatterns = filter(tokenTypes, (currTokType) =>\n    isRegExp(currTokType[PATTERN]),\n  );\n\n  errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n\n  errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n\n  errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n\n  return errors;\n}\n\nexport interface ILexerFilterResult {\n  errors: ILexerDefinitionError[];\n  valid: TokenType[];\n}\n\nexport function findMissingPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n    return !has(currType, PATTERN);\n  });\n\n  const errors = map(tokenTypesWithMissingPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- missing static 'PATTERN' property\",\n      type: LexerDefinitionErrorType.MISSING_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n  return { errors, valid };\n}\n\nexport function findInvalidPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return (\n      !isRegExp(pattern) &&\n      !isFunction(pattern) &&\n      !has(pattern, \"exec\") &&\n      !isString(pattern)\n    );\n  });\n\n  const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' can only be a RegExp, a\" +\n        \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n      type: LexerDefinitionErrorType.INVALID_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n  return { errors, valid };\n}\n\nconst end_of_input = /[^\\\\][$]/;\n\nexport function findEndOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class EndAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitEndAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN;\n\n    try {\n      const regexpAst = getRegExpAst(pattern as RegExp);\n      const endAnchorVisitor = new EndAnchorFinder();\n      endAnchorVisitor.visit(regexpAst);\n\n      return endAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return end_of_input.test((pattern as RegExp).source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n        \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findEmptyMatchRegExps(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const matchesEmptyString = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    return pattern.test(\"\");\n  });\n\n  const errors = map(matchesEmptyString, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' must not match an empty string\",\n      type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\n\nexport function findStartOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class StartAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitStartAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    try {\n      const regexpAst = getRegExpAst(pattern);\n      const startAnchorVisitor = new StartAnchorFinder();\n      startAnchorVisitor.visit(regexpAst);\n\n      return startAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return start_of_input.test(pattern.source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnsupportedFlags(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidFlags = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n  });\n\n  const errors = map(invalidFlags, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n      type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const found: TokenType[] = [];\n  let identicalPatterns = map(tokenTypes, (outerType: any) => {\n    return reduce(\n      tokenTypes,\n      (result, innerType) => {\n        if (\n          outerType.PATTERN.source === (innerType.PATTERN as RegExp).source &&\n          !includes(found, innerType) &&\n          innerType.PATTERN !== Lexer.NA\n        ) {\n          // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n          // in essence we are creating Equivalence classes on equality relation.\n          found.push(innerType);\n          result.push(innerType);\n          return result;\n        }\n        return result;\n      },\n      [] as TokenType[],\n    );\n  });\n\n  identicalPatterns = compact(identicalPatterns);\n\n  const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n    return currIdenticalSet.length > 1;\n  });\n\n  const errors = map(duplicatePatterns, (setOfIdentical: any) => {\n    const tokenTypeNames = map(setOfIdentical, (currType: any) => {\n      return currType.name;\n    });\n\n    const dupPatternSrc = (<any>first(setOfIdentical)).PATTERN;\n    return {\n      message:\n        `The same RegExp pattern ->${dupPatternSrc}<-` +\n        `has been used in all of the following Token Types: ${tokenTypeNames.join(\n          \", \",\n        )} <-`,\n      type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n      tokenTypes: setOfIdentical,\n    };\n  });\n\n  return errors;\n}\n\nexport function findInvalidGroupType(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidTypes = filter(tokenTypes, (clazz: any) => {\n    if (!has(clazz, \"GROUP\")) {\n      return false;\n    }\n    const group = clazz.GROUP;\n\n    return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n  });\n\n  const errors = map(invalidTypes, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n      type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findModesThatDoNotExist(\n  tokenTypes: TokenType[],\n  validModes: string[],\n): ILexerDefinitionError[] {\n  const invalidModes = filter(tokenTypes, (clazz: any) => {\n    return (\n      clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE)\n    );\n  });\n\n  const errors = map(invalidModes, (tokType) => {\n    const msg =\n      `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n      `which does not exist`;\n    return {\n      message: msg,\n      type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n      tokenTypes: [tokType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnreachablePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  const canBeTested = reduce(\n    tokenTypes,\n    (result, tokType, idx) => {\n      const pattern = tokType.PATTERN;\n\n      if (pattern === Lexer.NA) {\n        return result;\n      }\n\n      // a more comprehensive validation for all forms of regExps would require\n      // deeper regExp analysis capabilities\n      if (isString(pattern)) {\n        result.push({ str: pattern, idx, tokenType: tokType });\n      } else if (isRegExp(pattern) && noMetaChar(pattern)) {\n        result.push({ str: pattern.source, idx, tokenType: tokType });\n      }\n      return result;\n    },\n    [] as { str: string; idx: number; tokenType: TokenType }[],\n  );\n\n  forEach(tokenTypes, (tokType, testIdx) => {\n    forEach(canBeTested, ({ str, idx, tokenType }) => {\n      if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n        const msg =\n          `Token: ->${tokenType.name}<- can never be matched.\\n` +\n          `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n          `in the lexer's definition.\\n` +\n          `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n        errors.push({\n          message: msg,\n          type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n          tokenTypes: [tokType, tokenType],\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nfunction testTokenType(str: string, pattern: any): boolean {\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    const regExpArray = pattern.exec(str);\n    return regExpArray !== null && regExpArray.index === 0;\n  } else if (isFunction(pattern)) {\n    // maintain the API of custom patterns\n    return pattern(str, 0, [], {});\n  } else if (has(pattern, \"exec\")) {\n    // maintain the API of custom patterns\n    return pattern.exec(str, 0, [], {});\n  } else if (typeof pattern === \"string\") {\n    return pattern === str;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction noMetaChar(regExp: RegExp): boolean {\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n  const metaChars = [\n    \".\",\n    \"\\\\\",\n    \"[\",\n    \"]\",\n    \"|\",\n    \"^\",\n    \"$\",\n    \"(\",\n    \")\",\n    \"?\",\n    \"*\",\n    \"+\",\n    \"{\",\n  ];\n  return (\n    find(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined\n  );\n}\n\nexport function addStartOfInput(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"i\" : \"\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`^(?:${pattern.source})`, flags);\n}\n\nexport function addStickyFlag(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`${pattern.source}`, flags);\n}\n\nexport function performRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  // some run time checks to help the end users.\n  if (!has(lexerDefinition, DEFAULT_MODE)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        DEFAULT_MODE +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n    });\n  }\n  if (!has(lexerDefinition, MODES)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        MODES +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n    });\n  }\n\n  if (\n    has(lexerDefinition, MODES) &&\n    has(lexerDefinition, DEFAULT_MODE) &&\n    !has(lexerDefinition.modes, lexerDefinition.defaultMode)\n  ) {\n    errors.push({\n      message:\n        `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n        `which does not exist\\n`,\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n    });\n  }\n\n  if (has(lexerDefinition, MODES)) {\n    forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n      forEach(currModeValue, (currTokType, currIdx) => {\n        if (isUndefined(currTokType)) {\n          errors.push({\n            message:\n              `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n              `<${currModeName}> at index: <${currIdx}>\\n`,\n            type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n          });\n        } else if (has(currTokType, \"LONGER_ALT\")) {\n          const longerAlt = isArray(currTokType.LONGER_ALT)\n            ? currTokType.LONGER_ALT\n            : [currTokType.LONGER_ALT];\n          forEach(longerAlt, (currLongerAlt) => {\n            if (\n              !isUndefined(currLongerAlt) &&\n              !includes(currModeValue, currLongerAlt)\n            ) {\n              errors.push({\n                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n              });\n            }\n          });\n        }\n      });\n    });\n  }\n\n  return errors;\n}\n\nexport function performWarningRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const warnings = [];\n  let hasAnyLineBreak = false;\n  const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n\n  const concreteTokenTypes = reject(\n    allTokenTypes,\n    (currType) => currType[PATTERN] === Lexer.NA,\n  );\n  const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n  if (trackLines) {\n    forEach(concreteTokenTypes, (tokType) => {\n      const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n      if (currIssue !== false) {\n        const message = buildLineBreakIssueMessage(tokType, currIssue);\n        const warningDescriptor = {\n          message,\n          type: currIssue.issue,\n          tokenType: tokType,\n        };\n        warnings.push(warningDescriptor);\n      } else {\n        // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n        if (has(tokType, \"LINE_BREAKS\")) {\n          if (tokType.LINE_BREAKS === true) {\n            hasAnyLineBreak = true;\n          }\n        } else {\n          if (\n            canMatchCharCode(terminatorCharCodes, tokType.PATTERN as RegExp)\n          ) {\n            hasAnyLineBreak = true;\n          }\n        }\n      }\n    });\n  }\n\n  if (trackLines && !hasAnyLineBreak) {\n    warnings.push({\n      message:\n        \"Warning: No LINE_BREAKS Found.\\n\" +\n        \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n        \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n    });\n  }\n  return warnings;\n}\n\nexport function cloneEmptyGroups(emptyGroups: {\n  [groupName: string]: IToken;\n}): { [groupName: string]: IToken } {\n  const clonedResult: any = {};\n  const groupKeys = keys(emptyGroups);\n\n  forEach(groupKeys, (currKey) => {\n    const currGroupValue = emptyGroups[currKey];\n\n    /* istanbul ignore else */\n    if (isArray(currGroupValue)) {\n      clonedResult[currKey] = [];\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  });\n\n  return clonedResult;\n}\n\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType: TokenType): boolean {\n  const pattern = tokenType.PATTERN;\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    return false;\n  } else if (isFunction(pattern)) {\n    // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n    return true;\n  } else if (has(pattern, \"exec\")) {\n    // ICustomPattern\n    return true;\n  } else if (isString(pattern)) {\n    return false;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function isShortPattern(pattern: any): number | false {\n  if (isString(pattern) && pattern.length === 1) {\n    return pattern.charCodeAt(0);\n  } else {\n    return false;\n  }\n}\n\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport const LineTerminatorOptimizedTester: ILineTerminatorsTester = {\n  // implements /\\n|\\r\\n?/g.test\n  test: function (text) {\n    const len = text.length;\n    for (let i = this.lastIndex; i < len; i++) {\n      const c = text.charCodeAt(i);\n      if (c === 10) {\n        this.lastIndex = i + 1;\n        return true;\n      } else if (c === 13) {\n        if (text.charCodeAt(i + 1) === 10) {\n          this.lastIndex = i + 2;\n        } else {\n          this.lastIndex = i + 1;\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n\n  lastIndex: 0,\n};\n\nfunction checkLineBreaksIssues(\n  tokType: TokenType,\n  lineTerminatorCharCodes: number[],\n):\n  | {\n      issue:\n        | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n        | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n      errMsg?: string;\n    }\n  | false {\n  if (has(tokType, \"LINE_BREAKS\")) {\n    // if the user explicitly declared the line_breaks option we will respect their choice\n    // and assume it is correct.\n    return false;\n  } else {\n    /* istanbul ignore else */\n    if (isRegExp(tokType.PATTERN)) {\n      try {\n        // TODO: why is the casting suddenly needed?\n        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN as RegExp);\n      } catch (e) {\n        /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n        return {\n          issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n          errMsg: (e as Error).message,\n        };\n      }\n      return false;\n    } else if (isString(tokType.PATTERN)) {\n      // string literal patterns can always be analyzed to detect line terminator usage\n      return false;\n    } else if (isCustomPattern(tokType)) {\n      // custom token types\n      return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n}\n\nexport function buildLineBreakIssueMessage(\n  tokType: TokenType,\n  details: {\n    issue:\n      | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n      | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n    errMsg?: string;\n  },\n): string {\n  /* istanbul ignore else */\n  if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n    return (\n      \"Warning: unable to identify line terminator usage in pattern.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      `\\t Root cause: ${details.errMsg}.\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\"\n    );\n  } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n    return (\n      \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\"\n    );\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction getCharCodes(charsOrCodes: (number | string)[]): number[] {\n  const charCodes = map(charsOrCodes, (numOrString) => {\n    if (isString(numOrString)) {\n      return numOrString.charCodeAt(0);\n    } else {\n      return numOrString;\n    }\n  });\n\n  return charCodes;\n}\n\nfunction addToMapOfArrays<T>(\n  map: Record<number, T[]>,\n  key: number,\n  value: T,\n): void {\n  if (map[key] === undefined) {\n    map[key] = [value];\n  } else {\n    map[key].push(value);\n  }\n}\n\nexport const minOptimizationVal = 256;\n\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap: number[] = [];\nexport function charCodeToOptimizedIndex(charCode: number): number {\n  return charCode < minOptimizationVal\n    ? charCode\n    : charCodeToOptimizedIdxMap[charCode];\n}\n\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n  if (isEmpty(charCodeToOptimizedIdxMap)) {\n    charCodeToOptimizedIdxMap = new Array(65536);\n    for (let i = 0; i < 65536; i++) {\n      charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n    }\n  }\n}\n","export function timer<T>(func: () => T): { time: number; value: T } {\n  const start = new Date().getTime();\n  const val = func();\n  const end = new Date().getTime();\n  const total = end - start;\n  return { time: total, value: val };\n}\n","import {\n  clone,\n  compact,\n  difference,\n  flatten,\n  forEach,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport { IToken, TokenType } from \"@chevrotain/types\";\n\nexport function tokenStructuredMatcher(\n  tokInstance: IToken,\n  tokConstructor: TokenType,\n) {\n  const instanceType = tokInstance.tokenTypeIdx;\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return (\n      tokConstructor.isParent === true &&\n      tokConstructor.categoryMatchesMap![instanceType] === true\n    );\n  }\n}\n\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(\n  token: IToken,\n  tokType: TokenType,\n) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexport let tokenShortNameIdx = 1;\nexport const tokenIdxToClass: { [tokenIdx: number]: TokenType } = {};\n\nexport function augmentTokenTypes(tokenTypes: TokenType[]): void {\n  // collect the parent Token Types as well.\n  const tokenTypesAndParents = expandCategories(tokenTypes);\n\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents);\n\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n\n  forEach(tokenTypesAndParents, (tokType) => {\n    tokType.isParent = tokType.categoryMatches!.length > 0;\n  });\n}\n\nexport function expandCategories(tokenTypes: TokenType[]): TokenType[] {\n  let result = clone(tokenTypes);\n\n  let categories = tokenTypes;\n  let searching = true;\n  while (searching) {\n    categories = compact(\n      flatten(map(categories, (currTokType) => currTokType.CATEGORIES)),\n    );\n\n    const newCategories = difference(categories, result);\n\n    result = result.concat(newCategories);\n\n    if (isEmpty(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n  return result;\n}\n\nexport function assignTokenDefaultProps(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    if (!hasShortKeyProperty(currTokType)) {\n      tokenIdxToClass[tokenShortNameIdx] = currTokType;\n      (<any>currTokType).tokenTypeIdx = tokenShortNameIdx++;\n    }\n\n    // CATEGORIES? : TokenType | TokenType[]\n    if (\n      hasCategoriesProperty(currTokType) &&\n      !isArray(currTokType.CATEGORIES)\n      // &&\n      // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES as unknown as TokenType];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexport function assignCategoriesTokensProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    forEach(currTokType.categoryMatchesMap!, (val, key) => {\n      currTokType.categoryMatches!.push(\n        tokenIdxToClass[key as unknown as number].tokenTypeIdx!,\n      );\n    });\n  });\n}\n\nexport function assignCategoriesMapProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexport function singleAssignCategoriesToksMap(\n  path: TokenType[],\n  nextNode: TokenType,\n): void {\n  forEach(path, (pathNode) => {\n    nextNode.categoryMatchesMap![pathNode.tokenTypeIdx!] = true;\n  });\n\n  forEach(nextNode.CATEGORIES, (nextCategory) => {\n    const newPath = path.concat(nextNode);\n    // avoids infinite loops due to cyclic categories.\n    if (!includes(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexport function hasShortKeyProperty(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n\nexport function hasCategoriesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"CATEGORIES\");\n}\n\nexport function hasExtendingTokensTypesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"categoryMatches\");\n}\n\nexport function hasExtendingTokensTypesMapProperty(\n  tokType: TokenType,\n): boolean {\n  return has(tokType, \"categoryMatchesMap\");\n}\n\nexport function isTokenType(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n","import { ILexerErrorMessageProvider, IToken } from \"@chevrotain/types\";\n\nexport const defaultLexerErrorProvider: ILexerErrorMessageProvider = {\n  buildUnableToPopLexerModeMessage(token: IToken): string {\n    return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n  },\n\n  buildUnexpectedCharactersMessage(\n    fullText: string,\n    startOffset: number,\n    length: number,\n    line?: number,\n    column?: number,\n  ): string {\n    return (\n      `unexpected character: ->${fullText.charAt(\n        startOffset,\n      )}<- at offset: ${startOffset},` + ` skipped ${length} characters.`\n    );\n  },\n};\n","import {\n  analyzeTokenTypes,\n  charCodeToOptimizedIndex,\n  cloneEmptyGroups,\n  DEFAULT_MODE,\n  IAnalyzeResult,\n  IPatternConfig,\n  LineTerminatorOptimizedTester,\n  performRuntimeChecks,\n  performWarningRuntimeChecks,\n  SUPPORT_STICKY,\n  validatePatterns,\n} from \"./lexer.js\";\nimport {\n  assign,\n  clone,\n  forEach,\n  identity,\n  isArray,\n  isEmpty,\n  isUndefined,\n  keys,\n  last,\n  map,\n  noop,\n  reduce,\n  reject,\n} from \"lodash-es\";\nimport { PRINT_WARNING, timer, toFastProperties } from \"@chevrotain/utils\";\nimport { augmentTokenTypes } from \"./tokens.js\";\nimport {\n  CustomPatternMatcherFunc,\n  CustomPatternMatcherReturn,\n  ILexerConfig,\n  ILexerDefinitionError,\n  ILexingError,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { defaultLexerErrorProvider } from \"./lexer_errors_public.js\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser.js\";\n\nexport interface ILexingResult {\n  tokens: IToken[];\n  groups: { [groupName: string]: IToken[] };\n  errors: ILexingError[];\n}\n\nexport enum LexerDefinitionErrorType {\n  MISSING_PATTERN,\n  INVALID_PATTERN,\n  EOI_ANCHOR_FOUND,\n  UNSUPPORTED_FLAGS_FOUND,\n  DUPLICATE_PATTERNS_FOUND,\n  INVALID_GROUP_TYPE_FOUND,\n  PUSH_MODE_DOES_NOT_EXIST,\n  MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n  MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n  MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n  LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n  SOI_ANCHOR_FOUND,\n  EMPTY_MATCH_PATTERN,\n  NO_LINE_BREAKS_FLAGS,\n  UNREACHABLE_PATTERN,\n  IDENTIFY_TERMINATOR,\n  CUSTOM_LINE_BREAK,\n  MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n}\n\nexport interface IRegExpExec {\n  exec: CustomPatternMatcherFunc;\n}\n\nconst DEFAULT_LEXER_CONFIG: Required<ILexerConfig> = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false,\n  recoveryEnabled: true,\n};\n\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nexport class Lexer {\n  public static SKIPPED =\n    \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n\n  public static NA = /NOT_APPLICABLE/;\n  public lexerDefinitionErrors: ILexerDefinitionError[] = [];\n  public lexerDefinitionWarning: ILexerDefinitionError[] = [];\n\n  protected patternIdxToConfig: Record<string, IPatternConfig[]> = {};\n  protected charCodeToPatternIdxToConfig: {\n    [modeName: string]: { [charCode: number]: IPatternConfig[] };\n  } = {};\n\n  protected modes: string[] = [];\n  protected defaultMode!: string;\n  protected emptyGroups: { [groupName: string]: IToken } = {};\n\n  private config: Required<ILexerConfig>;\n  private trackStartLines: boolean = true;\n  private trackEndLines: boolean = true;\n  private hasCustom: boolean = false;\n  private canModeBeOptimized: Record<string, boolean> = {};\n\n  private traceInitPerf!: boolean | number;\n  private traceInitMaxIdent!: number;\n  private traceInitIndent: number;\n\n  constructor(\n    protected lexerDefinition: TokenType[] | IMultiModeLexerDefinition,\n    config: ILexerConfig = DEFAULT_LEXER_CONFIG,\n  ) {\n    if (typeof config === \"boolean\") {\n      throw Error(\n        \"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n          \"a boolean 2nd argument is no longer supported\",\n      );\n    }\n\n    // todo: defaults func?\n    this.config = assign({}, DEFAULT_LEXER_CONFIG, config) as any;\n\n    const traceInitVal = this.config.traceInitPerf;\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n    this.traceInitIndent = -1;\n\n    this.TRACE_INIT(\"Lexer Constructor\", () => {\n      let actualDefinition!: IMultiModeLexerDefinition;\n      let hasOnlySingleMode = true;\n      this.TRACE_INIT(\"Lexer Config handling\", () => {\n        if (\n          this.config.lineTerminatorsPattern ===\n          DEFAULT_LEXER_CONFIG.lineTerminatorsPattern\n        ) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n        } else {\n          if (\n            this.config.lineTerminatorCharacters ===\n            DEFAULT_LEXER_CONFIG.lineTerminatorCharacters\n          ) {\n            throw Error(\n              \"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\",\n            );\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error(\n            '\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.',\n          );\n        }\n\n        this.trackStartLines = /full|onlyStart/i.test(\n          this.config.positionTracking,\n        );\n        this.trackEndLines = /full/i.test(this.config.positionTracking);\n\n        // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n        if (isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: { defaultMode: clone(lexerDefinition) },\n            defaultMode: DEFAULT_MODE,\n          };\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = clone(<IMultiModeLexerDefinition>lexerDefinition);\n        }\n      });\n\n      if (this.config.skipValidations === false) {\n        this.TRACE_INIT(\"performRuntimeChecks\", () => {\n          this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n            performRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n\n        this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n          this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(\n            performWarningRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n      }\n\n      // for extra robustness to avoid throwing an none informative error message\n      actualDefinition.modes = actualDefinition.modes\n        ? actualDefinition.modes\n        : {};\n\n      // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n      forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n        actualDefinition.modes[currModeName] = reject<TokenType>(\n          currModeValue,\n          (currTokType) => isUndefined(currTokType),\n        );\n      });\n\n      const allModeNames = keys(actualDefinition.modes);\n\n      forEach(\n        actualDefinition.modes,\n        (currModDef: TokenType[], currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName);\n\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n                  validatePatterns(currModDef, allModeNames),\n                );\n              });\n            }\n\n            // If definition errors were encountered, the analysis phase may fail unexpectedly/\n            // Considering a lexer with definition errors may never be used, there is no point\n            // to performing the analysis anyhow...\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef);\n\n              let currAnalyzeResult!: IAnalyzeResult;\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters:\n                    this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT,\n                });\n              });\n\n              this.patternIdxToConfig[currModName] =\n                currAnalyzeResult.patternIdxToConfig;\n\n              this.charCodeToPatternIdxToConfig[currModName] =\n                currAnalyzeResult.charCodeToPatternIdxToConfig;\n\n              this.emptyGroups = assign(\n                {},\n                this.emptyGroups,\n                currAnalyzeResult.emptyGroups,\n              ) as any;\n\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n\n              this.canModeBeOptimized[currModName] =\n                currAnalyzeResult.canBeOptimized;\n            }\n          });\n        },\n      );\n\n      this.defaultMode = actualDefinition.defaultMode;\n\n      if (\n        !isEmpty(this.lexerDefinitionErrors) &&\n        !this.config.deferDefinitionErrorsHandling\n      ) {\n        const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n          return error.message;\n        });\n        const allErrMessagesString = allErrMessages.join(\n          \"-----------------------\\n\",\n        );\n        throw new Error(\n          \"Errors detected in definition of Lexer:\\n\" + allErrMessagesString,\n        );\n      }\n\n      // Only print warning if there are no errors, This will avoid pl\n      forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n        PRINT_WARNING(warningDescriptor.message);\n      });\n\n      this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          this.chopInput = <any>identity;\n          this.match = this.matchWithTest;\n        } else {\n          this.updateLastIndex = noop;\n          this.match = this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          this.handleModes = noop;\n        }\n\n        if (this.trackStartLines === false) {\n          this.computeNewColumn = identity;\n        }\n\n        if (this.trackEndLines === false) {\n          this.updateTokenEndLineColumnLocation = noop;\n        }\n\n        if (/full/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createFullToken;\n        } else if (/onlyStart/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createOffsetOnlyToken;\n        } else {\n          throw Error(\n            `Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`,\n          );\n        }\n\n        if (this.hasCustom) {\n          this.addToken = this.addTokenUsingPush;\n          this.handlePayload = this.handlePayloadWithCustom;\n        } else {\n          this.addToken = this.addTokenUsingMemberAccess;\n          this.handlePayload = this.handlePayloadNoCustom;\n        }\n      });\n\n      this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n        const unOptimizedModes = reduce(\n          this.canModeBeOptimized,\n          (cannotBeOptimized, canBeOptimized, modeName) => {\n            if (canBeOptimized === false) {\n              cannotBeOptimized.push(modeName);\n            }\n            return cannotBeOptimized;\n          },\n          [] as string[],\n        );\n\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\n            `Lexer Modes: < ${unOptimizedModes.join(\n              \", \",\n            )} > cannot be optimized.\\n` +\n              '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n              \"\\t Or inspect the console log for details on how to resolve these issues.\",\n          );\n        }\n      });\n\n      this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n        clearRegExpParserCache();\n      });\n\n      this.TRACE_INIT(\"toFastProperties\", () => {\n        toFastProperties(this);\n      });\n    });\n  }\n\n  public tokenize(\n    text: string,\n    initialMode: string = this.defaultMode,\n  ): ILexingResult {\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n        return error.message;\n      });\n      const allErrMessagesString = allErrMessages.join(\n        \"-----------------------\\n\",\n      );\n      throw new Error(\n        \"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n          allErrMessagesString,\n      );\n    }\n\n    return this.tokenizeInternal(text, initialMode);\n  }\n\n  // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n  // this method also used quite a bit of `!` none null assertions because it is too optimized\n  // for `tsc` to always understand it is \"safe\"\n  private tokenizeInternal(text: string, initialMode: string): ILexingResult {\n    let i,\n      j,\n      k,\n      matchAltImage,\n      longerAlt,\n      matchedImage: string | null,\n      payload,\n      altPayload,\n      imageLength,\n      group,\n      tokType,\n      newToken: IToken,\n      errLength,\n      droppedChar,\n      msg,\n      match;\n    const orgText = text;\n    const orgLength = orgText.length;\n    let offset = 0;\n    let matchedTokensIndex = 0;\n    // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n    const guessedNumberOfTokens = this.hasCustom\n      ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n      : Math.floor(text.length / 10);\n    const matchedTokens = new Array(guessedNumberOfTokens);\n    const errors: ILexingError[] = [];\n    let line = this.trackStartLines ? 1 : undefined;\n    let column = this.trackStartLines ? 1 : undefined;\n    const groups: any = cloneEmptyGroups(this.emptyGroups);\n    const trackLines = this.trackStartLines;\n    const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n\n    let currModePatternsLength = 0;\n    let patternIdxToConfig: IPatternConfig[] = [];\n    let currCharCodeToPatternIdxToConfig: {\n      [charCode: number]: IPatternConfig[];\n    } = [];\n\n    const modeStack: string[] = [];\n\n    const emptyArray: IPatternConfig[] = [];\n    Object.freeze(emptyArray);\n    let getPossiblePatterns!: (charCode: number) => IPatternConfig[];\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode: number): IPatternConfig[] {\n      const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n      const possiblePatterns =\n        currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    const pop_mode = (popToken: IToken) => {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (\n        modeStack.length === 1 &&\n        // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n        // So no error should occur.\n        popToken.tokenType.PUSH_MODE === undefined\n      ) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        const msg =\n          this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(\n            popToken,\n          );\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine,\n          column: popToken.startColumn,\n          length: popToken.image.length,\n          message: msg,\n        });\n      } else {\n        modeStack.pop();\n        const newMode = last(modeStack)!;\n        patternIdxToConfig = this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig =\n          this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        const modeCanBeOptimized =\n          this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(this: Lexer, newMode: string) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig =\n        this.charCodeToPatternIdxToConfig[newMode];\n\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n\n      currModePatternsLength = patternIdxToConfig.length;\n      const modeCanBeOptimized =\n        this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    }\n\n    // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n    push_mode.call(this, initialMode);\n\n    let currConfig!: IPatternConfig;\n\n    const recoveryEnabled = this.config.recoveryEnabled;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n\n      const nextCharCode = orgText.charCodeAt(offset);\n      const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      const chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        const currPattern = currConfig.pattern;\n        payload = null;\n\n        // manually in-lined because > 600 chars won't be in-lined in V8\n        const singleCharCode = currConfig.short;\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern as string;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = (currPattern as IRegExpExec).exec(\n            orgText,\n            offset,\n            matchedTokens,\n            groups,\n          );\n          if (match !== null) {\n            matchedImage = match[0];\n            if ((match as CustomPatternMatcherReturn).payload !== undefined) {\n              payload = (match as CustomPatternMatcherReturn).payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern as RegExp, offset);\n          matchedImage = this.match(currPattern as RegExp, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAlt = currConfig.longerAlt;\n          if (longerAlt !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            const longerAltLength = longerAlt.length;\n            for (k = 0; k < longerAltLength; k++) {\n              const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n              const longerAltPattern = longerAltConfig.pattern;\n              altPayload = null;\n\n              // single Char can never be a longer alt so no need to test it.\n              // manually in-lined because > 600 chars won't be in-lined in V8\n              if (longerAltConfig.isCustom === true) {\n                match = (longerAltPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                );\n                if (match !== null) {\n                  matchAltImage = match[0];\n                  if (\n                    (match as CustomPatternMatcherReturn).payload !== undefined\n                  ) {\n                    altPayload = (match as CustomPatternMatcherReturn).payload;\n                  }\n                } else {\n                  matchAltImage = null;\n                }\n              } else {\n                this.updateLastIndex(longerAltPattern as RegExp, offset);\n                matchAltImage = this.match(\n                  longerAltPattern as RegExp,\n                  text,\n                  offset,\n                );\n              }\n\n              if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                matchedImage = matchAltImage;\n                payload = altPayload;\n                currConfig = longerAltConfig;\n                // Exit the loop early after matching one of the longer alternatives\n                // The first matched alternative takes precedence\n                break;\n              }\n            }\n          }\n          break;\n        }\n      }\n\n      // successful match\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx;\n          // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n          newToken = this.createTokenInstance(\n            matchedImage,\n            offset,\n            tokType,\n            currConfig.tokenType,\n            line,\n            column,\n            imageLength,\n          );\n\n          this.handlePayload(newToken, payload);\n\n          // TODO: optimize NOOP in case there are no special groups?\n          if (group === false) {\n            matchedTokensIndex = this.addToken(\n              matchedTokens,\n              matchedTokensIndex,\n              newToken,\n            );\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength;\n\n        // TODO: with newlines the column may be assigned twice\n        column = this.computeNewColumn(column!, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          let numOfLTsInMatch = 0;\n          let foundTerminator;\n          let lastLTEndOffset: number;\n          lineTerminatorPattern.lastIndex = 0;\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line! + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset!;\n            this.updateTokenEndLineColumnLocation(\n              newToken!,\n              group!,\n              lastLTEndOffset!,\n              numOfLTsInMatch,\n              line,\n              column,\n              imageLength,\n            );\n          }\n        }\n        // will be NOOP if no modes present\n        this.handleModes(currConfig, pop_mode, push_mode, newToken!);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        const errorStartOffset = offset;\n        const errorLine = line;\n        const errorColumn = column;\n        let foundResyncPoint = recoveryEnabled === false;\n\n        while (foundResyncPoint === false && offset < orgLength) {\n          // Identity Func (when sticky flag is enabled)\n          text = this.chopInput(text, 1);\n          offset++;\n          for (j = 0; j < currModePatternsLength; j++) {\n            const currConfig = patternIdxToConfig[j];\n            const currPattern = currConfig.pattern;\n\n            // manually in-lined because > 600 chars won't be in-lined in V8\n            const singleCharCode = currConfig.short;\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig.isCustom === true) {\n              foundResyncPoint =\n                (currPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                ) !== null;\n            } else {\n              this.updateLastIndex(currPattern as RegExp, offset);\n              foundResyncPoint = (currPattern as RegExp).exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset;\n        column = this.computeNewColumn(column!, errLength);\n        // at this point we either re-synced or reached the end of the input text\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(\n          orgText,\n          errorStartOffset,\n          errLength,\n          errorLine,\n          errorColumn,\n        );\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg,\n        });\n\n        if (recoveryEnabled === false) {\n          break;\n        }\n      }\n    }\n\n    // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors,\n    };\n  }\n\n  private handleModes(\n    config: IPatternConfig,\n    pop_mode: (tok: IToken) => void,\n    push_mode: (this: Lexer, pushMode: string) => void,\n    newToken: IToken,\n  ) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      const pushMode = config.push;\n      pop_mode(newToken);\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  }\n\n  private chopInput(text: string, length: number): string {\n    return text.substring(length);\n  }\n\n  private updateLastIndex(regExp: RegExp, newLastIndex: number): void {\n    regExp.lastIndex = newLastIndex;\n  }\n\n  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n  private updateTokenEndLineColumnLocation(\n    newToken: IToken,\n    group: string | false,\n    lastLTIdx: number,\n    numOfLTsInMatch: number,\n    line: number,\n    column: number,\n    imageLength: number,\n  ): void {\n    let lastCharIsLT, fixForEndingInLT;\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT;\n        // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      }\n      // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n    }\n  }\n\n  private computeNewColumn(oldColumn: number, imageLength: number) {\n    return oldColumn + imageLength;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private createTokenInstance!: (...args: any[]) => IToken;\n\n  private createOffsetOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n  ) {\n    return {\n      image,\n      startOffset,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createStartOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n  ) {\n    return {\n      image,\n      startOffset,\n      startLine,\n      startColumn,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createFullToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n    imageLength: number,\n  ): IToken {\n    return {\n      image,\n      startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine,\n      endLine: startLine,\n      startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private addToken!: (\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ) => number;\n\n  private addTokenUsingPush(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector.push(tokenToAdd);\n    return index;\n  }\n\n  private addTokenUsingMemberAccess(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n  private handlePayload: (token: IToken, payload: any) => void;\n\n  private handlePayloadNoCustom(token: IToken, payload: any): void {}\n\n  private handlePayloadWithCustom(token: IToken, payload: any): void {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  }\n\n  // place holder to be replaced with chosen alternative at runtime\n  private match!: (\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ) => string | null;\n\n  private matchWithTest(\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ): string | null {\n    const found = pattern.test(text);\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n    return null;\n  }\n\n  private matchWithExec(pattern: RegExp, text: string): string | null {\n    const regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : null;\n  }\n\n  // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n  TRACE_INIT = <T>(phaseDesc: string, phaseImpl: () => T): T => {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n}\n","import { has, isString, isUndefined } from \"lodash-es\";\nimport { Lexer } from \"./lexer_public.js\";\nimport { augmentTokenTypes, tokenStructuredMatcher } from \"./tokens.js\";\nimport { IToken, ITokenConfig, TokenType } from \"@chevrotain/types\";\n\nexport function tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\nexport function tokenName(tokType: TokenType): string {\n  return tokType.name;\n}\n\nexport function hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\n\nexport function createToken(config: ITokenConfig): TokenType {\n  return createTokenInternal(config);\n}\n\nfunction createTokenInternal(config: ITokenConfig): TokenType {\n  const pattern = config.pattern;\n\n  const tokenType: TokenType = <any>{};\n  tokenType.name = config.name;\n\n  if (!isUndefined(pattern)) {\n    tokenType.PATTERN = pattern;\n  }\n\n  if (has(config, PARENT)) {\n    throw (\n      \"The parent property is no longer supported.\\n\" +\n      \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\"\n    );\n  }\n\n  if (has(config, CATEGORIES)) {\n    // casting to ANY as this will be fixed inside `augmentTokenTypes``\n    tokenType.CATEGORIES = <any>config[CATEGORIES];\n  }\n\n  augmentTokenTypes([tokenType]);\n\n  if (has(config, LABEL)) {\n    tokenType.LABEL = config[LABEL];\n  }\n\n  if (has(config, GROUP)) {\n    tokenType.GROUP = config[GROUP];\n  }\n\n  if (has(config, POP_MODE)) {\n    tokenType.POP_MODE = config[POP_MODE];\n  }\n\n  if (has(config, PUSH_MODE)) {\n    tokenType.PUSH_MODE = config[PUSH_MODE];\n  }\n\n  if (has(config, LONGER_ALT)) {\n    tokenType.LONGER_ALT = config[LONGER_ALT];\n  }\n\n  if (has(config, LINE_BREAKS)) {\n    tokenType.LINE_BREAKS = config[LINE_BREAKS];\n  }\n\n  if (has(config, START_CHARS_HINT)) {\n    tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n  }\n\n  return tokenType;\n}\n\nexport const EOF = createToken({ name: \"EOF\", pattern: Lexer.NA });\naugmentTokenTypes([EOF]);\n\nexport function createTokenInstance(\n  tokType: TokenType,\n  image: string,\n  startOffset: number,\n  endOffset: number,\n  startLine: number,\n  endLine: number,\n  startColumn: number,\n  endColumn: number,\n): IToken {\n  return {\n    image,\n    startOffset,\n    endOffset,\n    startLine,\n    endLine,\n    startColumn,\n    endColumn,\n    tokenTypeIdx: (<any>tokType).tokenTypeIdx,\n    tokenType: tokType,\n  };\n}\n\nexport function tokenMatcher(token: IToken, tokType: TokenType): boolean {\n  return tokenStructuredMatcher(token, tokType);\n}\n","import { hasTokenLabel, tokenLabel } from \"../scan/tokens_public.js\";\nimport { first, map, reduce } from \"lodash-es\";\nimport {\n  Alternation,\n  getProductionDslName,\n  NonTerminal,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IParserErrorMessageProvider,\n  IProductionWithOccurrence,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n} from \"./grammar/types.js\";\n\nexport const defaultParserErrorProvider: IParserErrorMessageProvider = {\n  buildMismatchTokenMessage({ expected, actual, previous, ruleName }): string {\n    const hasLabel = hasTokenLabel(expected);\n    const expectedMsg = hasLabel\n      ? `--> ${tokenLabel(expected)} <--`\n      : `token of type --> ${expected.name} <--`;\n\n    const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n\n    return msg;\n  },\n\n  buildNotAllInputParsedMessage({ firstRedundant, ruleName }): string {\n    return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n  },\n\n  buildNoViableAltMessage({\n    expectedPathsPerAlt,\n    actual,\n    previous,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const allLookAheadPaths = reduce(\n        expectedPathsPerAlt,\n        (result, currAltPaths) => result.concat(currAltPaths),\n        [] as TokenType[][],\n      );\n      const nextValidTokenSequences = map(\n        allLookAheadPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \", \",\n          )}]`,\n      );\n      const nextValidSequenceItems = map(\n        nextValidTokenSequences,\n        (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`,\n      );\n      const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\n        \"\\n\",\n      )}`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n\n  buildEarlyExitMessage({\n    expectedIterationPaths,\n    actual,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const nextValidTokenSequences = map(\n        expectedIterationPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \",\",\n          )}]`,\n      );\n      const calculatedDescription =\n        `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n        `<${nextValidTokenSequences.join(\" ,\")}>`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n};\n\nObject.freeze(defaultParserErrorProvider);\n\nexport const defaultGrammarResolverErrorProvider: IGrammarResolverErrorMessageProvider =\n  {\n    buildRuleNotFoundError(\n      topLevelRule: Rule,\n      undefinedRule: NonTerminal,\n    ): string {\n      const msg =\n        \"Invalid grammar, reference to a rule which is not defined: ->\" +\n        undefinedRule.nonTerminalName +\n        \"<-\\n\" +\n        \"inside top level rule: ->\" +\n        topLevelRule.name +\n        \"<-\";\n      return msg;\n    },\n  };\n\nexport const defaultGrammarValidatorErrorProvider: IGrammarValidatorErrorMessageProvider =\n  {\n    buildDuplicateFoundError(\n      topLevelRule: Rule,\n      duplicateProds: IProductionWithOccurrence[],\n    ): string {\n      function getExtraProductionArgument(\n        prod: IProductionWithOccurrence,\n      ): string {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name;\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName;\n        } else {\n          return \"\";\n        }\n      }\n\n      const topLevelName = topLevelRule.name;\n      const duplicateProd = first(duplicateProds)!;\n      const index = duplicateProd.idx;\n      const dslName = getProductionDslName(duplicateProd);\n      const extraArgument = getExtraProductionArgument(duplicateProd);\n\n      const hasExplicitIndex = index > 0;\n      let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${\n        extraArgument ? `with argument: ->${extraArgument}<-` : \"\"\n      }\n                  appears more than once (${\n                    duplicateProds.length\n                  } times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n\n      // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n      msg = msg.replace(/[ \\t]+/g, \" \");\n      msg = msg.replace(/\\s\\s+/g, \"\\n\");\n\n      return msg;\n    },\n\n    buildNamespaceConflictError(rule: Rule): string {\n      const errMsg =\n        `Namespace conflict found in grammar.\\n` +\n        `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n        `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n        `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n        `and Non-Terminal names start with a lower case letter.`;\n\n      return errMsg;\n    },\n\n    buildAlternationPrefixAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currTok) =>\n        tokenLabel(currTok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      const errMsg =\n        `Ambiguous alternatives: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> due to common lookahead prefix\\n` +\n        `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n        `For Further details.`;\n\n      return errMsg;\n    },\n\n    buildAlternationAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currtok) =>\n        tokenLabel(currtok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      let currMessage =\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> in <OR${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n\n      currMessage =\n        currMessage +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n        `For Further details.`;\n      return currMessage;\n    },\n\n    buildEmptyRepetitionError(options: {\n      topLevelRule: Rule;\n      repetition: IProductionWithOccurrence;\n    }): string {\n      let dslName = getProductionDslName(options.repetition);\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx;\n      }\n\n      const errMsg =\n        `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n        `This could lead to an infinite loop.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options: {\n      tokenType: TokenType;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildEmptyAlternationError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n      emptyChoiceIdx: number;\n    }): string {\n      const errMsg =\n        `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n        ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n        `Only the last alternative may be an empty alternative.`;\n\n      return errMsg;\n    },\n\n    buildTooManyAlternativesError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n    }): string {\n      const errMsg =\n        `An Alternation cannot have more than 256 alternatives:\\n` +\n        `<OR${options.alternation.idx}> inside <${\n          options.topLevelRule.name\n        }> Rule.\\n has ${\n          options.alternation.definition.length + 1\n        } alternatives.`;\n\n      return errMsg;\n    },\n\n    buildLeftRecursionError(options: {\n      topLevelRule: Rule;\n      leftRecursionPath: Rule[];\n    }): string {\n      const ruleName = options.topLevelRule.name;\n      const pathNames = map(\n        options.leftRecursionPath,\n        (currRule) => currRule.name,\n      );\n      const leftRecursivePath = `${ruleName} --> ${pathNames\n        .concat([ruleName])\n        .join(\" --> \")}`;\n      const errMsg =\n        `Left Recursion found in grammar.\\n` +\n        `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n        `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n        ` To fix this refactor your grammar to remove the left recursion.\\n` +\n        `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options: {\n      topLevelRule: Rule;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildDuplicateRuleNameError(options: {\n      topLevelRule: Rule | string;\n      grammarName: string;\n    }): string {\n      let ruleName;\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name;\n      } else {\n        ruleName = options.topLevelRule;\n      }\n\n      const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n\n      return errMsg;\n    },\n  };\n","import {\n  IParserUnresolvedRefDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport { forEach, values } from \"lodash-es\";\nimport { GAstVisitor, NonTerminal, Rule } from \"@chevrotain/gast\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\n\nexport function resolveGrammar(\n  topLevels: Record<string, Rule>,\n  errMsgProvider: IGrammarResolverErrorMessageProvider,\n): IParserDefinitionError[] {\n  const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n  refResolver.resolveRefs();\n  return refResolver.errors;\n}\n\nexport class GastRefResolverVisitor extends GAstVisitor {\n  public errors: IParserUnresolvedRefDefinitionError[] = [];\n  private currTopLevel: Rule;\n\n  constructor(\n    private nameToTopRule: Record<string, Rule>,\n    private errMsgProvider: IGrammarResolverErrorMessageProvider,\n  ) {\n    super();\n  }\n\n  public resolveRefs(): void {\n    forEach(values(this.nameToTopRule), (prod) => {\n      this.currTopLevel = prod;\n      prod.accept(this);\n    });\n  }\n\n  public visitNonTerminal(node: NonTerminal): void {\n    const ref = this.nameToTopRule[node.nonTerminalName];\n\n    if (!ref) {\n      const msg = this.errMsgProvider.buildRuleNotFoundError(\n        this.currTopLevel,\n        node,\n      );\n      this.errors.push({\n        message: msg,\n        type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n        ruleName: this.currTopLevel.name,\n        unresolvedRefName: node.nonTerminalName,\n      });\n    } else {\n      node.referencedRule = ref;\n    }\n  }\n}\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import baseAssignValue from './_baseAssignValue.js';\nimport createAggregator from './_createAggregator.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nexport default groupBy;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.dropRight([1, 2, 3]);\n * // => [1, 2]\n *\n * _.dropRight([1, 2, 3], 2);\n * // => [1]\n *\n * _.dropRight([1, 2, 3], 5);\n * // => []\n *\n * _.dropRight([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction dropRight(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nexport default dropRight;\n","import {\n  clone,\n  drop,\n  dropRight,\n  first as _first,\n  forEach,\n  isEmpty,\n  last,\n} from \"lodash-es\";\nimport { first } from \"./first.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { TokenMatcher } from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IGrammarPath,\n  IProduction,\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport abstract class AbstractNextPossibleTokensWalker extends RestWalker {\n  protected possibleTokTypes: TokenType[] = [];\n  protected ruleStack: string[];\n  protected occurrenceStack: number[];\n\n  protected nextProductionName = \"\";\n  protected nextProductionOccurrence = 0;\n  protected found = false;\n  protected isAtEndOfPath = false;\n\n  constructor(\n    protected topProd: Rule,\n    protected path: IGrammarPath,\n  ) {\n    super();\n  }\n\n  startWalking(): TokenType[] {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    }\n\n    // immutable for the win\n    this.ruleStack = clone(this.path.ruleStack).reverse(); // intelij bug requires assertion\n    this.occurrenceStack = clone(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n\n    return this.possibleTokTypes;\n  }\n\n  walk(\n    prod: { definition: IProduction[] },\n    prevRest: IProduction[] = [],\n  ): void {\n    // stop scanning once we found the path\n    if (!this.found) {\n      super.walk(prod, prevRest);\n    }\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // found the next production, need to keep walking in it\n    if (\n      refProd.referencedRule.name === this.nextProductionName &&\n      refProd.idx === this.nextProductionOccurrence\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, <any>fullRest);\n    }\n  }\n\n  updateExpectedNext(): void {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop()!;\n      this.nextProductionOccurrence = this.occurrenceStack.pop()!;\n    }\n  }\n}\n\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n  private nextTerminalName = \"\";\n  private nextTerminalOccurrence = 0;\n\n  constructor(\n    topProd: Rule,\n    protected path: ITokenGrammarPath,\n  ) {\n    super(topProd, path);\n    this.nextTerminalName = this.path.lastTok.name;\n    this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      this.isAtEndOfPath &&\n      terminal.terminalType.name === this.nextTerminalName &&\n      terminal.idx === this.nextTerminalOccurrence &&\n      !this.found\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      const restProd = new Alternative({ definition: fullRest });\n      this.possibleTokTypes = first(restProd);\n      this.found = true;\n    }\n  }\n}\n\nexport type AlternativesFirstTokens = TokenType[][];\n\nexport interface IFirstAfterRepetition {\n  token: TokenType | undefined;\n  occurrence: number | undefined;\n  isEndOfRule: boolean | undefined;\n}\n\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n  protected result: IFirstAfterRepetition = {\n    token: undefined,\n    occurrence: undefined,\n    isEndOfRule: undefined,\n  };\n\n  constructor(\n    protected topRule: Rule,\n    protected occurrence: number,\n  ) {\n    super();\n  }\n\n  startWalking(): IFirstAfterRepetition {\n    this.walk(this.topRule);\n    return this.result;\n  }\n}\n\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manyProd.idx === this.occurrence) {\n      const firstAfterMany = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      super.walkMany(manyProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manySepProd.idx === this.occurrence) {\n      const firstAfterManySep = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      super.walkManySep(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atLeastOneProd.idx === this.occurrence) {\n      const firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n    }\n  }\n}\n\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOneSep(\n    atleastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      const firstAfterfirstAfterAtLeastOneSep = _first(\n        currRest.concat(prevRest),\n      );\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport interface PartialPathAndSuffixes {\n  partialPath: TokenType[];\n  suffixDef: IProduction[];\n}\n\nexport function possiblePathsFrom(\n  targetDef: IProduction[],\n  maxLength: number,\n  currPath: TokenType[] = [],\n): PartialPathAndSuffixes[] {\n  // avoid side effects\n  currPath = clone(currPath);\n  let result: PartialPathAndSuffixes[] = [];\n  let i = 0;\n\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef: IProduction[]) {\n    return nextDef.concat(drop(targetDef, i + 1));\n  }\n\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition: IProduction[]) {\n    const alternatives = possiblePathsFrom(\n      remainingPathWith(definition),\n      maxLength,\n      currPath,\n    );\n    return result.concat(alternatives);\n  }\n\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    const prod = targetDef[i];\n\n    /* istanbul ignore else */\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof RepetitionMandatory) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      const newDef = [\n        new Alternative({ definition: prod.definition }),\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Repetition) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, (currAlt) => {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i),\n  });\n\n  return result;\n}\n\ninterface IPathToExamine {\n  idx: number;\n  def: IProduction[];\n  ruleStack: string[];\n  occurrenceStack: number[];\n}\n\nexport function nextPossibleTokensAfter(\n  initialDef: IProduction[],\n  tokenVector: IToken[],\n  tokMatcher: TokenMatcher,\n  maxLookAhead: number,\n): ISyntacticContentAssistPath[] {\n  const EXIT_NON_TERMINAL: any = \"EXIT_NONE_TERMINAL\";\n  // to avoid creating a new Array each time.\n  const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  const EXIT_ALTERNATIVE: any = \"EXIT_ALTERNATIVE\";\n  let foundCompletePath = false;\n\n  const tokenVectorLength = tokenVector.length;\n  const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n\n  const result: ISyntacticContentAssistPath[] = [];\n\n  const possiblePaths: IPathToExamine[] = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: [],\n  });\n\n  while (!isEmpty(possiblePaths)) {\n    const currPath = possiblePaths.pop()!;\n\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (\n        foundCompletePath &&\n        last(possiblePaths)!.idx <= minimalAlternativesIndex\n      ) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n      continue;\n    }\n\n    const currDef = currPath.def;\n    const currIdx = currPath.idx;\n    const currRuleStack = currPath.ruleStack;\n    const currOccurrenceStack = currPath.occurrenceStack;\n\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if (isEmpty(currDef)) {\n      continue;\n    }\n\n    const prod = currDef[0];\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      const nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack),\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        const nextIdx = currIdx + 1;\n        const actualToken = tokenVector[nextIdx];\n        if (tokMatcher!(actualToken, prod.terminalType)) {\n          const nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          };\n          possiblePaths.push(nextPath);\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof NonTerminal) {\n      const newRuleStack = clone(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n\n      const newOccurrenceStack = clone(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n\n      const nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const secondIteration = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const nthRepetition = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      const nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (let i = prod.definition.length - 1; i >= 0; i--) {\n        const currAlt: any = prod.definition[i];\n        const currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      });\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(\n        expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack),\n      );\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  return result;\n}\n\nfunction expandTopLevelRule(\n  topRule: Rule,\n  currIdx: number,\n  currRuleStack: string[],\n  currOccurrenceStack: number[],\n): IPathToExamine {\n  const newRuleStack = clone(currRuleStack);\n  newRuleStack.push(topRule.name);\n\n  const newCurrOccurrenceStack = clone(currOccurrenceStack);\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1);\n\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack,\n  };\n}\n","import { every, flatten, forEach, has, isEmpty, map, reduce } from \"lodash-es\";\nimport { possiblePathsFrom } from \"./interpreter.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { Predicate, TokenMatcher } from \"../parser/parser.js\";\nimport {\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../scan/tokens.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n} from \"@chevrotain/gast\";\nimport {\n  BaseParser,\n  IOrAlt,\n  IProduction,\n  IProductionWithOccurrence,\n  LookaheadProductionType,\n  LookaheadSequence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport enum PROD_TYPE {\n  OPTION,\n  REPETITION,\n  REPETITION_MANDATORY,\n  REPETITION_MANDATORY_WITH_SEPARATOR,\n  REPETITION_WITH_SEPARATOR,\n  ALTERNATION,\n}\n\nexport function getProdType(\n  prod: IProduction | LookaheadProductionType,\n): PROD_TYPE {\n  /* istanbul ignore else */\n  if (prod instanceof Option || prod === \"Option\") {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof Repetition || prod === \"Repetition\") {\n    return PROD_TYPE.REPETITION;\n  } else if (\n    prod instanceof RepetitionMandatory ||\n    prod === \"RepetitionMandatory\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod === \"RepetitionMandatoryWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (\n    prod instanceof RepetitionWithSeparator ||\n    prod === \"RepetitionWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof Alternation || prod === \"Alternation\") {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function getLookaheadPaths(options: {\n  occurrence: number;\n  rule: Rule;\n  prodType: LookaheadProductionType;\n  maxLookahead: number;\n}): LookaheadSequence[] {\n  const { occurrence, rule, prodType, maxLookahead } = options;\n  const type = getProdType(prodType);\n  if (type === PROD_TYPE.ALTERNATION) {\n    return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n  } else {\n    return getLookaheadPathsForOptionalProd(\n      occurrence,\n      rule,\n      type,\n      maxLookahead,\n    );\n  }\n}\n\nexport function buildLookaheadFuncForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  maxLookahead: number,\n  hasPredicates: boolean,\n  dynamicTokensEnabled: boolean,\n  laFuncBuilder: Function,\n): (orAlts?: IOrAlt<any>[]) => number | undefined {\n  const lookAheadPaths = getLookaheadPathsForOr(\n    occurrence,\n    ruleGrammar,\n    maxLookahead,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return laFuncBuilder(\n    lookAheadPaths,\n    hasPredicates,\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  dynamicTokensEnabled: boolean,\n  prodType: PROD_TYPE,\n  lookaheadBuilder: (\n    lookAheadSequence: LookaheadSequence,\n    tokenMatcher: TokenMatcher,\n    dynamicTokensEnabled: boolean,\n  ) => () => boolean,\n): () => boolean {\n  const lookAheadPaths = getLookaheadPathsForOptionalProd(\n    occurrence,\n    ruleGrammar,\n    prodType,\n    k,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return lookaheadBuilder(\n    lookAheadPaths[0],\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\nexport type Alternative = TokenType[][];\n\nexport function buildAlternativesLookAheadFunc(\n  alts: LookaheadSequence[],\n  hasPredicates: boolean,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): (orAlts: IOrAlt<any>[]) => number | undefined {\n  const numOfAlts = alts.length;\n  const areAllOneTokenLookahead = every(alts, (currAlt) => {\n    return every(currAlt, (currPath) => {\n      return currPath.length === 1;\n    });\n  });\n\n  // This version takes into account the predicates as well.\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (\n      this: BaseParser,\n      orAlts: IOrAlt<any>[],\n    ): number | undefined {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      const predicates: (Predicate | undefined)[] = map(\n        orAlts,\n        (currAlt) => currAlt.GATE,\n      );\n\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n\n        const currPredicate = predicates[t];\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    const singleTokenAlts = map(alts, (currAlt) => {\n      return flatten(currAlt);\n    });\n\n    const choiceToAlt = reduce(\n      singleTokenAlts,\n      (result, currAlt, idx) => {\n        forEach(currAlt, (currTokType) => {\n          if (!has(result, currTokType.tokenTypeIdx!)) {\n            result[currTokType.tokenTypeIdx!] = idx;\n          }\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            if (!has(result, currExtendingType)) {\n              result[currExtendingType] = idx;\n            }\n          });\n        });\n        return result;\n      },\n      {} as Record<number, number>,\n    );\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number {\n      const nextToken = this.LA(1);\n      return choiceToAlt[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number | undefined {\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  }\n}\n\nexport function buildSingleAlternativeLookaheadFunction(\n  alt: LookaheadSequence,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): () => boolean {\n  const areAllOneTokenLookahead = every(alt, (currPath) => {\n    return currPath.length === 1;\n  });\n\n  const numOfPaths = alt.length;\n\n  // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    const singleTokensTypes = flatten(alt);\n\n    if (\n      singleTokensTypes.length === 1 &&\n      isEmpty((<any>singleTokensTypes[0]).categoryMatches)\n    ) {\n      const expectedTokenType = singleTokensTypes[0];\n      const expectedTokenUniqueKey = (<any>expectedTokenType).tokenTypeIdx;\n\n      return function (this: BaseParser): boolean {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n      };\n    } else {\n      const choiceToAlt = reduce(\n        singleTokensTypes,\n        (result, currTokType, idx) => {\n          result[currTokType.tokenTypeIdx!] = true;\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            result[currExtendingType] = true;\n          });\n          return result;\n        },\n        [] as boolean[],\n      );\n\n      return function (this: BaseParser): boolean {\n        const nextToken = this.LA(1);\n        return choiceToAlt[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function (this: BaseParser): boolean {\n      nextPath: for (let j = 0; j < numOfPaths; j++) {\n        const currPath = alt[j];\n        const currPathLength = currPath.length;\n        for (let i = 0; i < currPathLength; i++) {\n          const nextToken = this.LA(i + 1);\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        }\n        // found a full path that matches.\n        return true;\n      }\n\n      // none of the paths matched\n      return false;\n    };\n  }\n}\n\nclass RestDefinitionFinderWalker extends RestWalker {\n  private restDef: IProduction[];\n\n  constructor(\n    private topProd: Rule,\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n  ) {\n    super();\n  }\n\n  startWalking(): IProduction[] {\n    this.walk(this.topProd);\n    return this.restDef;\n  }\n\n  private checkIsTarget(\n    node: IProductionWithOccurrence,\n    expectedProdType: PROD_TYPE,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): boolean {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdType\n    ) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    }\n    // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n    return false;\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      super.walkOption(optionProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneProd,\n        PROD_TYPE.REPETITION_MANDATORY,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneSepProd,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneSepProd, currRest, prevRest);\n    }\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)\n    ) {\n      super.walkOption(manyProd, currRest, prevRest);\n    }\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        manySepProd,\n        PROD_TYPE.REPETITION_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends GAstVisitor {\n  public result: IProduction[] = [];\n\n  constructor(\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n    private targetRef?: any,\n  ) {\n    super();\n  }\n\n  private checkIsTarget(\n    node: { definition: IProduction[] } & IProductionWithOccurrence,\n    expectedProdName: PROD_TYPE,\n  ): void {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdName &&\n      (this.targetRef === undefined || node === this.targetRef)\n    ) {\n      this.result = node.definition;\n    }\n  }\n\n  public visitOption(node: Option): void {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  }\n\n  public visitRepetition(node: Repetition): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  }\n\n  public visitRepetitionMandatory(node: RepetitionMandatory): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  }\n\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  }\n\n  public visitAlternation(node: Alternation): void {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  }\n}\n\nfunction initializeArrayOfArrays(size: number): any[][] {\n  const result = new Array(size);\n  for (let i = 0; i < size; i++) {\n    result[i] = [];\n  }\n  return result;\n}\n\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path: TokenType[]): string[] {\n  let keys = [\"\"];\n  for (let i = 0; i < path.length; i++) {\n    const tokType = path[i];\n    const longerKeys = [];\n    for (let j = 0; j < keys.length; j++) {\n      const currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n      for (let t = 0; t < tokType.categoryMatches!.length; t++) {\n        const categoriesKeySuffix = \"_\" + tokType.categoryMatches![t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n    keys = longerKeys;\n  }\n  return keys;\n}\n\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(\n  altKnownPathsKeys: Record<string, boolean>[],\n  searchPathKeys: string[],\n  idx: number,\n): boolean {\n  for (\n    let currAltIdx = 0;\n    currAltIdx < altKnownPathsKeys.length;\n    currAltIdx++\n  ) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n    const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n    for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      const searchKey = searchPathKeys[searchIdx];\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  }\n  // None of the SearchPathKeys were found in any of the other alternatives\n  return true;\n}\n\nexport function lookAheadSequenceFromAlternatives(\n  altsDefs: IProduction[],\n  k: number,\n): LookaheadSequence[] {\n  const partialAlts = map(altsDefs, (currAlt) =>\n    possiblePathsFrom([currAlt], 1),\n  );\n  const finalResult = initializeArrayOfArrays(partialAlts.length);\n  const altsHashes = map(partialAlts, (currAltPaths) => {\n    const dict: { [key: string]: boolean } = {};\n    forEach(currAltPaths, (item) => {\n      const keys = pathToHashKeys(item.partialPath);\n      forEach(keys, (currKey) => {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  let newData = partialAlts;\n\n  // maxLookahead loop\n  for (let pathLength = 1; pathLength <= k; pathLength++) {\n    const currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n\n    // alternatives loop\n    for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      const currAltPathsAndSuffixes = currDataset[altIdx];\n      // paths in current alternative loop\n      for (\n        let currPathIdx = 0;\n        currPathIdx < currAltPathsAndSuffixes.length;\n        currPathIdx++\n      ) {\n        const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        const prefixKeys = pathToHashKeys(currPathPrefix);\n        const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n        // End of the line for this path.\n        if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n          const currAltResult = finalResult[altIdx];\n          // TODO: Can we implement a containsPath using Maps/Dictionaries?\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix);\n            // Update all new  keys for the current path.\n            for (let j = 0; j < prefixKeys.length; j++) {\n              const currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        }\n        // Expand longer paths\n        else {\n          const newPartialPathsAndSuffixes = possiblePathsFrom(\n            suffixDef,\n            pathLength + 1,\n            currPathPrefix,\n          );\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n\n          // Update keys for new known paths\n          forEach(newPartialPathsAndSuffixes, (item) => {\n            const prefixKeys = pathToHashKeys(item.partialPath);\n            forEach(prefixKeys, (key) => {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    }\n  }\n\n  return finalResult;\n}\n\nexport function getLookaheadPathsForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  orProd?: Alternation,\n): LookaheadSequence[] {\n  const visitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    PROD_TYPE.ALTERNATION,\n    orProd,\n  );\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\n\nexport function getLookaheadPathsForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  prodType: PROD_TYPE,\n  k: number,\n): LookaheadSequence[] {\n  const insideDefVisitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    prodType,\n  );\n  ruleGrammar.accept(insideDefVisitor);\n  const insideDef = insideDefVisitor.result;\n\n  const afterDefWalker = new RestDefinitionFinderWalker(\n    ruleGrammar,\n    occurrence,\n    prodType,\n  );\n  const afterDef = afterDefWalker.startWalking();\n\n  const insideFlat = new AlternativeGAST({ definition: insideDef });\n  const afterFlat = new AlternativeGAST({ definition: afterDef });\n\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\n\nexport function containsPath(\n  alternative: Alternative,\n  searchPath: TokenType[],\n): boolean {\n  compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n    const otherPath = alternative[i];\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n    for (let j = 0; j < otherPath.length; j++) {\n      const searchTok = searchPath[j];\n      const otherTok = otherPath[j];\n\n      const matchingTokens =\n        searchTok === otherTok ||\n        otherTok.categoryMatchesMap![searchTok.tokenTypeIdx!] !== undefined;\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nexport function isStrictPrefixOfPath(\n  prefix: TokenType[],\n  other: TokenType[],\n): boolean {\n  return (\n    prefix.length < other.length &&\n    every(prefix, (tokType, idx) => {\n      const otherTokType = other[idx];\n      return (\n        tokType === otherTokType ||\n        otherTokType.categoryMatchesMap![tokType.tokenTypeIdx!]\n      );\n    })\n  );\n}\n\nexport function areTokenCategoriesNotUsed(\n  lookAheadPaths: LookaheadSequence[],\n): boolean {\n  return every(lookAheadPaths, (singleAltPaths) =>\n    every(singleAltPaths, (singlePath) =>\n      every(singlePath, (token) => isEmpty(token.categoryMatches!)),\n    ),\n  );\n}\n","import {\n  clone,\n  compact,\n  difference,\n  drop,\n  dropRight,\n  filter,\n  first,\n  flatMap,\n  flatten,\n  forEach,\n  groupBy,\n  includes,\n  isEmpty,\n  map,\n  pickBy,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport {\n  IParserAmbiguousAlternativesDefinitionError,\n  IParserDuplicatesDefinitionError,\n  IParserEmptyAlternativeDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  getProductionDslName,\n  isOptionalProd,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  Alternative,\n  containsPath,\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  getProdType,\n  isStrictPrefixOfPath,\n} from \"./lookahead.js\";\nimport { nextPossibleTokensAfter } from \"./interpreter.js\";\nimport {\n  ILookaheadStrategy,\n  IProduction,\n  IProductionWithOccurrence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\nimport { tokenStructuredMatcher } from \"../../scan/tokens.js\";\n\nexport function validateLookahead(options: {\n  lookaheadStrategy: ILookaheadStrategy;\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n}): IParserDefinitionError[] {\n  const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n    rules: options.rules,\n    tokenTypes: options.tokenTypes,\n    grammarName: options.grammarName,\n  });\n  return map(lookaheadValidationErrorMessages, (errorMessage) => ({\n    type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION,\n    ...errorMessage,\n  }));\n}\n\nexport function validateGrammar(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  grammarName: string,\n): IParserDefinitionError[] {\n  const duplicateErrors: IParserDefinitionError[] = flatMap(\n    topLevels,\n    (currTopLevel) =>\n      validateDuplicateProductions(currTopLevel, errMsgProvider),\n  );\n\n  const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(\n    topLevels,\n    tokenTypes,\n    errMsgProvider,\n  );\n\n  const tooManyAltsErrors = flatMap(topLevels, (curRule) =>\n    validateTooManyAlts(curRule, errMsgProvider),\n  );\n\n  const duplicateRulesError = flatMap(topLevels, (curRule) =>\n    validateRuleDoesNotAlreadyExist(\n      curRule,\n      topLevels,\n      grammarName,\n      errMsgProvider,\n    ),\n  );\n\n  return duplicateErrors.concat(\n    termsNamespaceConflictErrors,\n    tooManyAltsErrors,\n    duplicateRulesError,\n  );\n}\n\nfunction validateDuplicateProductions(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDuplicatesDefinitionError[] {\n  const collectorVisitor = new OccurrenceValidationCollector();\n  topLevelRule.accept(collectorVisitor);\n  const allRuleProductions = collectorVisitor.allProductions;\n\n  const productionGroups = groupBy(\n    allRuleProductions,\n    identifyProductionForDuplicates,\n  );\n\n  const duplicates: any = pickBy(productionGroups, (currGroup) => {\n    return currGroup.length > 1;\n  });\n\n  const errors = map(values(duplicates), (currDuplicates: any) => {\n    const firstProd: any = first(currDuplicates);\n    const msg = errMsgProvider.buildDuplicateFoundError(\n      topLevelRule,\n      currDuplicates,\n    );\n    const dslName = getProductionDslName(firstProd);\n    const defError: IParserDuplicatesDefinitionError = {\n      message: msg,\n      type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n      ruleName: topLevelRule.name,\n      dslName: dslName,\n      occurrence: firstProd.idx,\n    };\n\n    const param = getExtraProductionArgument(firstProd);\n    if (param) {\n      defError.parameter = param;\n    }\n\n    return defError;\n  });\n  return errors;\n}\n\nexport function identifyProductionForDuplicates(\n  prod: IProductionWithOccurrence,\n): string {\n  return `${getProductionDslName(prod)}_#_${\n    prod.idx\n  }_#_${getExtraProductionArgument(prod)}`;\n}\n\nfunction getExtraProductionArgument(prod: IProductionWithOccurrence): string {\n  if (prod instanceof Terminal) {\n    return prod.terminalType.name;\n  } else if (prod instanceof NonTerminal) {\n    return prod.nonTerminalName;\n  } else {\n    return \"\";\n  }\n}\n\nexport class OccurrenceValidationCollector extends GAstVisitor {\n  public allProductions: IProductionWithOccurrence[] = [];\n\n  public visitNonTerminal(subrule: NonTerminal): void {\n    this.allProductions.push(subrule);\n  }\n\n  public visitOption(option: Option): void {\n    this.allProductions.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.allProductions.push(or);\n  }\n\n  public visitTerminal(terminal: Terminal): void {\n    this.allProductions.push(terminal);\n  }\n}\n\nexport function validateRuleDoesNotAlreadyExist(\n  rule: Rule,\n  allRules: Rule[],\n  className: string,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors = [];\n  const occurrences = reduce(\n    allRules,\n    (result, curRule) => {\n      if (curRule.name === rule.name) {\n        return result + 1;\n      }\n      return result;\n    },\n    0,\n  );\n  if (occurrences > 1) {\n    const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n      topLevelRule: rule,\n      grammarName: className,\n    });\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n      ruleName: rule.name,\n    });\n  }\n\n  return errors;\n}\n\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nexport function validateRuleIsOverridden(\n  ruleName: string,\n  definedRulesNames: string[],\n  className: string,\n): IParserDefinitionError[] {\n  const errors = [];\n  let errMsg;\n\n  if (!includes(definedRulesNames, ruleName)) {\n    errMsg =\n      `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n      `as it is not defined in any of the super grammars `;\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n      ruleName: ruleName,\n    });\n  }\n\n  return errors;\n}\n\nexport function validateNoLeftRecursion(\n  topRule: Rule,\n  currRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  path: Rule[] = [],\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n  if (isEmpty(nextNonTerminals)) {\n    return [];\n  } else {\n    const ruleName = topRule.name;\n    const foundLeftRecursion = includes(nextNonTerminals, topRule);\n    if (foundLeftRecursion) {\n      errors.push({\n        message: errMsgProvider.buildLeftRecursionError({\n          topLevelRule: topRule,\n          leftRecursionPath: path,\n        }),\n        type: ParserDefinitionErrorType.LEFT_RECURSION,\n        ruleName: ruleName,\n      });\n    }\n\n    // we are only looking for cyclic paths leading back to the specific topRule\n    // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n    const validNextSteps = difference(nextNonTerminals, path.concat([topRule]));\n    const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n      const newPath = clone(path);\n      newPath.push(currRefRule);\n      return validateNoLeftRecursion(\n        topRule,\n        currRefRule,\n        errMsgProvider,\n        newPath,\n      );\n    });\n\n    return errors.concat(errorsFromNextSteps);\n  }\n}\n\nexport function getFirstNoneTerminal(definition: IProduction[]): Rule[] {\n  let result: Rule[] = [];\n  if (isEmpty(definition)) {\n    return result;\n  }\n  const firstProd = first(definition);\n\n  /* istanbul ignore else */\n  if (firstProd instanceof NonTerminal) {\n    result.push(firstProd.referencedRule);\n  } else if (\n    firstProd instanceof AlternativeGAST ||\n    firstProd instanceof Option ||\n    firstProd instanceof RepetitionMandatory ||\n    firstProd instanceof RepetitionMandatoryWithSeparator ||\n    firstProd instanceof RepetitionWithSeparator ||\n    firstProd instanceof Repetition\n  ) {\n    result = result.concat(\n      getFirstNoneTerminal(<IProduction[]>firstProd.definition),\n    );\n  } else if (firstProd instanceof Alternation) {\n    // each sub definition in alternation is a FLAT\n    result = flatten(\n      map(firstProd.definition, (currSubDef) =>\n        getFirstNoneTerminal((<AlternativeGAST>currSubDef).definition),\n      ),\n    );\n  } else if (firstProd instanceof Terminal) {\n    // nothing to see, move along\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n\n  const isFirstOptional = isOptionalProd(firstProd);\n  const hasMore = definition.length > 1;\n  if (isFirstOptional && hasMore) {\n    const rest = drop(definition);\n    return result.concat(getFirstNoneTerminal(rest));\n  } else {\n    return result;\n  }\n}\n\nclass OrCollector extends GAstVisitor {\n  public alternations: Alternation[] = [];\n\n  public visitAlternation(node: Alternation): void {\n    this.alternations.push(node);\n  }\n}\n\nexport function validateEmptyOrAlternative(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserEmptyAlternativeDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap<Alternation, IParserEmptyAlternativeDefinitionError>(\n    ors,\n    (currOr) => {\n      const exceptLast = dropRight(currOr.definition);\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter(\n          [currAlternative],\n          [],\n          tokenStructuredMatcher,\n          1,\n        );\n        if (isEmpty(possibleFirstInAlt)) {\n          return [\n            {\n              message: errMsgProvider.buildEmptyAlternationError({\n                topLevelRule: topLevelRule,\n                alternation: currOr,\n                emptyChoiceIdx: currAltIdx,\n              }),\n              type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n              ruleName: topLevelRule.name,\n              occurrence: currOr.idx,\n              alternative: currAltIdx + 1,\n            },\n          ];\n        } else {\n          return [];\n        }\n      });\n    },\n  );\n\n  return errors;\n}\n\nexport function validateAmbiguousAlternationAlternatives(\n  topLevelRule: Rule,\n  globalMaxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  let ors = orCollector.alternations;\n\n  // New Handling of ignoring ambiguities\n  // - https://github.com/chevrotain/chevrotain/issues/869\n  ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true);\n\n  const errors = flatMap(ors, (currOr: Alternation) => {\n    const currOccurrence = currOr.idx;\n    const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n    const alternatives = getLookaheadPathsForOr(\n      currOccurrence,\n      topLevelRule,\n      actualMaxLookahead,\n      currOr,\n    );\n    const altsAmbiguityErrors = checkAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n    const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n\n    return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n  });\n\n  return errors;\n}\n\nexport class RepetitionCollector extends GAstVisitor {\n  public allProductions: (IProductionWithOccurrence & {\n    maxLookahead?: number;\n  })[] = [];\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n}\n\nexport function validateTooManyAlts(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap(ors, (currOr) => {\n    if (currOr.definition.length > 255) {\n      return [\n        {\n          message: errMsgProvider.buildTooManyAlternativesError({\n            topLevelRule: topLevelRule,\n            alternation: currOr,\n          }),\n          type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx,\n        },\n      ];\n    } else {\n      return [];\n    }\n  });\n\n  return errors;\n}\n\nexport function validateSomeNonEmptyLookaheadPath(\n  topLevelRules: Rule[],\n  maxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  forEach(topLevelRules, (currTopRule) => {\n    const collectorVisitor = new RepetitionCollector();\n    currTopRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    forEach(allRuleProductions, (currProd) => {\n      const prodType = getProdType(currProd);\n      const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n      const currOccurrence = currProd.idx;\n      const paths = getLookaheadPathsForOptionalProd(\n        currOccurrence,\n        currTopRule,\n        prodType,\n        actualMaxLookahead,\n      );\n      const pathsInsideProduction = paths[0];\n      if (isEmpty(flatten(pathsInsideProduction))) {\n        const errMsg = errMsgProvider.buildEmptyRepetitionError({\n          topLevelRule: currTopRule,\n          repetition: currProd,\n        });\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n          ruleName: currTopRule.name,\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nexport interface IAmbiguityDescriptor {\n  alts: number[];\n  path: TokenType[];\n}\n\nfunction checkAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const foundAmbiguousPaths: Alternative = [];\n  const identicalAmbiguities = reduce(\n    alternatives,\n    (result, currAlt, currAltIdx) => {\n      // ignore (skip) ambiguities with this alternative\n      if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n        return result;\n      }\n\n      forEach(currAlt, (currPath) => {\n        const altsCurrPathAppearsIn = [currAltIdx];\n        forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n          if (\n            currAltIdx !== currOtherAltIdx &&\n            containsPath(currOtherAlt, currPath) &&\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true\n          ) {\n            altsCurrPathAppearsIn.push(currOtherAltIdx);\n          }\n        });\n\n        if (\n          altsCurrPathAppearsIn.length > 1 &&\n          !containsPath(foundAmbiguousPaths, currPath)\n        ) {\n          foundAmbiguousPaths.push(currPath);\n          result.push({\n            alts: altsCurrPathAppearsIn,\n            path: currPath,\n          });\n        }\n      });\n      return result;\n    },\n    [] as { alts: number[]; path: TokenType[] }[],\n  );\n\n  const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n    const ambgIndices = map(\n      currAmbDescriptor.alts,\n      (currAltIdx) => currAltIdx + 1,\n    );\n\n    const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n      topLevelRule: rule,\n      alternation: alternation,\n      ambiguityIndices: ambgIndices,\n      prefixPath: currAmbDescriptor.path,\n    });\n\n    return {\n      message: currMessage,\n      type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n      ruleName: rule.name,\n      occurrence: alternation.idx,\n      alternatives: currAmbDescriptor.alts,\n    };\n  });\n\n  return currErrors;\n}\n\nexport function checkPrefixAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  // flatten\n  const pathsAndIndices = reduce(\n    alternatives,\n    (result, currAlt, idx) => {\n      const currPathsAndIdx = map(currAlt, (currPath) => {\n        return { idx: idx, path: currPath };\n      });\n      return result.concat(currPathsAndIdx);\n    },\n    [] as { idx: number; path: TokenType[] }[],\n  );\n\n  const errors = compact(\n    flatMap(pathsAndIndices, (currPathAndIdx) => {\n      const alternativeGast = alternation.definition[currPathAndIdx.idx];\n      // ignore (skip) ambiguities with this alternative\n      if (alternativeGast.ignoreAmbiguities === true) {\n        return [];\n      }\n      const targetIdx = currPathAndIdx.idx;\n      const targetPath = currPathAndIdx.path;\n\n      const prefixAmbiguitiesPathsAndIndices = filter(\n        pathsAndIndices,\n        (searchPathAndIdx) => {\n          // prefix ambiguity can only be created from lower idx (higher priority) path\n          return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n              true &&\n            searchPathAndIdx.idx < targetIdx &&\n            // checking for strict prefix because identical lookaheads\n            // will be be detected using a different validation.\n            isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n          );\n        },\n      );\n\n      const currPathPrefixErrors = map(\n        prefixAmbiguitiesPathsAndIndices,\n        (currAmbPathAndIdx): IParserAmbiguousAlternativesDefinitionError => {\n          const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n          const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n\n          const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbPathAndIdx.path,\n          });\n          return {\n            message: message,\n            type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n            ruleName: rule.name,\n            occurrence: occurrence,\n            alternatives: ambgIndices,\n          };\n        },\n      );\n\n      return currPathPrefixErrors;\n    }),\n  );\n\n  return errors;\n}\n\nfunction checkTerminalAndNoneTerminalsNameSpace(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n\n  const tokenNames = map(tokenTypes, (currToken) => currToken.name);\n\n  forEach(topLevels, (currRule) => {\n    const currRuleName = currRule.name;\n    if (includes(tokenNames, currRuleName)) {\n      const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n        ruleName: currRuleName,\n      });\n    }\n  });\n\n  return errors;\n}\n","import { Rule } from \"@chevrotain/gast\";\nimport { defaults, forEach } from \"lodash-es\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver.js\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks.js\";\nimport {\n  defaultGrammarResolverErrorProvider,\n  defaultGrammarValidatorErrorProvider,\n} from \"../../errors_public.js\";\nimport { TokenType } from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"../types.js\";\n\ntype ResolveGrammarOpts = {\n  rules: Rule[];\n  errMsgProvider?: IGrammarResolverErrorMessageProvider;\n};\nexport function resolveGrammar(\n  options: ResolveGrammarOpts,\n): IParserDefinitionError[] {\n  const actualOptions: Required<ResolveGrammarOpts> = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider,\n  });\n\n  const topRulesTable: { [ruleName: string]: Rule } = {};\n  forEach(options.rules, (rule) => {\n    topRulesTable[rule.name] = rule;\n  });\n  return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider);\n}\n\nexport function validateGrammar(options: {\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n  errMsgProvider: IGrammarValidatorErrorMessageProvider;\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider,\n  });\n\n  return orgValidateGrammar(\n    options.rules,\n    options.tokenTypes,\n    options.errMsgProvider,\n    options.grammarName,\n  );\n}\n","import { includes } from \"lodash-es\";\nimport {\n  IRecognitionException,\n  IRecognizerContext,\n  IToken,\n} from \"@chevrotain/types\";\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\n\nconst RECOGNITION_EXCEPTION_NAMES = [\n  MISMATCHED_TOKEN_EXCEPTION,\n  NO_VIABLE_ALT_EXCEPTION,\n  EARLY_EXIT_EXCEPTION,\n  NOT_ALL_INPUT_PARSED_EXCEPTION,\n];\n\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error: Error) {\n  // can't do instanceof on hacked custom js exceptions\n  return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\n\nabstract class RecognitionException\n  extends Error\n  implements IRecognitionException\n{\n  context: IRecognizerContext;\n  resyncedTokens: IToken[] = [];\n\n  protected constructor(\n    message: string,\n    public token: IToken,\n  ) {\n    super(message);\n\n    // fix prototype chain when typescript target is ES5\n    Object.setPrototypeOf(this, new.target.prototype);\n\n    /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class MismatchedTokenException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n  }\n}\n\nexport class NoViableAltException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n  }\n}\n\nexport class NotAllInputParsedException extends RecognitionException {\n  constructor(message: string, token: IToken) {\n    super(message, token);\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  }\n}\n\nexport class EarlyExitException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = EARLY_EXIT_EXCEPTION;\n  }\n}\n","import {\n  createTokenInstance,\n  EOF,\n  tokenMatcher,\n} from \"../../../scan/tokens_public.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  IFirstAfterRepetition,\n} from \"../../grammar/interpreter.js\";\nimport {\n  clone,\n  dropRight,\n  find,\n  flatten,\n  has,\n  includes,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport {\n  IParserConfig,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { MismatchedTokenException } from \"../../exceptions_public.js\";\nimport { IN } from \"../../constants.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\nexport const EOF_FOLLOW_KEY: any = {};\n\nexport interface IFollowKey {\n  ruleName: string;\n  idxInCallingRule: number;\n  inRule: string;\n}\n\nexport const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n\nexport class InRuleRecoveryException extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = IN_RULE_RECOVERY_EXCEPTION;\n  }\n}\n\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nexport class Recoverable {\n  recoveryEnabled: boolean;\n  firstAfterRepMap: Record<string, IFirstAfterRepetition>;\n  resyncFollows: Record<string, TokenType[]>;\n\n  initRecoverable(config: IParserConfig) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n\n    this.recoveryEnabled = has(config, \"recoveryEnabled\")\n      ? (config.recoveryEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n\n    // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  }\n\n  public getTokenToInsert(tokType: TokenType): IToken {\n    const tokToInsert = createTokenInstance(\n      tokType,\n      \"\",\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n    );\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  }\n\n  public canTokenTypeBeInsertedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  public canTokenTypeBeDeletedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  tryInRepetitionRecovery(\n    this: MixedInParser,\n    grammarRule: Function,\n    grammarRuleArgs: any[],\n    lookAheadFunc: () => boolean,\n    expectedTokType: TokenType,\n  ): void {\n    // TODO: can the resyncTokenType be cached?\n    const reSyncTokType = this.findReSyncTokenType();\n    const savedLexerState = this.exportLexerState();\n    const resyncedTokens: IToken[] = [];\n    let passedResyncPoint = false;\n\n    const nextTokenWithoutResync = this.LA(1);\n    let currToken = this.LA(1);\n\n    const generateErrorMessage = () => {\n      const previousToken = this.LA(0);\n      // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n      const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      const error = new MismatchedTokenException(\n        msg,\n        nextTokenWithoutResync,\n        this.LA(0),\n      );\n      // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n      error.resyncedTokens = dropRight(resyncedTokens);\n      this.SAVE_ERROR(error);\n    };\n\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage();\n        // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    }\n\n    // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n    this.importLexerState(savedLexerState);\n  }\n\n  shouldInRepetitionRecoveryBeTried(\n    this: MixedInParser,\n    expectTokAfterLastMatch: TokenType,\n    nextTokIdx: number,\n    notStuck: boolean | undefined,\n  ): boolean {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    }\n\n    // no need to recover, next token is what we expect...\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    }\n\n    // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n    if (this.isBackTracking()) {\n      return false;\n    }\n\n    // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n    if (\n      this.canPerformInRuleRecovery(\n        expectTokAfterLastMatch,\n        this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx),\n      )\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Error Recovery functionality\n  getFollowsForInRuleRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): TokenType[] {\n    const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    const follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  }\n\n  tryInRuleRecovery(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): IToken {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      const tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      const nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  }\n\n  canPerformInRuleRecovery(\n    this: MixedInParser,\n    expectedToken: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    return (\n      this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n      this.canRecoverWithSingleTokenDeletion(expectedToken)\n    );\n  }\n\n  canRecoverWithSingleTokenInsertion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    // must know the possible following tokens to perform single token insertion\n    if (isEmpty(follows)) {\n      return false;\n    }\n\n    const mismatchedTok = this.LA(1);\n    const isMisMatchedTokInFollows =\n      find(follows, (possibleFollowsTokType: TokenType) => {\n        return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n      }) !== undefined;\n\n    return isMisMatchedTokInFollows;\n  }\n\n  canRecoverWithSingleTokenDeletion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n  ): boolean {\n    if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    const isNextTokenWhatIsExpected = this.tokenMatcher(\n      this.LA(2),\n      expectedTokType,\n    );\n    return isNextTokenWhatIsExpected;\n  }\n\n  isInCurrentRuleReSyncSet(\n    this: MixedInParser,\n    tokenTypeIdx: TokenType,\n  ): boolean {\n    const followKey = this.getCurrFollowKey();\n    const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return includes(currentRuleReSyncSet, tokenTypeIdx);\n  }\n\n  findReSyncTokenType(this: MixedInParser): TokenType {\n    const allPossibleReSyncTokTypes = this.flattenFollowSet();\n    // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n    let nextToken = this.LA(1);\n    let k = 2;\n    while (true) {\n      const foundMatch = find(allPossibleReSyncTokTypes, (resyncTokType) => {\n        const canMatch = tokenMatcher(nextToken, resyncTokType);\n        return canMatch;\n      });\n      if (foundMatch !== undefined) {\n        return foundMatch;\n      }\n      nextToken = this.LA(k);\n      k++;\n    }\n  }\n\n  getCurrFollowKey(this: MixedInParser): IFollowKey {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return EOF_FOLLOW_KEY;\n    }\n    const currRuleShortName = this.getLastExplicitRuleShortName();\n    const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName),\n    };\n  }\n\n  buildFullFollowKeyStack(this: MixedInParser): IFollowKey[] {\n    const explicitRuleStack = this.RULE_STACK;\n    const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n\n    return map(explicitRuleStack, (ruleName, idx) => {\n      if (idx === 0) {\n        return EOF_FOLLOW_KEY;\n      }\n      return {\n        ruleName: this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n      };\n    });\n  }\n\n  flattenFollowSet(this: MixedInParser): TokenType[] {\n    const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n      return this.getFollowSetFromFollowKey(currKey);\n    });\n    return <any>flatten(followStack);\n  }\n\n  getFollowSetFromFollowKey(\n    this: MixedInParser,\n    followKey: IFollowKey,\n  ): TokenType[] {\n    if (followKey === EOF_FOLLOW_KEY) {\n      return [EOF];\n    }\n\n    const followName =\n      followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n\n    return this.resyncFollows[followName];\n  }\n\n  // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n  addToResyncTokens(\n    this: MixedInParser,\n    token: IToken,\n    resyncTokens: IToken[],\n  ): IToken[] {\n    if (!this.tokenMatcher(token, EOF)) {\n      resyncTokens.push(token);\n    }\n    return resyncTokens;\n  }\n\n  reSyncTo(this: MixedInParser, tokType: TokenType): IToken[] {\n    const resyncedTokens: IToken[] = [];\n    let nextTok = this.LA(1);\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    }\n    // the last token is not part of the error.\n    return dropRight(resyncedTokens);\n  }\n\n  attemptInRepetitionRecovery(\n    this: MixedInParser,\n    prodFunc: Function,\n    args: any[],\n    lookaheadFunc: () => boolean,\n    dslMethodIdx: number,\n    prodOccurrence: number,\n    nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n    notStuck?: boolean,\n  ): void {\n    // by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  }\n\n  getCurrentGrammarPath(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): ITokenGrammarPath {\n    const pathRuleStack: string[] = this.getHumanReadableRuleStack();\n    const pathOccurrenceStack: number[] = clone(this.RULE_OCCURRENCE_STACK);\n    const grammarPath: any = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule,\n    };\n\n    return grammarPath;\n  }\n  getHumanReadableRuleStack(this: MixedInParser): string[] {\n    return map(this.RULE_STACK, (currShortName) =>\n      this.shortRuleNameToFullName(currShortName),\n    );\n  }\n}\n\nexport function attemptInRepetitionRecovery(\n  this: MixedInParser,\n  prodFunc: Function,\n  args: any[],\n  lookaheadFunc: () => boolean,\n  dslMethodIdx: number,\n  prodOccurrence: number,\n  nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  notStuck?: boolean,\n): void {\n  const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  let firstAfterRepInfo = this.firstAfterRepMap[key];\n  if (firstAfterRepInfo === undefined) {\n    const currRuleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[currRuleName];\n    const walker: AbstractNextTerminalAfterProductionWalker =\n      new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n\n  let expectTokAfterLastMatch = firstAfterRepInfo.token;\n  let nextTokIdx = firstAfterRepInfo.occurrence;\n  const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n\n  // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n  if (\n    this.RULE_STACK.length === 1 &&\n    isEndOfRule &&\n    expectTokAfterLastMatch === undefined\n  ) {\n    expectTokAfterLastMatch = EOF;\n    nextTokIdx = 1;\n  }\n\n  // We don't have anything to re-sync to...\n  // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n  if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n    return;\n  }\n\n  if (\n    this.shouldInRepetitionRecoveryBeTried(\n      expectTokAfterLastMatch,\n      nextTokIdx,\n      notStuck,\n    )\n  ) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(\n      prodFunc,\n      args,\n      lookaheadFunc,\n      expectTokAfterLastMatch,\n    );\n  }\n}\n","// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\n\nexport const BITS_FOR_METHOD_TYPE = 4;\nexport const BITS_FOR_OCCURRENCE_IDX = 8;\nexport const BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport const BITS_FOR_ALT_IDX = 8;\n\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexport const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(\n  ruleIdx: number,\n  dslMethodIdx: number,\n  occurrence: number,\n): number {\n  return occurrence | dslMethodIdx | ruleIdx;\n}\n\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n","import {\n  ILookaheadStrategy,\n  ILookaheadValidationError,\n  IOrAlt,\n  OptionalProductionType,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { flatMap, isEmpty } from \"lodash-es\";\nimport { defaultGrammarValidatorErrorProvider } from \"../errors_public.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser/parser.js\";\nimport {\n  validateAmbiguousAlternationAlternatives,\n  validateEmptyOrAlternative,\n  validateNoLeftRecursion,\n  validateSomeNonEmptyLookaheadPath,\n} from \"./checks.js\";\nimport {\n  buildAlternativesLookAheadFunc,\n  buildLookaheadFuncForOptionalProd,\n  buildLookaheadFuncForOr,\n  buildSingleAlternativeLookaheadFunction,\n  getProdType,\n} from \"./lookahead.js\";\nimport { IParserDefinitionError } from \"./types.js\";\n\nexport class LLkLookaheadStrategy implements ILookaheadStrategy {\n  readonly maxLookahead: number;\n\n  constructor(options?: { maxLookahead?: number }) {\n    this.maxLookahead =\n      options?.maxLookahead ?? DEFAULT_PARSER_CONFIG.maxLookahead;\n  }\n\n  validate(options: {\n    rules: Rule[];\n    tokenTypes: TokenType[];\n    grammarName: string;\n  }): ILookaheadValidationError[] {\n    const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n\n    if (isEmpty(leftRecursionErrors)) {\n      const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n      const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(\n        options.rules,\n        this.maxLookahead,\n      );\n      const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(\n        options.rules,\n        this.maxLookahead,\n      );\n      const allErrors = [\n        ...leftRecursionErrors,\n        ...emptyAltErrors,\n        ...ambiguousAltsErrors,\n        ...emptyRepetitionErrors,\n      ];\n      return allErrors;\n    }\n    return leftRecursionErrors;\n  }\n\n  validateNoLeftRecursion(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateNoLeftRecursion(\n        currTopRule,\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateEmptyOrAlternatives(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateEmptyOrAlternative(\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateAmbiguousAlternationAlternatives(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateAmbiguousAlternationAlternatives(\n        currTopRule,\n        maxLookahead,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateSomeNonEmptyLookaheadPath(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return validateSomeNonEmptyLookaheadPath(\n      rules,\n      maxLookahead,\n      defaultGrammarValidatorErrorProvider,\n    );\n  }\n\n  buildLookaheadForAlternation(options: {\n    prodOccurrence: number;\n    rule: Rule;\n    maxLookahead: number;\n    hasPredicates: boolean;\n    dynamicTokensEnabled: boolean;\n  }): (orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\n    return buildLookaheadFuncForOr(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.hasPredicates,\n      options.dynamicTokensEnabled,\n      buildAlternativesLookAheadFunc,\n    );\n  }\n\n  buildLookaheadForOptional(options: {\n    prodOccurrence: number;\n    prodType: OptionalProductionType;\n    rule: Rule;\n    maxLookahead: number;\n    dynamicTokensEnabled: boolean;\n  }): () => boolean {\n    return buildLookaheadFuncForOptionalProd(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.dynamicTokensEnabled,\n      getProdType(options.prodType),\n      buildSingleAlternativeLookaheadFunction,\n    );\n  }\n}\n","import { forEach, has } from \"lodash-es\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nimport {\n  ILookaheadStrategy,\n  IParserConfig,\n  OptionalProductionType,\n} from \"@chevrotain/types\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  getKeyForAutomaticLookahead,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  GAstVisitor,\n  getProductionDslName,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n} from \"@chevrotain/gast\";\nimport { LLkLookaheadStrategy } from \"../../grammar/llk_lookahead.js\";\n\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nexport class LooksAhead {\n  maxLookahead: number;\n  lookAheadFuncsCache: any;\n  dynamicTokensEnabled: boolean;\n  lookaheadStrategy: ILookaheadStrategy;\n\n  initLooksAhead(config: IParserConfig) {\n    this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\")\n      ? (config.dynamicTokensEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n\n    this.maxLookahead = has(config, \"maxLookahead\")\n      ? (config.maxLookahead as number) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.maxLookahead;\n\n    this.lookaheadStrategy = has(config, \"lookaheadStrategy\")\n      ? (config.lookaheadStrategy as ILookaheadStrategy) // assumes end user provides the correct config value/type\n      : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });\n\n    this.lookAheadFuncsCache = new Map();\n  }\n\n  preComputeLookaheadFunctions(this: MixedInParser, rules: Rule[]): void {\n    forEach(rules, (currRule) => {\n      this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n        const {\n          alternation,\n          repetition,\n          option,\n          repetitionMandatory,\n          repetitionMandatoryWithSeparator,\n          repetitionWithSeparator,\n        } = collectMethods(currRule);\n\n        forEach(alternation, (currProd) => {\n          const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n          this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n            const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n              prodOccurrence: currProd.idx,\n              rule: currRule,\n              maxLookahead: currProd.maxLookahead || this.maxLookahead,\n              hasPredicates: currProd.hasPredicates,\n              dynamicTokensEnabled: this.dynamicTokensEnabled,\n            });\n\n            const key = getKeyForAutomaticLookahead(\n              this.fullRuleNameToShort[currRule.name],\n              OR_IDX,\n              currProd.idx,\n            );\n            this.setLaFuncCache(key, laFunc);\n          });\n        });\n\n        forEach(repetition, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_IDX,\n            \"Repetition\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(option, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            OPTION_IDX,\n            \"Option\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatory, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_IDX,\n            \"RepetitionMandatory\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatoryWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_SEP_IDX,\n            \"RepetitionMandatoryWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_SEP_IDX,\n            \"RepetitionWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n      });\n    });\n  }\n\n  computeLookaheadFunc(\n    this: MixedInParser,\n    rule: Rule,\n    prodOccurrence: number,\n    prodKey: number,\n    prodType: OptionalProductionType,\n    prodMaxLookahead: number | undefined,\n    dslMethodName: string,\n  ): void {\n    this.TRACE_INIT(\n      `${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`,\n      () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType,\n        });\n        const key = getKeyForAutomaticLookahead(\n          this.fullRuleNameToShort[rule.name],\n          prodKey,\n          prodOccurrence,\n        );\n        this.setLaFuncCache(key, laFunc);\n      },\n    );\n  }\n\n  // this actually returns a number, but it is always used as a string (object prop key)\n  getKeyForAutomaticLookahead(\n    this: MixedInParser,\n    dslMethodIdx: number,\n    occurrence: number,\n  ): number {\n    const currRuleShortName: any = this.getLastExplicitRuleShortName();\n    return getKeyForAutomaticLookahead(\n      currRuleShortName,\n      dslMethodIdx,\n      occurrence,\n    );\n  }\n\n  getLaFuncFromCache(this: MixedInParser, key: number): Function {\n    return this.lookAheadFuncsCache.get(key);\n  }\n\n  /* istanbul ignore next */\n  setLaFuncCache(this: MixedInParser, key: number, value: Function): void {\n    this.lookAheadFuncsCache.set(key, value);\n  }\n}\n\nclass DslMethodsCollectorVisitor extends GAstVisitor {\n  public dslMethods: {\n    option: Option[];\n    alternation: Alternation[];\n    repetition: Repetition[];\n    repetitionWithSeparator: RepetitionWithSeparator[];\n    repetitionMandatory: RepetitionMandatory[];\n    repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n  } = {\n    option: [],\n    alternation: [],\n    repetition: [],\n    repetitionWithSeparator: [],\n    repetitionMandatory: [],\n    repetitionMandatoryWithSeparator: [],\n  };\n\n  reset() {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: [],\n    };\n  }\n\n  public visitOption(option: Option): void {\n    this.dslMethods.option.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.dslMethods.repetition.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.dslMethods.alternation.push(or);\n  }\n}\n\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule: Rule): {\n  option: Option[];\n  alternation: Alternation[];\n  repetition: Repetition[];\n  repetitionWithSeparator: RepetitionWithSeparator[];\n  repetitionMandatory: RepetitionMandatory[];\n  repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n} {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  const dslMethods = collectorVisitor.dslMethods;\n  // avoid uncleaned references\n  collectorVisitor.reset();\n  return <any>dslMethods;\n}\n","import { CstNode, CstNodeLocation, IToken } from \"@chevrotain/types\";\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationOnlyOffset(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: Required<Pick<IToken, \"startOffset\" | \"endOffset\">>,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (both start/end offsets exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n  // Once the startOffset has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n}\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationFull(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: CstNodeLocation,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (all start/end props exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.startColumn = newLocationInfo.startColumn;\n    currNodeLocation.startLine = newLocationInfo.startLine;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n  // Once the start props has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset! === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n}\n\nexport function addTerminalToCst(\n  node: CstNode,\n  token: IToken,\n  tokenTypeName: string,\n): void {\n  if (node.children[tokenTypeName] === undefined) {\n    node.children[tokenTypeName] = [token];\n  } else {\n    node.children[tokenTypeName].push(token);\n  }\n}\n\nexport function addNoneTerminalToCst(\n  node: CstNode,\n  ruleName: string,\n  ruleResult: any,\n): void {\n  if (node.children[ruleName] === undefined) {\n    node.children[ruleName] = [ruleResult];\n  } else {\n    node.children[ruleName].push(ruleResult);\n  }\n}\n","const NAME = \"name\";\n\nexport function defineNameProp(obj: {}, nameValue: string): void {\n  Object.defineProperty(obj, NAME, {\n    enumerable: false,\n    configurable: true,\n    writable: false,\n    value: nameValue,\n  });\n}\n","import {\n  compact,\n  filter,\n  forEach,\n  isArray,\n  isEmpty,\n  isFunction,\n  isUndefined,\n  keys,\n  map,\n} from \"lodash-es\";\nimport { defineNameProp } from \"../../lang/lang_extensions.js\";\nimport { CstNode, ICstVisitor } from \"@chevrotain/types\";\n\nexport function defaultVisit<IN>(ctx: any, param: IN): void {\n  const childrenNames = keys(ctx);\n  const childrenNamesLength = childrenNames.length;\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i];\n    const currChildArray = ctx[currChildName];\n    const currChildArrayLength = currChildArray.length;\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[],\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n\n  const semanticProto = {\n    visit: function (cstNode: CstNode | CstNode[], param: any) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg,\n        );\n        throw Error(\n          `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n            `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`,\n        );\n      }\n    },\n  };\n\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  derivedConstructor._RULE_NAMES = ruleNames;\n\n  return derivedConstructor;\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function,\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype);\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  return derivedConstructor;\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD,\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string;\n  type: CstVisitorDefinitionError;\n  methodName: string;\n}\n\nexport function validateVisitor(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n\n  return missingErrors;\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingRuleNames = filter(ruleNames, (currRuleName) => {\n    return isFunction((visitorInstance as any)[currRuleName]) === false;\n  });\n\n  const errors: IVisitorDefinitionError[] = map(\n    missingRuleNames,\n    (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${<any>(\n          visitorInstance.constructor.name\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName,\n      };\n    },\n  );\n\n  return compact<IVisitorDefinitionError>(errors);\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  CstNode,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IProduction,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  forEach,\n  has,\n  isArray,\n  isFunction,\n  last as peek,\n  some,\n} from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { Lexer } from \"../../../scan/lexer_public.js\";\nimport {\n  augmentTokenTypes,\n  hasShortKeyProperty,\n} from \"../../../scan/tokens.js\";\nimport {\n  createToken,\n  createTokenInstance,\n} from \"../../../scan/tokens_public.js\";\nimport { END_OF_FILE } from \"../parser.js\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\ntype ProdWithDef = IProduction & { definition?: IProduction[] };\nconst RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\",\n};\nObject.freeze(RECORDING_NULL_OBJECT);\n\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\n\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA });\naugmentTokenTypes([RFT]);\nconst RECORDING_PHASE_TOKEN = createTokenInstance(\n  RFT,\n  \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n);\nObject.freeze(RECORDING_PHASE_TOKEN);\n\nconst RECORDING_PHASE_CSTNODE: CstNode = {\n  name:\n    \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {},\n};\n\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nexport class GastRecorder {\n  recordingProdStack: ProdWithDef[];\n  RECORDING_PHASE: boolean;\n\n  initGastRecorder(this: MixedInParser, config: IParserConfig): void {\n    this.recordingProdStack = [];\n    this.RECORDING_PHASE = false;\n  }\n\n  enableRecording(this: MixedInParser): void {\n    this.RECORDING_PHASE = true;\n\n    this.TRACE_INIT(\"Enable Recording\", () => {\n      /**\n       * Warning Dark Voodoo Magic upcoming!\n       * We are \"replacing\" the public parsing DSL methods API\n       * With **new** alternative implementations on the Parser **instance**\n       *\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n       *   implementations directly instead.\n       */\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        this[`CONSUME${idx}` as \"CONSUME\"] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2);\n        };\n        this[`SUBRULE${idx}` as \"SUBRULE\"] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2) as any;\n        };\n        this[`OPTION${idx}` as \"OPTION\"] = function (arg1) {\n          return this.optionInternalRecord(arg1, i);\n        };\n        this[`OR${idx}` as \"OR\"] = function (arg1) {\n          return this.orInternalRecord(arg1, i);\n        };\n        this[`MANY${idx}` as \"MANY\"] = function (arg1) {\n          this.manyInternalRecord(i, arg1);\n        };\n        this[`MANY_SEP${idx}` as \"MANY_SEP\"] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE${idx}` as \"AT_LEAST_ONE\"] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE_SEP${idx}` as \"AT_LEAST_ONE_SEP\"] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1);\n        };\n      }\n\n      // DSL methods with the idx(suffix) as an argument\n      this[`consume`] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2);\n      };\n      this[`subrule`] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2) as any;\n      };\n      this[`option`] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx);\n      };\n      this[`or`] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx);\n      };\n      this[`many`] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1);\n      };\n      this[`atLeastOne`] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1);\n      };\n\n      this.ACTION = this.ACTION_RECORD;\n      this.BACKTRACK = this.BACKTRACK_RECORD;\n      this.LA = this.LA_RECORD;\n    });\n  }\n\n  disableRecording(this: MixedInParser) {\n    this.RECORDING_PHASE = false;\n    // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n    this.TRACE_INIT(\"Deleting Recording methods\", () => {\n      const that: any = this;\n\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        delete that[`CONSUME${idx}`];\n        delete that[`SUBRULE${idx}`];\n        delete that[`OPTION${idx}`];\n        delete that[`OR${idx}`];\n        delete that[`MANY${idx}`];\n        delete that[`MANY_SEP${idx}`];\n        delete that[`AT_LEAST_ONE${idx}`];\n        delete that[`AT_LEAST_ONE_SEP${idx}`];\n      }\n\n      delete that[`consume`];\n      delete that[`subrule`];\n      delete that[`option`];\n      delete that[`or`];\n      delete that[`many`];\n      delete that[`atLeastOne`];\n\n      delete that.ACTION;\n      delete that.BACKTRACK;\n      delete that.LA;\n    });\n  }\n\n  //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  // @ts-expect-error -- noop place holder\n  ACTION_RECORD<T>(this: MixedInParser, impl: () => T): T {\n    // NO-OP during recording\n  }\n\n  // Executing backtracking logic will break our recording logic assumptions\n  BACKTRACK_RECORD<T>(\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return () => true;\n  }\n\n  // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n  LA_RECORD(howMuch: number): IToken {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return END_OF_FILE;\n  }\n\n  topLevelRuleRecord(name: string, def: Function): Rule {\n    try {\n      const newTopLevelRule = new Rule({ definition: [], name: name });\n      newTopLevelRule.name = name;\n      this.recordingProdStack.push(newTopLevelRule);\n      def.call(this);\n      this.recordingProdStack.pop();\n      return newTopLevelRule;\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message =\n            originalError.message +\n            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError;\n        }\n      }\n      throw originalError;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternalRecord<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT {\n    return recordProd.call(this, Option, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneSepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionMandatoryWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  manyInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n  }\n\n  manySepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  orInternalRecord<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    return recordOrProd.call(this, altsOrOpts, occurrence);\n  }\n\n  subruleInternalRecord<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    occurrence: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R | CstNode {\n    assertMethodIdxIsValid(occurrence);\n    if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n      const error: any = new Error(\n        `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a Parser method reference but got: <${JSON.stringify(\n            ruleToCall,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n\n    const prevProd: any = peek(this.recordingProdStack);\n    const ruleName = ruleToCall.ruleName;\n    const newNoneTerminal = new NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      label: options?.LABEL,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return this.outputCst\n      ? RECORDING_PHASE_CSTNODE\n      : <any>RECORDING_NULL_OBJECT;\n  }\n\n  consumeInternalRecord(\n    this: MixedInParser,\n    tokType: TokenType,\n    occurrence: number,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    assertMethodIdxIsValid(occurrence);\n    if (!hasShortKeyProperty(tokType)) {\n      const error: any = new Error(\n        `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a TokenType reference but got: <${JSON.stringify(\n            tokType,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    const prevProd: any = peek(this.recordingProdStack);\n    const newNoneTerminal = new Terminal({\n      idx: occurrence,\n      terminalType: tokType,\n      label: options?.LABEL,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return RECORDING_PHASE_TOKEN;\n  }\n}\n\nfunction recordProd(\n  prodConstructor: any,\n  mainProdArg: any,\n  occurrence: number,\n  handleSep: boolean = false,\n): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n\n  const newProd = new prodConstructor({ definition: [], idx: occurrence });\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP;\n  }\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  this.recordingProdStack.push(newProd);\n  grammarAction.call(this);\n  prevProd.definition.push(newProd);\n  this.recordingProdStack.pop();\n\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction recordOrProd(mainProdArg: any, occurrence: number): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  // Only an array of alternatives\n  const hasOptions = isArray(mainProdArg) === false;\n  const alts: IOrAlt<unknown>[] =\n    hasOptions === false ? mainProdArg : mainProdArg.DEF;\n\n  const newOrProd = new Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n  });\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  const hasPredicates = some(alts, (currAlt: any) => isFunction(currAlt.GATE));\n  newOrProd.hasPredicates = hasPredicates;\n\n  prevProd.definition.push(newOrProd);\n\n  forEach(alts, (currAlt) => {\n    const currAltFlat = new Alternative({ definition: [] });\n    newOrProd.definition.push(currAltFlat);\n    if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES as boolean; // assumes end user provides the correct config value/type\n    }\n    // **implicit** ignoreAmbiguities due to usage of gate\n    else if (has(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true;\n    }\n    this.recordingProdStack.push(currAltFlat);\n    currAlt.ALT.call(this);\n    this.recordingProdStack.pop();\n  });\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction getIdxSuffix(idx: number): string {\n  return idx === 0 ? \"\" : `${idx}`;\n}\n\nfunction assertMethodIdxIsValid(idx: number): void {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    const error: any = new Error(\n      // The stack trace will contain all the needed details\n      `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n        `Idx value must be a none negative value smaller than ${\n          MAX_METHOD_IDX + 1\n        }`,\n    );\n    error.KNOWN_RECORDER_ERROR = true;\n    throw error;\n  }\n}\n","import { clone, forEach, has, isEmpty, map, values } from \"lodash-es\";\nimport { toFastProperties } from \"@chevrotain/utils\";\nimport { computeAllProdsFollows } from \"../grammar/follow.js\";\nimport { createTokenInstance, EOF } from \"../../scan/tokens_public.js\";\nimport {\n  defaultGrammarValidatorErrorProvider,\n  defaultParserErrorProvider,\n} from \"../errors_public.js\";\nimport {\n  resolveGrammar,\n  validateGrammar,\n} from \"../grammar/gast/gast_resolver_public.js\";\nimport {\n  CstNode,\n  IParserConfig,\n  IRecognitionException,\n  IRuleConfig,\n  IToken,\n  TokenType,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport { Recoverable } from \"./traits/recoverable.js\";\nimport { LooksAhead } from \"./traits/looksahead.js\";\nimport { TreeBuilder } from \"./traits/tree_builder.js\";\nimport { LexerAdapter } from \"./traits/lexer_adapter.js\";\nimport { RecognizerApi } from \"./traits/recognizer_api.js\";\nimport { RecognizerEngine } from \"./traits/recognizer_engine.js\";\n\nimport { ErrorHandler } from \"./traits/error_handler.js\";\nimport { MixedInParser } from \"./traits/parser_traits.js\";\nimport { ContentAssist } from \"./traits/context_assist.js\";\nimport { GastRecorder } from \"./traits/gast_recorder.js\";\nimport { PerformanceTracer } from \"./traits/perf_tracer.js\";\nimport { applyMixins } from \"./utils/apply_mixins.js\";\nimport { IParserDefinitionError } from \"../grammar/types.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { IParserConfigInternal, ParserMethodInternal } from \"./types.js\";\nimport { validateLookahead } from \"../grammar/checks.js\";\n\nexport const END_OF_FILE = createTokenInstance(\n  EOF,\n  \"\",\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n);\nObject.freeze(END_OF_FILE);\n\nexport type TokenMatcher = (token: IToken, tokType: TokenType) => boolean;\n\nexport const DEFAULT_PARSER_CONFIG: Required<\n  Omit<IParserConfigInternal, \"lookaheadStrategy\">\n> = Object.freeze({\n  recoveryEnabled: false,\n  maxLookahead: 3,\n  dynamicTokensEnabled: false,\n  outputCst: true,\n  errorMessageProvider: defaultParserErrorProvider,\n  nodeLocationTracking: \"none\",\n  traceInitPerf: false,\n  skipValidations: false,\n});\n\nexport const DEFAULT_RULE_CONFIG: Required<IRuleConfig<any>> = Object.freeze({\n  recoveryValueFunc: () => undefined,\n  resyncEnabled: true,\n});\n\nexport enum ParserDefinitionErrorType {\n  INVALID_RULE_NAME = 0,\n  DUPLICATE_RULE_NAME = 1,\n  INVALID_RULE_OVERRIDE = 2,\n  DUPLICATE_PRODUCTIONS = 3,\n  UNRESOLVED_SUBRULE_REF = 4,\n  LEFT_RECURSION = 5,\n  NONE_LAST_EMPTY_ALT = 6,\n  AMBIGUOUS_ALTS = 7,\n  CONFLICT_TOKENS_RULES_NAMESPACE = 8,\n  INVALID_TOKEN_NAME = 9,\n  NO_NON_EMPTY_LOOKAHEAD = 10,\n  AMBIGUOUS_PREFIX_ALTS = 11,\n  TOO_MANY_ALTS = 12,\n  CUSTOM_LOOKAHEAD_VALIDATION = 13,\n}\n\nexport interface IParserDuplicatesDefinitionError\n  extends IParserDefinitionError {\n  dslName: string;\n  occurrence: number;\n  parameter?: string;\n}\n\nexport interface IParserEmptyAlternativeDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number;\n  alternative: number;\n}\n\nexport interface IParserAmbiguousAlternativesDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number | string;\n  alternatives: number[];\n}\n\nexport interface IParserUnresolvedRefDefinitionError\n  extends IParserDefinitionError {\n  unresolvedRefName: string;\n}\n\nexport interface IParserState {\n  errors: IRecognitionException[];\n  lexerState: any;\n  RULE_STACK: number[];\n  CST_STACK: CstNode[];\n}\n\nexport type Predicate = () => boolean;\n\nexport function EMPTY_ALT(): () => undefined;\nexport function EMPTY_ALT<T>(value: T): () => T;\nexport function EMPTY_ALT(value: any = undefined) {\n  return function () {\n    return value;\n  };\n}\n\nexport class Parser {\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  static DEFER_DEFINITION_ERRORS_HANDLING: boolean = false;\n\n  /**\n   *  @deprecated use the **instance** method with the same name instead\n   */\n  static performSelfAnalysis(parserInstance: Parser): void {\n    throw Error(\n      \"The **static** `performSelfAnalysis` method has been deprecated.\" +\n        \"\\t\\nUse the **instance** method with the same name instead.\",\n    );\n  }\n\n  public performSelfAnalysis(this: MixedInParser): void {\n    this.TRACE_INIT(\"performSelfAnalysis\", () => {\n      let defErrorsMsgs;\n\n      this.selfAnalysisDone = true;\n      const className = this.className;\n\n      this.TRACE_INIT(\"toFastProps\", () => {\n        // Without this voodoo magic the parser would be x3-x4 slower\n        // It seems it is better to invoke `toFastProperties` **before**\n        // Any manipulations of the `this` object done during the recording phase.\n        toFastProperties(this);\n      });\n\n      this.TRACE_INIT(\"Grammar Recording\", () => {\n        try {\n          this.enableRecording();\n          // Building the GAST\n          forEach(this.definedRulesNames, (currRuleName) => {\n            const wrappedRule = (this as any)[\n              currRuleName\n            ] as ParserMethodInternal<unknown[], unknown>;\n            const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n            let recordedRuleGast!: Rule;\n            this.TRACE_INIT(`${currRuleName} Rule`, () => {\n              recordedRuleGast = this.topLevelRuleRecord(\n                currRuleName,\n                originalGrammarAction,\n              );\n            });\n            this.gastProductionsCache[currRuleName] = recordedRuleGast;\n          });\n        } finally {\n          this.disableRecording();\n        }\n      });\n\n      let resolverErrors: IParserDefinitionError[] = [];\n      this.TRACE_INIT(\"Grammar Resolving\", () => {\n        resolverErrors = resolveGrammar({\n          rules: values(this.gastProductionsCache),\n        });\n        this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n      });\n\n      this.TRACE_INIT(\"Grammar Validations\", () => {\n        // only perform additional grammar validations IFF no resolving errors have occurred.\n        // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n        if (isEmpty(resolverErrors) && this.skipValidations === false) {\n          const validationErrors = validateGrammar({\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            errMsgProvider: defaultGrammarValidatorErrorProvider,\n            grammarName: className,\n          });\n          const lookaheadValidationErrors = validateLookahead({\n            lookaheadStrategy: this.lookaheadStrategy,\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            grammarName: className,\n          });\n          this.definitionErrors = this.definitionErrors.concat(\n            validationErrors,\n            lookaheadValidationErrors,\n          );\n        }\n      });\n\n      // this analysis may fail if the grammar is not perfectly valid\n      if (isEmpty(this.definitionErrors)) {\n        // The results of these computations are not needed unless error recovery is enabled.\n        if (this.recoveryEnabled) {\n          this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n            const allFollows = computeAllProdsFollows(\n              values(this.gastProductionsCache),\n            );\n            this.resyncFollows = allFollows;\n          });\n        }\n\n        this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n          this.lookaheadStrategy.initialize?.({\n            rules: values(this.gastProductionsCache),\n          });\n          this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n        });\n      }\n\n      if (\n        !Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n        !isEmpty(this.definitionErrors)\n      ) {\n        defErrorsMsgs = map(\n          this.definitionErrors,\n          (defError) => defError.message,\n        );\n        throw new Error(\n          `Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\n            \"\\n-------------------------------\\n\",\n          )}`,\n        );\n      }\n    });\n  }\n\n  definitionErrors: IParserDefinitionError[] = [];\n  selfAnalysisDone = false;\n  protected skipValidations: boolean;\n\n  constructor(tokenVocabulary: TokenVocabulary, config: IParserConfig) {\n    const that: MixedInParser = this as any;\n    that.initErrorHandler(config);\n    that.initLexerAdapter();\n    that.initLooksAhead(config);\n    that.initRecognizerEngine(tokenVocabulary, config);\n    that.initRecoverable(config);\n    that.initTreeBuilder(config);\n    that.initContentAssist();\n    that.initGastRecorder(config);\n    that.initPerformanceTracer(config);\n\n    if (has(config, \"ignoredIssues\")) {\n      throw new Error(\n        \"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n          \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n          \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n          \"For further details.\",\n      );\n    }\n\n    this.skipValidations = has(config, \"skipValidations\")\n      ? (config.skipValidations as boolean) // casting assumes the end user passing the correct type\n      : DEFAULT_PARSER_CONFIG.skipValidations;\n  }\n}\n\napplyMixins(Parser, [\n  Recoverable,\n  LooksAhead,\n  TreeBuilder,\n  LexerAdapter,\n  RecognizerEngine,\n  RecognizerApi,\n  ErrorHandler,\n  ContentAssist,\n  GastRecorder,\n  PerformanceTracer,\n]);\n\nexport class CstParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = true;\n    super(tokenVocabulary, configClone);\n  }\n}\n\nexport class EmbeddedActionsParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = false;\n    super(tokenVocabulary, configClone);\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach((baseCtor) => {\n    const baseProto = baseCtor.prototype;\n    Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n      if (propName === \"constructor\") {\n        return;\n      }\n\n      const basePropDescriptor = Object.getOwnPropertyDescriptor(\n        baseProto,\n        propName,\n      );\n      // Handle Accessors\n      if (\n        basePropDescriptor &&\n        (basePropDescriptor.get || basePropDescriptor.set)\n      ) {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          propName,\n          basePropDescriptor,\n        );\n      } else {\n        derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n      }\n    });\n  });\n}\n","import {\n  addNoneTerminalToCst,\n  addTerminalToCst,\n  setNodeLocationFull,\n  setNodeLocationOnlyOffset,\n} from \"../../cst/cst.js\";\nimport { has, isUndefined, keys, noop } from \"lodash-es\";\nimport {\n  createBaseSemanticVisitorConstructor,\n  createBaseVisitorConstructorWithDefaults,\n} from \"../../cst/cst_visitor.js\";\nimport {\n  CstNode,\n  CstNodeLocation,\n  ICstVisitor,\n  IParserConfig,\n  IToken,\n  nodeLocationTrackingOptions,\n} from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n  outputCst: boolean;\n  CST_STACK: CstNode[];\n  baseCstVisitorConstructor: Function;\n  baseCstVisitorWithDefaultsConstructor: Function;\n\n  // dynamically assigned Methods\n  setNodeLocationFromNode: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  setNodeLocationFromToken: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  cstPostRule: (this: MixedInParser, ruleCstNode: CstNode) => void;\n\n  setInitialNodeLocation: (cstNode: CstNode) => void;\n  nodeLocationTracking: nodeLocationTrackingOptions;\n\n  initTreeBuilder(this: MixedInParser, config: IParserConfig) {\n    this.CST_STACK = [];\n\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = (config as any).outputCst;\n\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n      ? (config.nodeLocationTracking as nodeLocationTrackingOptions) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop;\n      this.cstFinallyStateUpdate = noop;\n      this.cstPostTerminal = noop;\n      this.cstPostNonTerminal = noop;\n      this.cstPostRule = noop;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull;\n          this.setNodeLocationFromNode = setNodeLocationFull;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = <any>setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = <any>setNodeLocationOnlyOffset;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop;\n        this.setNodeLocationFromNode = noop;\n        this.cstPostRule = noop;\n        this.setInitialNodeLocation = noop;\n      } else {\n        throw Error(\n          `Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`,\n        );\n      }\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRecovery(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationOnlyOffsetRegular(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationFullRecovery(this: MixedInParser, cstNode: any): void {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n\n     * @param cstNode\n     */\n  setInitialNodeLocationFullRegular(this: MixedInParser, cstNode: any): void {\n    const nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  cstInvocationStateUpdate(this: MixedInParser, fullRuleName: string): void {\n    const cstNode: CstNode = {\n      name: fullRuleName,\n      children: Object.create(null),\n    };\n\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  }\n\n  cstFinallyStateUpdate(this: MixedInParser): void {\n    this.CST_STACK.pop();\n  }\n\n  cstPostRuleFull(this: MixedInParser, ruleCstNode: CstNode): void {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    const prevToken = this.LA(0) as Required<CstNodeLocation>;\n    const loc = ruleCstNode.location as Required<CstNodeLocation>;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  }\n\n  cstPostRuleOnlyOffset(this: MixedInParser, ruleCstNode: CstNode): void {\n    const prevToken = this.LA(0);\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    const loc = ruleCstNode.location!;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  }\n\n  cstPostTerminal(\n    this: MixedInParser,\n    key: string,\n    consumedToken: IToken,\n  ): void {\n    const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    addTerminalToCst(rootCst, consumedToken, key);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location!, <any>consumedToken);\n  }\n\n  cstPostNonTerminal(\n    this: MixedInParser,\n    ruleCstResult: CstNode,\n    ruleName: string,\n  ): void {\n    const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location!, ruleCstResult.location!);\n  }\n\n  getBaseCstVisitorConstructor<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n        this.className,\n        keys(this.gastProductionsCache),\n      );\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return <any>this.baseCstVisitorConstructor;\n  }\n\n  getBaseCstVisitorConstructorWithDefaults<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      const newConstructor = createBaseVisitorConstructorWithDefaults(\n        this.className,\n        keys(this.gastProductionsCache),\n        this.getBaseCstVisitorConstructor(),\n      );\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return <any>this.baseCstVisitorWithDefaultsConstructor;\n  }\n\n  getLastExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  }\n\n  getPreviousExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  }\n\n  getLastExplicitRuleOccurrenceIndex(this: MixedInParser): number {\n    const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  }\n}\n","import { END_OF_FILE } from \"../parser.js\";\nimport { IToken } from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nexport class LexerAdapter {\n  tokVector: IToken[];\n  tokVectorLength: number;\n  currIdx: number;\n\n  initLexerAdapter() {\n    this.tokVector = [];\n    this.tokVectorLength = 0;\n    this.currIdx = -1;\n  }\n\n  set input(newInput: IToken[]) {\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    if (this.selfAnalysisDone !== true) {\n      throw Error(\n        `Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`,\n      );\n    }\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    this.reset();\n    this.tokVector = newInput;\n    this.tokVectorLength = newInput.length;\n  }\n\n  get input(): IToken[] {\n    return this.tokVector;\n  }\n\n  // skips a token and returns the next token\n  SKIP_TOKEN(this: MixedInParser): IToken {\n    if (this.currIdx <= this.tokVector.length - 2) {\n      this.consumeToken();\n      return this.LA(1);\n    } else {\n      return END_OF_FILE;\n    }\n  }\n\n  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n  // or lexers dependent on parser context.\n  LA(this: MixedInParser, howMuch: number): IToken {\n    const soughtIdx = this.currIdx + howMuch;\n    if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n      return END_OF_FILE;\n    } else {\n      return this.tokVector[soughtIdx];\n    }\n  }\n\n  consumeToken(this: MixedInParser) {\n    this.currIdx++;\n  }\n\n  exportLexerState(this: MixedInParser): number {\n    return this.currIdx;\n  }\n\n  importLexerState(this: MixedInParser, newState: number) {\n    this.currIdx = newState;\n  }\n\n  resetLexerState(this: MixedInParser): void {\n    this.currIdx = -1;\n  }\n\n  moveToTerminatedState(this: MixedInParser): void {\n    this.currIdx = this.tokVector.length - 1;\n  }\n\n  getLexerPosition(this: MixedInParser): number {\n    return this.exportLexerState();\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IRuleConfig,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  ParserMethod,\n  SubruleMethodOpts,\n  TokenType,\n  TokenTypeDictionary,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport {\n  clone,\n  every,\n  flatten,\n  has,\n  isArray,\n  isEmpty,\n  isObject,\n  reduce,\n  uniq,\n  values,\n} from \"lodash-es\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  BITS_FOR_METHOD_TYPE,\n  BITS_FOR_OCCURRENCE_IDX,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport {\n  isRecognitionException,\n  MismatchedTokenException,\n  NotAllInputParsedException,\n} from \"../../exceptions_public.js\";\nimport { PROD_TYPE } from \"../../grammar/lookahead.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  NextTerminalAfterAtLeastOneSepWalker,\n  NextTerminalAfterAtLeastOneWalker,\n  NextTerminalAfterManySepWalker,\n  NextTerminalAfterManyWalker,\n} from \"../../grammar/interpreter.js\";\nimport { DEFAULT_RULE_CONFIG, IParserState, TokenMatcher } from \"../parser.js\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable.js\";\nimport { EOF } from \"../../../scan/tokens_public.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  augmentTokenTypes,\n  isTokenType,\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../../scan/tokens.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nexport class RecognizerEngine {\n  isBackTrackingStack: boolean[];\n  className: string;\n  RULE_STACK: number[];\n  RULE_OCCURRENCE_STACK: number[];\n  definedRulesNames: string[];\n  tokensMap: { [fqn: string]: TokenType };\n  gastProductionsCache: Record<string, Rule>;\n  shortRuleNameToFull: Record<string, string>;\n  fullRuleNameToShort: Record<string, number>;\n  // The shortName Index must be coded \"after\" the first 8bits to enable building unique lookahead keys\n  ruleShortNameIdx: number;\n  tokenMatcher: TokenMatcher;\n  subruleIdx: number;\n\n  initRecognizerEngine(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfig,\n  ) {\n    this.className = this.constructor.name;\n    // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokenStructuredMatcherNoCategories;\n    this.subruleIdx = 0;\n\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n\n    if (has(config, \"serializedGrammar\")) {\n      throw Error(\n        \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n          \"\\tFor Further details.\",\n      );\n    }\n\n    if (isArray(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if (isEmpty(tokenVocabulary as any[])) {\n        throw Error(\n          \"A Token Vocabulary cannot be empty.\\n\" +\n            \"\\tNote that the first argument for the parser constructor\\n\" +\n            \"\\tis no longer a Token vector (since v4.0).\",\n        );\n      }\n\n      if (typeof (tokenVocabulary as any[])[0].startOffset === \"number\") {\n        throw Error(\n          \"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n            \"\\tFor Further details.\",\n        );\n      }\n    }\n\n    if (isArray(tokenVocabulary)) {\n      this.tokensMap = reduce(\n        tokenVocabulary,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (\n      has(tokenVocabulary, \"modes\") &&\n      every(flatten(values((<any>tokenVocabulary).modes)), isTokenType)\n    ) {\n      const allTokenTypes = flatten(values((<any>tokenVocabulary).modes));\n      const uniqueTokens = uniq(allTokenTypes);\n      this.tokensMap = <any>reduce(\n        uniqueTokens,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (isObject(tokenVocabulary)) {\n      this.tokensMap = clone(tokenVocabulary as TokenTypeDictionary);\n    } else {\n      throw new Error(\n        \"<tokensDictionary> argument must be An Array of Token constructors,\" +\n          \" A dictionary of Token constructors or an IMultiModeLexerDefinition\",\n      );\n    }\n\n    // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n    this.tokensMap[\"EOF\"] = EOF;\n\n    const allTokenTypes = has(tokenVocabulary, \"modes\")\n      ? flatten(values((<any>tokenVocabulary).modes))\n      : values(tokenVocabulary);\n    const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\n      isEmpty(tokenConstructor.categoryMatches),\n    );\n\n    this.tokenMatcher = noTokenCategoriesUsed\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher;\n\n    // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n    augmentTokenTypes(values(this.tokensMap));\n  }\n\n  defineRule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleName: string,\n    impl: (...args: ARGS) => R,\n    config: IRuleConfig<R>,\n  ): ParserMethodInternal<ARGS, R> {\n    if (this.selfAnalysisDone) {\n      throw Error(\n        `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n          `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`,\n      );\n    }\n    const resyncEnabled: boolean = has(config, \"resyncEnabled\")\n      ? (config.resyncEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.resyncEnabled;\n    const recoveryValueFunc = has(config, \"recoveryValueFunc\")\n      ? (config.recoveryValueFunc as () => R) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n\n    // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n    const shortName =\n      this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);\n\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n\n    let invokeRuleWithTry: ParserMethod<ARGS, R>;\n\n    // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          impl.apply(this, args);\n          const cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst as unknown as R;\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          return impl.apply(this, args);\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    }\n\n    const wrappedGrammarRule: ParserMethodInternal<ARGS, R> = Object.assign(\n      invokeRuleWithTry as any,\n      { ruleName, originalGrammarAction: impl },\n    );\n\n    return wrappedGrammarRule;\n  }\n\n  invokeRuleCatch(\n    this: MixedInParser,\n    e: Error,\n    resyncEnabledConfig: boolean,\n    recoveryValueFunc: Function,\n  ): unknown {\n    const isFirstInvokedRule = this.RULE_STACK.length === 1;\n    // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n    const reSyncEnabled =\n      resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n\n    if (isRecognitionException(e)) {\n      const recogError: any = e;\n      if (reSyncEnabled) {\n        const reSyncTokType = this.findReSyncTokenType();\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc(e);\n          }\n        } else {\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          }\n          // to be handled Further up the call stack\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState();\n        // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n        return recoveryValueFunc(e);\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternal<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT | undefined {\n    const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  }\n\n  optionInternalLogic<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n    key: number,\n  ): OUT | undefined {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action: GrammarAction<OUT>;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n    return undefined;\n  }\n\n  atLeastOneInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n    );\n    return this.atLeastOneInternalLogic(\n      prodOccurrence,\n      actionORMethodDef,\n      laKey,\n    );\n  }\n\n  atLeastOneInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n    key: number,\n  ): void {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if ((<Function>lookAheadFunc).call(this) === true) {\n      let notStuck = this.doSingleRepetition(action);\n      while (\n        (<Function>lookAheadFunc).call(this) === true &&\n        notStuck === true\n      ) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY,\n        (<DSLMethodOptsWithErr<OUT>>actionORMethodDef).ERR_MSG,\n      );\n    }\n\n    // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.atLeastOneInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookAheadFunc,\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n      NextTerminalAfterAtLeastOneWalker,\n    );\n  }\n\n  atLeastOneSepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n    );\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  atLeastOneSepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n\n    const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      (<GrammarAction<OUT>>action).call(this);\n\n      //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        (<GrammarAction<OUT>>action).call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterAtLeastOneSepWalker,\n        ],\n        separatorLookAheadFunc,\n        AT_LEAST_ONE_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterAtLeastOneSepWalker,\n      );\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        options.ERR_MSG,\n      );\n    }\n  }\n\n  manyInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  }\n\n  manyInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    key: number,\n  ) {\n    let lookaheadFunction = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookaheadFunction;\n        lookaheadFunction = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    let notStuck = true;\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    }\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.manyInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookaheadFunction,\n      MANY_IDX,\n      prodOccurrence,\n      NextTerminalAfterManyWalker,\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n      // An infinite loop cannot occur as:\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n      notStuck,\n    );\n  }\n\n  manySepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      MANY_SEP_IDX,\n      prodOccurrence,\n    );\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  manySepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n    const firstIterationLaFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        action.call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterManySepWalker,\n        ],\n        separatorLookAheadFunc,\n        MANY_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterManySepWalker,\n      );\n    }\n  }\n\n  repetitionSepSecondInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    separator: TokenType,\n    separatorLookAheadFunc: () => boolean,\n    action: GrammarAction<OUT>,\n    nextTerminalAfterWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  ): void {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    }\n\n    // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    /* istanbul ignore else */\n    this.attemptInRepetitionRecovery(\n      this.repetitionSepSecondInternal,\n      [\n        prodOccurrence,\n        separator,\n        separatorLookAheadFunc,\n        action,\n        nextTerminalAfterWalker,\n      ],\n      separatorLookAheadFunc,\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n      nextTerminalAfterWalker,\n    );\n  }\n\n  doSingleRepetition(this: MixedInParser, action: Function): any {\n    const beforeIteration = this.getLexerPosition();\n    action.call(this);\n    const afterIteration = this.getLexerPosition();\n\n    // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n    return afterIteration > beforeIteration;\n  }\n\n  orInternal<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n    const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n\n    const laFunc = this.getLaFuncFromCache(laKey);\n    const altIdxToTake = laFunc.call(this, alts);\n    if (altIdxToTake !== undefined) {\n      const chosenAlternative: any = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n    this.raiseNoAltException(\n      occurrence,\n      (altsOrOpts as OrMethodOpts<unknown>).ERR_MSG,\n    );\n  }\n\n  ruleFinallyStateUpdate(this: MixedInParser): void {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop();\n\n    // NOOP when cst is disabled\n    this.cstFinallyStateUpdate();\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      const firstRedundantTok = this.LA(1);\n      const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      this.SAVE_ERROR(\n        new NotAllInputParsedException(errMsg, firstRedundantTok),\n      );\n    }\n  }\n\n  subruleInternal<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    idx: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    let ruleResult;\n    try {\n      const args = options !== undefined ? options.ARGS : undefined;\n      this.subruleIdx = idx;\n      ruleResult = ruleToCall.apply(this, args);\n      this.cstPostNonTerminal(\n        ruleResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleToCall.ruleName,\n      );\n      return ruleResult;\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  }\n\n  subruleInternalError(\n    this: MixedInParser,\n    e: any,\n    options: SubruleMethodOpts<unknown[]> | undefined,\n    ruleName: string,\n  ): void {\n    if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(\n        e.partialCstResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleName,\n      );\n\n      delete e.partialCstResult;\n    }\n    throw e;\n  }\n\n  consumeInternal(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    options: ConsumeMethodOpts | undefined,\n  ): IToken {\n    let consumedToken!: IToken;\n    try {\n      const nextToken = this.LA(1);\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(\n        tokType,\n        idx,\n        eFromConsumption,\n      );\n    }\n\n    this.cstPostTerminal(\n      options !== undefined && options.LABEL !== undefined\n        ? options.LABEL\n        : tokType.name,\n      consumedToken,\n    );\n    return consumedToken;\n  }\n\n  consumeInternalError(\n    this: MixedInParser,\n    tokType: TokenType,\n    nextToken: IToken,\n    options: ConsumeMethodOpts | undefined,\n  ): void {\n    let msg;\n    const previousToken = this.LA(0);\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n    }\n    throw this.SAVE_ERROR(\n      new MismatchedTokenException(msg, nextToken, previousToken),\n    );\n  }\n\n  consumeInternalRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    eFromConsumption: Error,\n  ): IToken {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (\n      this.recoveryEnabled &&\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n      eFromConsumption.name === \"MismatchedTokenException\" &&\n      !this.isBackTracking()\n    ) {\n      const follows = this.getFollowsForInRuleRecovery(<any>tokType, idx);\n      try {\n        return this.tryInRuleRecovery(<any>tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  }\n\n  saveRecogState(this: MixedInParser): IParserState {\n    // errors is a getter which will clone the errors array\n    const savedErrors = this.errors;\n    const savedRuleStack = clone(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK,\n    };\n  }\n\n  reloadRecogState(this: MixedInParser, newState: IParserState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  }\n\n  ruleInvocationStateUpdate(\n    this: MixedInParser,\n    shortName: number,\n    fullName: string,\n    idxInCallingRule: number,\n  ): void {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName);\n    // NOOP when cst is disabled\n    this.cstInvocationStateUpdate(fullName);\n  }\n\n  isBackTracking(this: MixedInParser): boolean {\n    return this.isBackTrackingStack.length !== 0;\n  }\n\n  getCurrRuleFullName(this: MixedInParser): string {\n    const shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  shortRuleNameToFullName(this: MixedInParser, shortName: number) {\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  public isAtEndOfInput(this: MixedInParser): boolean {\n    return this.tokenMatcher(this.LA(1), EOF);\n  }\n\n  public reset(this: MixedInParser): void {\n    this.resetLexerState();\n    this.subruleIdx = 0;\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = [];\n    // TODO: extract a specific reset for TreeBuilder trait\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IRuleConfig,\n  ISerializedGast,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { includes, values } from \"lodash-es\";\nimport { isRecognitionException } from \"../../exceptions_public.js\";\nimport { DEFAULT_RULE_CONFIG, ParserDefinitionErrorType } from \"../parser.js\";\nimport { defaultGrammarValidatorErrorProvider } from \"../../errors_public.js\";\nimport { validateRuleIsOverridden } from \"../../grammar/checks.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { Rule, serializeGrammar } from \"@chevrotain/gast\";\nimport { IParserDefinitionError } from \"../../grammar/types.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nexport class RecognizerApi {\n  ACTION<T>(this: MixedInParser, impl: () => T): T {\n    return impl.call(this);\n  }\n\n  consume(\n    this: MixedInParser,\n    idx: number,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, idx, options);\n  }\n\n  subrule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    idx: number,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, idx, options);\n  }\n\n  option<OUT>(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, idx);\n  }\n\n  or(\n    this: MixedInParser,\n    idx: number,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<any>,\n  ): any {\n    return this.orInternal(altsOrOpts, idx);\n  }\n\n  many(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOpts<any>,\n  ): void {\n    return this.manyInternal(idx, actionORMethodDef);\n  }\n\n  atLeastOne(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOptsWithErr<any>,\n  ): void {\n    return this.atLeastOneInternal(idx, actionORMethodDef);\n  }\n\n  CONSUME(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 0, options);\n  }\n\n  CONSUME1(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 1, options);\n  }\n\n  CONSUME2(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 2, options);\n  }\n\n  CONSUME3(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 3, options);\n  }\n\n  CONSUME4(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 4, options);\n  }\n\n  CONSUME5(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 5, options);\n  }\n\n  CONSUME6(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 6, options);\n  }\n\n  CONSUME7(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 7, options);\n  }\n\n  CONSUME8(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 8, options);\n  }\n\n  CONSUME9(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 9, options);\n  }\n\n  SUBRULE<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 0, options);\n  }\n\n  SUBRULE1<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 1, options);\n  }\n\n  SUBRULE2<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 2, options);\n  }\n\n  SUBRULE3<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 3, options);\n  }\n\n  SUBRULE4<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 4, options);\n  }\n\n  SUBRULE5<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 5, options);\n  }\n\n  SUBRULE6<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 6, options);\n  }\n\n  SUBRULE7<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 7, options);\n  }\n\n  SUBRULE8<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 8, options);\n  }\n\n  SUBRULE9<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 9, options);\n  }\n\n  OPTION<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 0);\n  }\n\n  OPTION1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 1);\n  }\n\n  OPTION2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 2);\n  }\n\n  OPTION3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 3);\n  }\n\n  OPTION4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 4);\n  }\n\n  OPTION5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 5);\n  }\n\n  OPTION6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 6);\n  }\n\n  OPTION7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 7);\n  }\n\n  OPTION8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 8);\n  }\n\n  OPTION9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 9);\n  }\n\n  OR<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 0);\n  }\n\n  OR1<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 1);\n  }\n\n  OR2<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 2);\n  }\n\n  OR3<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 3);\n  }\n\n  OR4<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 4);\n  }\n\n  OR5<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 5);\n  }\n\n  OR6<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 6);\n  }\n\n  OR7<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 7);\n  }\n\n  OR8<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 8);\n  }\n\n  OR9<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 9);\n  }\n\n  MANY<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(0, actionORMethodDef);\n  }\n\n  MANY1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(1, actionORMethodDef);\n  }\n\n  MANY2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(2, actionORMethodDef);\n  }\n\n  MANY3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(3, actionORMethodDef);\n  }\n\n  MANY4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(4, actionORMethodDef);\n  }\n\n  MANY5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(5, actionORMethodDef);\n  }\n\n  MANY6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(6, actionORMethodDef);\n  }\n\n  MANY7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(7, actionORMethodDef);\n  }\n\n  MANY8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(8, actionORMethodDef);\n  }\n\n  MANY9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(9, actionORMethodDef);\n  }\n\n  MANY_SEP<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(0, options);\n  }\n\n  MANY_SEP1<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(1, options);\n  }\n\n  MANY_SEP2<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(2, options);\n  }\n\n  MANY_SEP3<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(3, options);\n  }\n\n  MANY_SEP4<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(4, options);\n  }\n\n  MANY_SEP5<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(5, options);\n  }\n\n  MANY_SEP6<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(6, options);\n  }\n\n  MANY_SEP7<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(7, options);\n  }\n\n  MANY_SEP8<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(8, options);\n  }\n\n  MANY_SEP9<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(9, options);\n  }\n\n  AT_LEAST_ONE<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(0, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    return this.atLeastOneInternal(1, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(2, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(3, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(4, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(5, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(6, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(7, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(8, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(9, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE_SEP<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(0, options);\n  }\n\n  AT_LEAST_ONE_SEP1<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(1, options);\n  }\n\n  AT_LEAST_ONE_SEP2<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(2, options);\n  }\n\n  AT_LEAST_ONE_SEP3<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(3, options);\n  }\n\n  AT_LEAST_ONE_SEP4<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(4, options);\n  }\n\n  AT_LEAST_ONE_SEP5<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(5, options);\n  }\n\n  AT_LEAST_ONE_SEP6<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(6, options);\n  }\n\n  AT_LEAST_ONE_SEP7<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(7, options);\n  }\n\n  AT_LEAST_ONE_SEP8<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(8, options);\n  }\n\n  AT_LEAST_ONE_SEP9<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(9, options);\n  }\n\n  RULE<T>(\n    this: MixedInParser,\n    name: string,\n    implementation: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T | any {\n    if (includes(this.definedRulesNames, name)) {\n      const errMsg =\n        defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className,\n        });\n\n      const error = {\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: name,\n      };\n      this.definitionErrors.push(error);\n    }\n\n    this.definedRulesNames.push(name);\n\n    const ruleImplementation = this.defineRule(name, implementation, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  OVERRIDE_RULE<T>(\n    this: MixedInParser,\n    name: string,\n    impl: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T {\n    const ruleErrors: IParserDefinitionError[] = validateRuleIsOverridden(\n      name,\n      this.definedRulesNames,\n      this.className,\n    );\n    this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n\n    const ruleImplementation = this.defineRule(name, impl, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  BACKTRACK<T>(\n    this: MixedInParser,\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return function () {\n      // save org state\n      this.isBackTrackingStack.push(1);\n      const orgState = this.saveRecogState();\n      try {\n        grammarRule.apply(this, args);\n        // if no exception was thrown we have succeed parsing the rule.\n        return true;\n      } catch (e) {\n        if (isRecognitionException(e)) {\n          return false;\n        } else {\n          throw e;\n        }\n      } finally {\n        this.reloadRecogState(orgState);\n        this.isBackTrackingStack.pop();\n      }\n    };\n  }\n\n  // GAST export APIs\n  public getGAstProductions(this: MixedInParser): Record<string, Rule> {\n    return this.gastProductionsCache;\n  }\n\n  public getSerializedGastProductions(this: MixedInParser): ISerializedGast[] {\n    return serializeGrammar(values(this.gastProductionsCache));\n  }\n}\n","import {\n  IParserConfig,\n  IParserErrorMessageProvider,\n  IRecognitionException,\n} from \"@chevrotain/types\";\nimport {\n  EarlyExitException,\n  isRecognitionException,\n  NoViableAltException,\n} from \"../../exceptions_public.js\";\nimport { clone, has } from \"lodash-es\";\nimport {\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  PROD_TYPE,\n} from \"../../grammar/lookahead.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n  _errors: IRecognitionException[];\n  errorMessageProvider: IParserErrorMessageProvider;\n\n  initErrorHandler(config: IParserConfig) {\n    this._errors = [];\n    this.errorMessageProvider = has(config, \"errorMessageProvider\")\n      ? (config.errorMessageProvider as IParserErrorMessageProvider) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  }\n\n  SAVE_ERROR(\n    this: MixedInParser,\n    error: IRecognitionException,\n  ): IRecognitionException {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\n        \"Trying to save an Error which is not a RecognitionException\",\n      );\n    }\n  }\n\n  get errors(): IRecognitionException[] {\n    return clone(this._errors);\n  }\n\n  set errors(newErrors: IRecognitionException[]) {\n    this._errors = newErrors;\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseEarlyExitException(\n    this: MixedInParser,\n    occurrence: number,\n    prodType: PROD_TYPE,\n    userDefinedErrMsg: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n      occurrence,\n      ruleGrammar,\n      prodType,\n      this.maxLookahead,\n    );\n    const insideProdPaths = lookAheadPathsPerAlternative[0];\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName,\n    });\n\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseNoAltException(\n    this: MixedInParser,\n    occurrence: number,\n    errMsgTypes: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOr(\n      occurrence,\n      ruleGrammar,\n      this.maxLookahead,\n    );\n\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const previousToken = this.LA(0);\n\n    const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName(),\n    });\n\n    throw this.SAVE_ERROR(\n      new NoViableAltException(errMsg, this.LA(1), previousToken),\n    );\n  }\n}\n","import {\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  NextAfterTokenWalker,\n  nextPossibleTokensAfter,\n} from \"../../grammar/interpreter.js\";\nimport { first, isUndefined } from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\nexport class ContentAssist {\n  initContentAssist() {}\n\n  public computeContentAssist(\n    this: MixedInParser,\n    startRuleName: string,\n    precedingInput: IToken[],\n  ): ISyntacticContentAssistPath[] {\n    const startRuleGast = this.gastProductionsCache[startRuleName];\n\n    if (isUndefined(startRuleGast)) {\n      throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n    }\n\n    return nextPossibleTokensAfter(\n      [startRuleGast],\n      precedingInput,\n      this.tokenMatcher,\n      this.maxLookahead,\n    );\n  }\n\n  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n  // TODO: should this be more explicitly part of the public API?\n  public getNextPossibleTokenTypes(\n    this: MixedInParser,\n    grammarPath: ITokenGrammarPath,\n  ): TokenType[] {\n    const topRuleName = first(grammarPath.ruleStack)!;\n    const gastProductions = this.getGAstProductions();\n    const topProduction = gastProductions[topRuleName];\n    const nextPossibleTokenTypes = new NextAfterTokenWalker(\n      topProduction,\n      grammarPath,\n    ).startWalking();\n    return nextPossibleTokenTypes;\n  }\n}\n","import { IParserConfig } from \"@chevrotain/types\";\nimport { has } from \"lodash-es\";\nimport { timer } from \"@chevrotain/utils\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n  traceInitPerf: boolean | number;\n  traceInitMaxIdent: number;\n  traceInitIndent: number;\n\n  initPerformanceTracer(config: IParserConfig) {\n    if (has(config, \"traceInitPerf\")) {\n      const userTraceInitPerf = config.traceInitPerf;\n      const traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber\n        ? <number>userTraceInitPerf\n        : Infinity;\n      this.traceInitPerf = traceIsNumber\n        ? userTraceInitPerf > 0\n        : (userTraceInitPerf as boolean); // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  }\n\n  TRACE_INIT<T>(this: MixedInParser, phaseDesc: string, phaseImpl: () => T): T {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  }\n}\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n// !!!!!\n// SEE https://github.com/microsoft/vscode/blob/master/src/vs/base/common/platform.ts\n// !!!!!\n\ndeclare const process: { platform: 'win32' };\ndeclare const navigator: { userAgent: string };\n\nexport let isWindows: boolean;\n\nif (typeof process === 'object') {\n\tisWindows = process.platform === 'win32';\n} else if (typeof navigator === 'object') {\n\tlet userAgent = navigator.userAgent;\n\tisWindows = userAgent.indexOf('Windows') >= 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { CharCode } from './charCode'\nimport { isWindows } from './platform';\n\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\n\nfunction _validateUri(ret: URI, _strict?: boolean): void {\n\n\t// scheme, must be set\n\tif (!ret.scheme && _strict) {\n\t\tthrow new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n\t}\n\n\t// scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n\t// ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\tif (ret.scheme && !_schemePattern.test(ret.scheme)) {\n\t\tthrow new Error('[UriError]: Scheme contains illegal characters.');\n\t}\n\n\t// path, http://tools.ietf.org/html/rfc3986#section-3.3\n\t// If a URI contains an authority component, then the path component\n\t// must either be empty or begin with a slash (\"/\") character.  If a URI\n\t// does not contain an authority component, then the path cannot begin\n\t// with two slash characters (\"//\").\n\tif (ret.path) {\n\t\tif (ret.authority) {\n\t\t\tif (!_singleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n\t\t\t}\n\t\t} else {\n\t\t\tif (_doubleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n\t\t\t}\n\t\t}\n\t}\n}\n\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme: string, _strict: boolean): string {\n\tif (!scheme && !_strict) {\n\t\treturn 'file';\n\t}\n\treturn scheme;\n}\n\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme: string, path: string): string {\n\n\t// the slash-character is our 'default base' as we don't\n\t// support constructing URIs relative to other URIs. This\n\t// also means that we alter and potentially break paths.\n\t// see https://tools.ietf.org/html/rfc3986#section-5.1.4\n\tswitch (scheme) {\n\t\tcase 'https':\n\t\tcase 'http':\n\t\tcase 'file':\n\t\t\tif (!path) {\n\t\t\t\tpath = _slash;\n\t\t\t} else if (path[0] !== _slash) {\n\t\t\t\tpath = _slash + path;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\treturn path;\n}\n\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nexport class URI implements UriComponents {\n\n\tstatic isUri(thing: any): thing is URI {\n\t\tif (thing instanceof URI) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!thing) {\n\t\t\treturn false;\n\t\t}\n\t\treturn typeof (<URI>thing).authority === 'string'\n\t\t\t&& typeof (<URI>thing).fragment === 'string'\n\t\t\t&& typeof (<URI>thing).path === 'string'\n\t\t\t&& typeof (<URI>thing).query === 'string'\n\t\t\t&& typeof (<URI>thing).scheme === 'string'\n\t\t\t&& typeof (<URI>thing).fsPath === 'string'\n\t\t\t&& typeof (<URI>thing).with === 'function'\n\t\t\t&& typeof (<URI>thing).toString === 'function';\n\t}\n\n\t/**\n\t * scheme is the 'http' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part before the first colon.\n\t */\n\treadonly scheme: string;\n\n\t/**\n\t * authority is the 'www.example.com' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part between the first double slashes and the next slash.\n\t */\n\treadonly authority: string;\n\n\t/**\n\t * path is the '/some/path' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly path: string;\n\n\t/**\n\t * query is the 'query' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly query: string;\n\n\t/**\n\t * fragment is the 'fragment' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly fragment: string;\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(scheme: string, authority?: string, path?: string, query?: string, fragment?: string, _strict?: boolean);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(components: UriComponents);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(schemeOrData: string | UriComponents, authority?: string, path?: string, query?: string, fragment?: string, _strict: boolean = false) {\n\n\t\tif (typeof schemeOrData === 'object') {\n\t\t\tthis.scheme = schemeOrData.scheme || _empty;\n\t\t\tthis.authority = schemeOrData.authority || _empty;\n\t\t\tthis.path = schemeOrData.path || _empty;\n\t\t\tthis.query = schemeOrData.query || _empty;\n\t\t\tthis.fragment = schemeOrData.fragment || _empty;\n\t\t\t// no validation because it's this URI\n\t\t\t// that creates uri components.\n\t\t\t// _validateUri(this);\n\t\t} else {\n\t\t\tthis.scheme = _schemeFix(schemeOrData, _strict);\n\t\t\tthis.authority = authority || _empty;\n\t\t\tthis.path = _referenceResolution(this.scheme, path || _empty);\n\t\t\tthis.query = query || _empty;\n\t\t\tthis.fragment = fragment || _empty;\n\n\t\t\t_validateUri(this, _strict);\n\t\t}\n\t}\n\n\t// ---- filesystem path -----------------------\n\n\t/**\n\t * Returns a string representing the corresponding file system path of this URI.\n\t * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n\t * platform specific path separator.\n\t *\n\t * * Will *not* validate the path for invalid characters and semantics.\n\t * * Will *not* look at the scheme of this URI.\n\t * * The result shall *not* be used for display purposes but for accessing a file on disk.\n\t *\n\t *\n\t * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n\t * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n\t *\n\t * ```ts\n\t\tconst u = URI.parse('file://server/c$/folder/file.txt')\n\t\tu.authority === 'server'\n\t\tu.path === '/shares/c$/file.txt'\n\t\tu.fsPath === '\\\\server\\c$\\folder\\file.txt'\n\t```\n\t *\n\t * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n\t * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n\t * with URIs that represent files on disk (`file` scheme).\n\t */\n\tget fsPath(): string {\n\t\t// if (this.scheme !== 'file') {\n\t\t// \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n\t\t// }\n\t\treturn uriToFsPath(this, false);\n\t}\n\n\t// ---- modify to new -------------------------\n\n\twith(change: { scheme?: string; authority?: string | null; path?: string | null; query?: string | null; fragment?: string | null }): URI {\n\n\t\tif (!change) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet { scheme, authority, path, query, fragment } = change;\n\t\tif (scheme === undefined) {\n\t\t\tscheme = this.scheme;\n\t\t} else if (scheme === null) {\n\t\t\tscheme = _empty;\n\t\t}\n\t\tif (authority === undefined) {\n\t\t\tauthority = this.authority;\n\t\t} else if (authority === null) {\n\t\t\tauthority = _empty;\n\t\t}\n\t\tif (path === undefined) {\n\t\t\tpath = this.path;\n\t\t} else if (path === null) {\n\t\t\tpath = _empty;\n\t\t}\n\t\tif (query === undefined) {\n\t\t\tquery = this.query;\n\t\t} else if (query === null) {\n\t\t\tquery = _empty;\n\t\t}\n\t\tif (fragment === undefined) {\n\t\t\tfragment = this.fragment;\n\t\t} else if (fragment === null) {\n\t\t\tfragment = _empty;\n\t\t}\n\n\t\tif (scheme === this.scheme\n\t\t\t&& authority === this.authority\n\t\t\t&& path === this.path\n\t\t\t&& query === this.query\n\t\t\t&& fragment === this.fragment) {\n\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new Uri(scheme, authority, path, query, fragment);\n\t}\n\n\t// ---- parse & validate ------------------------\n\n\t/**\n\t * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n\t * `file:///usr/home`, or `scheme:with/path`.\n\t *\n\t * @param value A string which represents an URI (see `URI#toString`).\n\t */\n\tstatic parse(value: string, _strict: boolean = false): URI {\n\t\tconst match = _regexp.exec(value);\n\t\tif (!match) {\n\t\t\treturn new Uri(_empty, _empty, _empty, _empty, _empty);\n\t\t}\n\t\treturn new Uri(\n\t\t\tmatch[2] || _empty,\n\t\t\tpercentDecode(match[4] || _empty),\n\t\t\tpercentDecode(match[5] || _empty),\n\t\t\tpercentDecode(match[7] || _empty),\n\t\t\tpercentDecode(match[9] || _empty),\n\t\t\t_strict\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n\t * `/usr/home`, or `\\\\server\\share\\some\\path`.\n\t *\n\t * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n\t * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n\t * `URI.parse('file://' + path)` because the path might contain characters that are\n\t * interpreted (# and ?). See the following sample:\n\t * ```ts\n\tconst good = URI.file('/coding/c#/project1');\n\tgood.scheme === 'file';\n\tgood.path === '/coding/c#/project1';\n\tgood.fragment === '';\n\tconst bad = URI.parse('file://' + '/coding/c#/project1');\n\tbad.scheme === 'file';\n\tbad.path === '/coding/c'; // path is now broken\n\tbad.fragment === '/project1';\n\t```\n\t *\n\t * @param path A file system path (see `URI#fsPath`)\n\t */\n\tstatic file(path: string): URI {\n\n\t\tlet authority = _empty;\n\n\t\t// normalize to fwd-slashes on windows,\n\t\t// on other systems bwd-slashes are valid\n\t\t// filename character, eg /f\\oo/ba\\r.txt\n\t\tif (isWindows) {\n\t\t\tpath = path.replace(/\\\\/g, _slash);\n\t\t}\n\n\t\t// check for authority as used in UNC shares\n\t\t// or use the path as given\n\t\tif (path[0] === _slash && path[1] === _slash) {\n\t\t\tconst idx = path.indexOf(_slash, 2);\n\t\t\tif (idx === -1) {\n\t\t\t\tauthority = path.substring(2);\n\t\t\t\tpath = _slash;\n\t\t\t} else {\n\t\t\t\tauthority = path.substring(2, idx);\n\t\t\t\tpath = path.substring(idx) || _slash;\n\t\t\t}\n\t\t}\n\n\t\treturn new Uri('file', authority, path, _empty, _empty);\n\t}\n\n\tstatic from(components: { scheme: string; authority?: string; path?: string; query?: string; fragment?: string }): URI {\n\t\tconst result = new Uri(\n\t\t\tcomponents.scheme,\n\t\t\tcomponents.authority,\n\t\t\tcomponents.path,\n\t\t\tcomponents.query,\n\t\t\tcomponents.fragment,\n\t\t);\n\t\t_validateUri(result, true);\n\t\treturn result;\n\t}\n\n\t// ---- printing/externalize ---------------------------\n\n\t/**\n\t * Creates a string representation for this URI. It's guaranteed that calling\n\t * `URI.parse` with the result of this function creates an URI which is equal\n\t * to this URI.\n\t *\n\t * * The result shall *not* be used for display purposes but for externalization or transport.\n\t * * The result will be encoded using the percentage encoding and encoding happens mostly\n\t * ignore the scheme-specific encoding rules.\n\t *\n\t * @param skipEncoding Do not encode the result, default is `false`\n\t */\n\ttoString(skipEncoding: boolean = false): string {\n\t\treturn _asFormatted(this, skipEncoding);\n\t}\n\n\ttoJSON(): UriComponents {\n\t\treturn this;\n\t}\n\n\tstatic revive(data: UriComponents | URI): URI;\n\tstatic revive(data: UriComponents | URI | undefined): URI | undefined;\n\tstatic revive(data: UriComponents | URI | null): URI | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null {\n\t\tif (!data) {\n\t\t\treturn <any>data;\n\t\t} else if (data instanceof URI) {\n\t\t\treturn data;\n\t\t} else {\n\t\t\tconst result = new Uri(data);\n\t\t\tresult._formatted = (<UriState>data).external;\n\t\t\tresult._fsPath = (<UriState>data)._sep === _pathSepMarker ? (<UriState>data).fsPath : null;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport interface UriComponents {\n\tscheme: string;\n\tauthority: string;\n\tpath: string;\n\tquery: string;\n\tfragment: string;\n}\n\ninterface UriState extends UriComponents {\n\t$mid: number;\n\texternal: string;\n\tfsPath: string;\n\t_sep: 1 | undefined;\n}\n\nconst _pathSepMarker = isWindows ? 1 : undefined;\n\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n\n\t_formatted: string | null = null;\n\t_fsPath: string | null = null;\n\n\toverride get fsPath(): string {\n\t\tif (!this._fsPath) {\n\t\t\tthis._fsPath = uriToFsPath(this, false);\n\t\t}\n\t\treturn this._fsPath;\n\t}\n\n\toverride toString(skipEncoding: boolean = false): string {\n\t\tif (!skipEncoding) {\n\t\t\tif (!this._formatted) {\n\t\t\t\tthis._formatted = _asFormatted(this, false);\n\t\t\t}\n\t\t\treturn this._formatted;\n\t\t} else {\n\t\t\t// we don't cache that\n\t\t\treturn _asFormatted(this, true);\n\t\t}\n\t}\n\n\toverride toJSON(): UriComponents {\n\t\tconst res = <UriState>{\n\t\t\t$mid: 1\n\t\t};\n\t\t// cached state\n\t\tif (this._fsPath) {\n\t\t\tres.fsPath = this._fsPath;\n\t\t\tres._sep = _pathSepMarker;\n\t\t}\n\t\tif (this._formatted) {\n\t\t\tres.external = this._formatted;\n\t\t}\n\t\t// uri components\n\t\tif (this.path) {\n\t\t\tres.path = this.path;\n\t\t}\n\t\tif (this.scheme) {\n\t\t\tres.scheme = this.scheme;\n\t\t}\n\t\tif (this.authority) {\n\t\t\tres.authority = this.authority;\n\t\t}\n\t\tif (this.query) {\n\t\t\tres.query = this.query;\n\t\t}\n\t\tif (this.fragment) {\n\t\t\tres.fragment = this.fragment;\n\t\t}\n\t\treturn res;\n\t}\n}\n\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable: { [ch: number]: string } = {\n\t[CharCode.Colon]: '%3A', // gen-delims\n\t[CharCode.Slash]: '%2F',\n\t[CharCode.QuestionMark]: '%3F',\n\t[CharCode.Hash]: '%23',\n\t[CharCode.OpenSquareBracket]: '%5B',\n\t[CharCode.CloseSquareBracket]: '%5D',\n\t[CharCode.AtSign]: '%40',\n\n\t[CharCode.ExclamationMark]: '%21', // sub-delims\n\t[CharCode.DollarSign]: '%24',\n\t[CharCode.Ampersand]: '%26',\n\t[CharCode.SingleQuote]: '%27',\n\t[CharCode.OpenParen]: '%28',\n\t[CharCode.CloseParen]: '%29',\n\t[CharCode.Asterisk]: '%2A',\n\t[CharCode.Plus]: '%2B',\n\t[CharCode.Comma]: '%2C',\n\t[CharCode.Semicolon]: '%3B',\n\t[CharCode.Equals]: '%3D',\n\n\t[CharCode.Space]: '%20',\n};\n\nfunction encodeURIComponentFast(uriComponent: string, isPath: boolean, isAuthority: boolean): string {\n\tlet res: string | undefined = undefined;\n\tlet nativeEncodePos = -1;\n\n\tfor (let pos = 0; pos < uriComponent.length; pos++) {\n\t\tconst code = uriComponent.charCodeAt(pos);\n\n\t\t// unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n\t\tif (\n\t\t\t(code >= CharCode.a && code <= CharCode.z)\n\t\t\t|| (code >= CharCode.A && code <= CharCode.Z)\n\t\t\t|| (code >= CharCode.Digit0 && code <= CharCode.Digit9)\n\t\t\t|| code === CharCode.Dash\n\t\t\t|| code === CharCode.Period\n\t\t\t|| code === CharCode.Underline\n\t\t\t|| code === CharCode.Tilde\n\t\t\t|| (isPath && code === CharCode.Slash)\n\t\t\t|| (isAuthority && code === CharCode.OpenSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.CloseSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.Colon)\n\t\t) {\n\t\t\t// check if we are delaying native encode\n\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\tnativeEncodePos = -1;\n\t\t\t}\n\t\t\t// check if we write into a new string (by default we try to return the param)\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += uriComponent.charAt(pos);\n\t\t\t}\n\n\t\t} else {\n\t\t\t// encoding needed, we need to allocate a new string\n\t\t\tif (res === undefined) {\n\t\t\t\tres = uriComponent.substr(0, pos);\n\t\t\t}\n\n\t\t\t// check with default table first\n\t\t\tconst escaped = encodeTable[code];\n\t\t\tif (escaped !== undefined) {\n\n\t\t\t\t// check if we are delaying native encode\n\t\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\t\tnativeEncodePos = -1;\n\t\t\t\t}\n\n\t\t\t\t// append escaped variant to result\n\t\t\t\tres += escaped;\n\n\t\t\t} else if (nativeEncodePos === -1) {\n\t\t\t\t// use native encode only when needed\n\t\t\t\tnativeEncodePos = pos;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (nativeEncodePos !== -1) {\n\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n\t}\n\n\treturn res !== undefined ? res : uriComponent;\n}\n\nfunction encodeURIComponentMinimal(path: string): string {\n\tlet res: string | undefined = undefined;\n\tfor (let pos = 0; pos < path.length; pos++) {\n\t\tconst code = path.charCodeAt(pos);\n\t\tif (code === CharCode.Hash || code === CharCode.QuestionMark) {\n\t\t\tif (res === undefined) {\n\t\t\t\tres = path.substr(0, pos);\n\t\t\t}\n\t\t\tres += encodeTable[code];\n\t\t} else {\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += path[pos];\n\t\t\t}\n\t\t}\n\t}\n\treturn res !== undefined ? res : path;\n}\n\n/**\n * Compute `fsPath` for the given uri\n */\nexport function uriToFsPath(uri: URI, keepDriveLetterCasing: boolean): string {\n\n\tlet value: string;\n\tif (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n\t\t// unc path: file://shares/c$/far/boo\n\t\tvalue = `//${uri.authority}${uri.path}`;\n\t} else if (\n\t\turi.path.charCodeAt(0) === CharCode.Slash\n\t\t&& (uri.path.charCodeAt(1) >= CharCode.A && uri.path.charCodeAt(1) <= CharCode.Z || uri.path.charCodeAt(1) >= CharCode.a && uri.path.charCodeAt(1) <= CharCode.z)\n\t\t&& uri.path.charCodeAt(2) === CharCode.Colon\n\t) {\n\t\tif (!keepDriveLetterCasing) {\n\t\t\t// windows drive letter: file:///c:/far/boo\n\t\t\tvalue = uri.path[1].toLowerCase() + uri.path.substr(2);\n\t\t} else {\n\t\t\tvalue = uri.path.substr(1);\n\t\t}\n\t} else {\n\t\t// other path\n\t\tvalue = uri.path;\n\t}\n\tif (isWindows) {\n\t\tvalue = value.replace(/\\//g, '\\\\');\n\t}\n\treturn value;\n}\n\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri: URI, skipEncoding: boolean): string {\n\n\tconst encoder = !skipEncoding\n\t\t? encodeURIComponentFast\n\t\t: encodeURIComponentMinimal;\n\n\tlet res = '';\n\tlet { scheme, authority, path, query, fragment } = uri;\n\tif (scheme) {\n\t\tres += scheme;\n\t\tres += ':';\n\t}\n\tif (authority || scheme === 'file') {\n\t\tres += _slash;\n\t\tres += _slash;\n\t}\n\tif (authority) {\n\t\tlet idx = authority.indexOf('@');\n\t\tif (idx !== -1) {\n\t\t\t// <user>@<auth>\n\t\t\tconst userinfo = authority.substr(0, idx);\n\t\t\tauthority = authority.substr(idx + 1);\n\t\t\tidx = userinfo.lastIndexOf(':');\n\t\t\tif (idx === -1) {\n\t\t\t\tres += encoder(userinfo, false, false);\n\t\t\t} else {\n\t\t\t\t// <user>:<pass>@<auth>\n\t\t\t\tres += encoder(userinfo.substr(0, idx), false, false);\n\t\t\t\tres += ':';\n\t\t\t\tres += encoder(userinfo.substr(idx + 1), false, true);\n\t\t\t}\n\t\t\tres += '@';\n\t\t}\n\t\tauthority = authority.toLowerCase();\n\t\tidx = authority.lastIndexOf(':');\n\t\tif (idx === -1) {\n\t\t\tres += encoder(authority, false, true);\n\t\t} else {\n\t\t\t// <auth>:<port>\n\t\t\tres += encoder(authority.substr(0, idx), false, true);\n\t\t\tres += authority.substr(idx);\n\t\t}\n\t}\n\tif (path) {\n\t\t// lower-case windows drive letters in /C:/fff or C:/fff\n\t\tif (path.length >= 3 && path.charCodeAt(0) === CharCode.Slash && path.charCodeAt(2) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(1);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t} else if (path.length >= 2 && path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(0);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t}\n\t\t// encode the rest of the path\n\t\tres += encoder(path, true, false);\n\t}\n\tif (query) {\n\t\tres += '?';\n\t\tres += encoder(query, false, false);\n\t}\n\tif (fragment) {\n\t\tres += '#';\n\t\tres += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n\t}\n\treturn res;\n}\n\n// --- decode\n\nfunction decodeURIComponentGraceful(str: string): string {\n\ttry {\n\t\treturn decodeURIComponent(str);\n\t} catch {\n\t\tif (str.length > 3) {\n\t\t\treturn str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n\t\t} else {\n\t\t\treturn str;\n\t\t}\n\t}\n}\n\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\n\nfunction percentDecode(str: string): string {\n\tif (!str.match(_rEncodedAsHex)) {\n\t\treturn str;\n\t}\n\treturn str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\n}\n\n/**\n * Mapped-type that replaces all occurrences of URI with UriComponents\n */\nexport type UriDto<T> = { [K in keyof T]: T[K] extends URI\n\t? UriComponents\n\t: UriDto<T[K]> };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { CharCode } from './charCode';\nimport { URI } from './uri';\nimport * as nodePath from 'path';\n\nconst posixPath = nodePath.posix || nodePath;\nconst slash = '/';\n\nexport namespace Utils {\n\n    /**\n     * Joins one or more input paths to the path of URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved.\n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are preserved.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to be joined with the path of URI.\n     * @returns A URI with the joined path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function joinPath(uri: URI, ...paths: string[]): URI {\n        return uri.with({ path: posixPath.join(uri.path, ...paths) });\n    }\n\n\n    /**\n     * Resolves one or more paths against the path of a URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved. \n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are removed.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to resolve against the path of URI.\n     * @returns A URI with the resolved path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function resolvePath(uri: URI, ...paths: string[]): URI {\n        let path = uri.path; \n        let slashAdded = false;\n        if (path[0] !== slash) {\n            path = slash + path; // make the path abstract: for posixPath.resolve the first segments has to be absolute or cwd is used.\n            slashAdded = true;\n        }\n        let resolvedPath = posixPath.resolve(path, ...paths);\n        if (slashAdded && resolvedPath[0] === slash && !uri.authority) {\n            resolvedPath = resolvedPath.substring(1);\n        }\n        return uri.with({ path: resolvedPath });\n    }\n\n    /**\n     * Returns a URI where the path is the directory name of the input uri, similar to the Unix dirname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The orignal URI is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The last segment of the URIs path.\n     */\n    export function dirname(uri: URI): URI {\n        if (uri.path.length === 0 || uri.path === slash) {\n            return uri;\n        }\n        let path = posixPath.dirname(uri.path);\n        if (path.length === 1 && path.charCodeAt(0) === CharCode.Period) {\n            path = '';\n        }\n        return uri.with({ path });\n    }\n\n    /**\n     * Returns the last segment of the path of a URI, similar to the Unix basename command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The base name of the URIs path.\n     */\n    export function basename(uri: URI): string {\n        return posixPath.basename(uri.path);\n    }\n\n    /**\n     * Returns the extension name of the path of a URI, similar to the Unix extname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The extension name of the URIs path.\n     */\n    export function extname(uri: URI): string {\n        return posixPath.extname(uri.path);\n    }\n}","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/**\r\n * A stream is a read-only sequence of values. While the contents of an array can be accessed\r\n * both sequentially and randomly (via index), a stream allows only sequential access.\r\n *\r\n * The advantage of this is that a stream can be evaluated lazily, so it does not require\r\n * to store intermediate values. This can boost performance when a large sequence is\r\n * processed via filtering, mapping etc. and accessed at most once. However, lazy\r\n * evaluation means that all processing is repeated when you access the sequence multiple\r\n * times; in such a case, it may be better to store the resulting sequence into an array.\r\n */\r\nexport interface Stream<T> extends Iterable<T> {\r\n\r\n    /**\r\n     * Returns an iterator for this stream. This is the same as calling the `Symbol.iterator` function property.\r\n     */\r\n    iterator(): IterableIterator<T>;\r\n\r\n    /**\r\n     * Determines whether this stream contains no elements.\r\n     */\r\n    isEmpty(): boolean;\r\n\r\n    /**\r\n     * Determines the number of elements in this stream.\r\n     */\r\n    count(): number;\r\n\r\n    /**\r\n     * Collects all elements of this stream into an array.\r\n     */\r\n    toArray(): T[];\r\n\r\n    /**\r\n     * Collects all elements of this stream into a Set.\r\n     */\r\n    toSet(): Set<T>;\r\n\r\n    /**\r\n     * Collects all elements of this stream into a Map, applying the provided functions to determine keys and values.\r\n     *\r\n     * @param keyFn The function to derive map keys. If omitted, the stream elements are used as keys.\r\n     * @param valueFn The function to derive map values. If omitted, the stream elements are used as values.\r\n     */\r\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V>;\r\n\r\n    /**\r\n     * Returns a string representation of a stream.\r\n     */\r\n    toString(): string;\r\n\r\n    /**\r\n     * Combines two streams by returning a new stream that yields all elements of this stream and the other stream.\r\n     *\r\n     * @param other Stream to be concatenated with this one.\r\n     */\r\n    concat<T2>(other: Iterable<T2>): Stream<T | T2>;\r\n\r\n    /**\r\n     * Adds all elements of the stream into a string, separated by the specified separator string.\r\n     *\r\n     * @param separator A string used to separate one element of the stream from the next in the resulting string.\r\n     *        If omitted, the steam elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in the stream, or -1 if it is not present.\r\n     *\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The stream index at which to begin the search. If fromIndex is omitted, the search\r\n     *        starts at index 0.\r\n     */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Determines whether all members of the stream satisfy the specified test.\r\n     *\r\n     * @param predicate This method calls the predicate function for each element in the stream until the\r\n     *        predicate returns a value which is coercible to the Boolean value `false`, or until the end\r\n     *        of the stream.\r\n     */\r\n    every<S extends T>(predicate: (value: T) => value is S): this is Stream<S>;\r\n    every(predicate: (value: T) => unknown): boolean;\r\n\r\n    /**\r\n     * Determines whether any member of the stream satisfies the specified test.\r\n     *\r\n     * @param predicate This method calls the predicate function for each element in the stream until the\r\n     *        predicate returns a value which is coercible to the Boolean value `true`, or until the end\r\n     *        of the stream.\r\n     */\r\n    some(predicate: (value: T) => unknown): boolean;\r\n\r\n    /**\r\n     * Performs the specified action for each element in the stream.\r\n     *\r\n     * @param callbackfn Function called once for each element in the stream.\r\n     */\r\n    forEach(callbackfn: (value: T, index: number) => void): void;\r\n\r\n    /**\r\n     * Returns a stream that yields the results of calling the specified callback function on each element\r\n     * of the stream. The function is called when the resulting stream elements are actually accessed, so\r\n     * accessing the resulting stream multiple times means the function is also called multiple times for\r\n     * each element of the stream.\r\n     *\r\n     * @param callbackfn Lazily evaluated function mapping stream elements.\r\n     */\r\n    map<U>(callbackfn: (value: T) => U): Stream<U>;\r\n\r\n    /**\r\n     * Returns the elements of the stream that meet the condition specified in a callback function.\r\n     * The function is called when the resulting stream elements are actually accessed, so accessing the\r\n     * resulting stream multiple times means the function is also called multiple times for each element\r\n     * of the stream.\r\n     *\r\n     * @param predicate Lazily evaluated function checking a condition on stream elements.\r\n     */\r\n    filter<S extends T>(predicate: (value: T) => value is S): Stream<S>;\r\n    filter(predicate: (value: T) => unknown): Stream<T>;\r\n\r\n    /**\r\n     * Returns the elements of the stream that are _non-nullable_, which means they are neither `undefined`\r\n     * nor `null`.\r\n     */\r\n    nonNullable(): Stream<NonNullable<T>>;\r\n\r\n    /**\r\n     * Calls the specified callback function for all elements in the stream. The return value of the\r\n     * callback function is the accumulated result, and is provided as an argument in the next call to\r\n     * the callback function.\r\n     *\r\n     * @param callbackfn This method calls the function once for each element in the stream, providing\r\n     *        the previous and current values of the reduction.\r\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\r\n     *        accumulation. The first call to the function provides this value as an argument instead\r\n     *        of a stream value.\r\n     */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all elements in the stream, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     *\r\n     * @param callbackfn This method calls the function once for each element in the stream, providing\r\n     *        the previous and current values of the reduction.\r\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\r\n     *        accumulation. The first call to the function provides this value as an argument instead\r\n     *        of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Returns the value of the first element in the stream that meets the condition, or `undefined`\r\n     * if there is no such element.\r\n     *\r\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\r\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\r\n     *        Boolean value `true`.\r\n     */\r\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the stream that meets the condition, or `-1`\r\n     * if there is no such element.\r\n     *\r\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\r\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\r\n     *        Boolean value `true`.\r\n     */\r\n    findIndex(predicate: (value: T) => unknown): number;\r\n\r\n    /**\r\n     * Determines whether the stream includes a certain element, returning `true` or `false` as appropriate.\r\n     *\r\n     * @param searchElement The element to search for.\r\n     */\r\n    includes(searchElement: T): boolean;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of the stream and then flattens the result into\r\n     * a new stream. This is identical to a `map` followed by `flat` with depth 1.\r\n     *\r\n     * @param callbackfn Lazily evaluated function mapping stream elements.\r\n     */\r\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U>;\r\n\r\n    /**\r\n     * Returns a new stream with all sub-stream or sub-array elements concatenated into it recursively up\r\n     * to the specified depth.\r\n     *\r\n     * @param depth The maximum recursion depth. Defaults to 1.\r\n     */\r\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D>;\r\n\r\n    /**\r\n     * Returns the first element in the stream, or `undefined` if the stream is empty.\r\n     */\r\n    head(): T | undefined;\r\n\r\n    /**\r\n     * Returns a stream that skips the first `skipCount` elements from this stream.\r\n     *\r\n     * @param skipCount The number of elements to skip. If this is larger than the number of elements in\r\n     *        the stream, an empty stream is returned. Defaults to 1.\r\n     */\r\n    tail(skipCount?: number): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream consisting of the elements of this stream, truncated to be no longer than `maxSize`\r\n     * in length.\r\n     *\r\n     * @param maxSize The number of elements the stream should be limited to\r\n     */\r\n    limit(maxSize: number): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream containing only the distinct elements from this stream.\r\n     * Equality is determined with the same rules as a standard `Set`.\r\n     *\r\n     * @param by A function returning the key used to check equality with a previous stream element.\r\n     *        If omitted, the stream elements themselves are used for comparison.\r\n     */\r\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream that contains all elements that don't exist in the {@link other} iterable.\r\n     * Equality is determined with the same rules as a standard `Set`.\r\n     * @param other The elements that should be exluded from this stream.\r\n     * @param key A function returning the key used to check quality.\r\n     *        If omitted, the stream elements themselves are used for comparison.\r\n     */\r\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T>;\r\n\r\n}\r\n\r\nexport type FlatStream<T, Depth extends number> = {\r\n    'done': Stream<T>,\r\n    'recur': T extends Iterable<infer Content>\r\n        ? FlatStream<Content, MinusOne<Depth>>\r\n        : Stream<T>\r\n}[Depth extends 0 ? 'done' : 'recur'];\r\n\r\nexport type MinusOne<N extends number> = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][N];\r\n\r\n/**\r\n * The default implementation of `Stream` works with two input functions:\r\n *  - The first function creates the initial state of an iteration.\r\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\r\n */\r\nexport class StreamImpl<S, T> implements Stream<T> {\r\n    protected readonly startFn: () => S;\r\n    protected readonly nextFn: (state: S) => IteratorResult<T>;\r\n\r\n    constructor(startFn: () => S, nextFn: (state: S) => IteratorResult<T, undefined>) {\r\n        this.startFn = startFn;\r\n        this.nextFn = nextFn;\r\n    }\r\n\r\n    iterator(): IterableIterator<T> {\r\n        const iterator = {\r\n            state: this.startFn(),\r\n            next: () => this.nextFn(iterator.state),\r\n            [Symbol.iterator]: () => iterator\r\n        };\r\n        return iterator;\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<T> {\r\n        return this.iterator();\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        const iterator = this.iterator();\r\n        return Boolean(iterator.next().done);\r\n    }\r\n\r\n    count(): number {\r\n        const iterator = this.iterator();\r\n        let count = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            count++;\r\n            next = iterator.next();\r\n        }\r\n        return count;\r\n    }\r\n\r\n    toArray(): T[] {\r\n        const result: T[] = [];\r\n        const iterator = this.iterator();\r\n        let next: IteratorResult<T>;\r\n        do {\r\n            next = iterator.next();\r\n            if (next.value !== undefined) {\r\n                result.push(next.value);\r\n            }\r\n        } while (!next.done);\r\n        return result;\r\n    }\r\n\r\n    toSet(): Set<T> {\r\n        return new Set(this);\r\n    }\r\n\r\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V> {\r\n        const entryStream = this.map(element => <[K, V]>[\r\n            keyFn ? keyFn(element) : element,\r\n            valueFn ? valueFn(element) : element\r\n        ]);\r\n        return new Map(entryStream);\r\n    }\r\n\r\n    toString(): string {\r\n        return this.join();\r\n    }\r\n\r\n    concat<T2>(other: Iterable<T2>): Stream<T | T2> {\r\n        return new StreamImpl<{ first: S, firstDone: boolean, iterator: Iterator<T2, unknown, undefined> }, T | T2>(\r\n            () => ({ first: this.startFn(), firstDone: false, iterator: other[Symbol.iterator]() }),\r\n            state => {\r\n                let result: IteratorResult<T | T2>;\r\n                if (!state.firstDone) {\r\n                    do {\r\n                        result = this.nextFn(state.first);\r\n                        if (!result.done) {\r\n                            return result;\r\n                        }\r\n                    } while (!result.done);\r\n                    state.firstDone = true;\r\n                }\r\n                do {\r\n                    result = state.iterator.next();\r\n                    if (!result.done) {\r\n                        return result;\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    join(separator = ','): string {\r\n        const iterator = this.iterator();\r\n        let value = '';\r\n        let result: IteratorResult<T>;\r\n        let addSeparator = false;\r\n        do {\r\n            result = iterator.next();\r\n            if (!result.done) {\r\n                if (addSeparator) {\r\n                    value += separator;\r\n                }\r\n                value += toString(result.value);\r\n            }\r\n            addSeparator = true;\r\n        } while (!result.done);\r\n        return value;\r\n    }\r\n\r\n    indexOf(searchElement: T, fromIndex = 0): number {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (index >= fromIndex && next.value === searchElement) {\r\n                return index;\r\n            }\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // In the following definition the '& this' part in the return type is important\r\n    // _and_ the order within 'Stream<U> & this' is crucial!\r\n    // Otherwise Typescript would infer the type of 'this' as 'StreamImpl<S, T> & Stream<U>'\r\n    // (or '<subClass of StreamImpl<S, T> & Stream<U>') and usages like\r\n    // ```\r\n    //  const stream = new StreamImpl(...);\r\n    //  ... stream.every(<typeGuard>) & stream....\r\n    // ```\r\n    // cannot benefit from '<typeGuard>', as Typescript would priorize the signatures\r\n    // of 'StreamImpl<S, T>' (i.e. those of 'Stream<T>') over those of 'Stream<U>'.\r\n    // With the order of 'Stream<U> & this' the signatures of 'Stream<U>' get precedence.\r\n    every<U extends T>(predicate: (value: T) => value is U): this is Stream<U> & this;\r\n    every(predicate: (value: T) => unknown): boolean;\r\n    every(predicate: (value: T) => unknown): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (!predicate(next.value)) {\r\n                return false;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    some(predicate: (value: T) => unknown): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return true;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    forEach(callbackfn: (value: T, index: number) => void): void {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            callbackfn(next.value, index);\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n    }\r\n\r\n    map<U>(callbackfn: (value: T) => U): Stream<U> {\r\n        return new StreamImpl<S, U>(\r\n            this.startFn,\r\n            (state) => {\r\n                const { done, value } = this.nextFn(state);\r\n                if (done) {\r\n                    return DONE_RESULT;\r\n                } else {\r\n                    return { done: false, value: callbackfn(value) };\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // for remarks on the return type definition refer to 'every<U extends T>(...)'\r\n    filter<U extends T>(predicate: (value: T) => value is U): Stream<U> & this;\r\n    filter(predicate: (value: T) => unknown): Stream<T> & this;\r\n    filter(predicate: (value: T) => unknown): Stream<T> {\r\n        return new StreamImpl<S, T>(\r\n            this.startFn,\r\n            state => {\r\n                let result: IteratorResult<T>;\r\n                do {\r\n                    result = this.nextFn(state);\r\n                    if (!result.done && predicate(result.value)) {\r\n                        return result;\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    nonNullable(): Stream<NonNullable<T>> {\r\n        return this.filter(e => e !== undefined && e !== null) as Stream<NonNullable<T>>;\r\n    }\r\n\r\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n    reduce<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        const iterator = this.iterator();\r\n        let previousValue: U | T | undefined = initialValue;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (previousValue === undefined) {\r\n                previousValue = next.value;\r\n            } else {\r\n                previousValue = callbackfn(previousValue, next.value);\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return previousValue;\r\n    }\r\n\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n    reduceRight<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\r\n    }\r\n\r\n    protected recursiveReduce<U>(iterator: Iterator<T>, callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        const next = iterator.next();\r\n        if (next.done) {\r\n            return initialValue;\r\n        }\r\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\r\n        if (previousValue === undefined) {\r\n            return next.value;\r\n        }\r\n        return callbackfn(previousValue, next.value);\r\n    }\r\n\r\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return next.value;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findIndex(predicate: (value: T) => unknown): number {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return index;\r\n            }\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    includes(searchElement: T): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (next.value === searchElement) {\r\n                return true;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U> {\r\n        type FlatMapState = { this: S, iterator?: Iterator<U, undefined> }\r\n        return new StreamImpl<FlatMapState, U>(\r\n            () => ({ this: this.startFn() }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (next.done) {\r\n                            state.iterator = undefined;\r\n                        } else {\r\n                            return next;\r\n                        }\r\n                    }\r\n                    const { done, value } = this.nextFn(state.this);\r\n                    if (!done) {\r\n                        const mapped = callbackfn(value);\r\n                        if (isIterable(mapped)) {\r\n                            state.iterator = mapped[Symbol.iterator]();\r\n                        } else {\r\n                            return { done: false, value: mapped };\r\n                        }\r\n                    }\r\n                } while (state.iterator);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D> {\r\n        if (depth === undefined) {\r\n            depth = 1 as D;\r\n        }\r\n        if (depth <= 0) {\r\n            return this as unknown as FlatStream<T, D>;\r\n        }\r\n        const stream = depth > 1 ? this.flat(depth - 1) as unknown as StreamImpl<S, T> : this;\r\n        type FlatMapState = { this: S, iterator?: Iterator<T, undefined> }\r\n        return new StreamImpl<FlatMapState, T>(\r\n            () => ({ this: stream.startFn() }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (next.done) {\r\n                            state.iterator = undefined;\r\n                        } else {\r\n                            return next;\r\n                        }\r\n                    }\r\n                    const { done, value } = stream.nextFn(state.this);\r\n                    if (!done) {\r\n                        if (isIterable(value)) {\r\n                            state.iterator = value[Symbol.iterator]() as Iterator<T>;\r\n                        } else {\r\n                            return { done: false, value: value };\r\n                        }\r\n                    }\r\n                } while (state.iterator);\r\n                return DONE_RESULT;\r\n            }\r\n        ) as unknown as FlatStream<T, D>;\r\n    }\r\n\r\n    head(): T | undefined {\r\n        const iterator = this.iterator();\r\n        const result = iterator.next();\r\n        if (result.done) {\r\n            return undefined;\r\n        }\r\n        return result.value;\r\n    }\r\n\r\n    tail(skipCount = 1): Stream<T> {\r\n        return new StreamImpl<S, T>(\r\n            () => {\r\n                const state = this.startFn();\r\n                for (let i = 0; i < skipCount; i++) {\r\n                    const next = this.nextFn(state);\r\n                    if (next.done) {\r\n                        return state;\r\n                    }\r\n                }\r\n                return state;\r\n            },\r\n            this.nextFn\r\n        );\r\n    }\r\n\r\n    limit(maxSize: number): Stream<T> {\r\n        return new StreamImpl<{ size: number, state: S }, T>(\r\n            () => ({ size: 0, state: this.startFn() }),\r\n            state => {\r\n                state.size++;\r\n                if (state.size > maxSize) {\r\n                    return DONE_RESULT;\r\n                }\r\n                return this.nextFn(state.state);\r\n            }\r\n        );\r\n    }\r\n\r\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T> {\r\n        return new StreamImpl<{ set: Set<Key | T>, internalState: S }, T>(\r\n            () => ({ set: new Set<Key | T>(), internalState: this.startFn() }),\r\n            state => {\r\n                let result: IteratorResult<T>;\r\n                do {\r\n                    result = this.nextFn(state.internalState);\r\n                    if (!result.done) {\r\n                        const value = by ? by(result.value) : result.value;\r\n                        if (!state.set.has(value)) {\r\n                            state.set.add(value);\r\n                            return result;\r\n                        }\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T> {\r\n        const otherKeySet = new Set<Key | T>();\r\n        for (const item of other) {\r\n            const value = key ? key(item) : item;\r\n            otherKeySet.add(value);\r\n        }\r\n        return this.filter(e => {\r\n            const ownKey = key ? key(e) : e;\r\n            return !otherKeySet.has(ownKey);\r\n        });\r\n    }\r\n}\r\n\r\nfunction toString(item: unknown): string {\r\n    if (typeof item === 'string') {\r\n        return item as string;\r\n    }\r\n    if (typeof item === 'undefined') {\r\n        return 'undefined';\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof (item as any).toString === 'function') {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return (item as any).toString();\r\n    }\r\n    return Object.prototype.toString.call(item);\r\n}\r\n\r\nfunction isIterable<T>(obj: unknown): obj is Iterable<T> {\r\n    return !!obj && typeof (obj as Iterable<T>)[Symbol.iterator] === 'function';\r\n}\r\n\r\n/**\r\n * An empty stream of any type.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const EMPTY_STREAM: Stream<any> = new StreamImpl<undefined, any>(() => undefined, () => DONE_RESULT);\r\n\r\n/**\r\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\r\n */\r\nexport const DONE_RESULT: IteratorReturnResult<undefined> = Object.freeze({ done: true, value: undefined });\r\n\r\n/**\r\n * Create a stream from one or more iterables or array-likes.\r\n */\r\nexport function stream<T>(...collections: Array<Iterable<T> | ArrayLike<T>>): Stream<T> {\r\n    if (collections.length === 1) {\r\n        const collection = collections[0];\r\n        if (collection instanceof StreamImpl) {\r\n            return collection as Stream<T>;\r\n        }\r\n        if (isIterable(collection)) {\r\n            return new StreamImpl<Iterator<T, undefined>, T>(\r\n                () => collection[Symbol.iterator](),\r\n                (iterator) => iterator.next()\r\n            );\r\n        }\r\n        if (typeof collection.length === 'number') {\r\n            return new StreamImpl<{ index: number }, T>(\r\n                () => ({ index: 0 }),\r\n                (state) => {\r\n                    if (state.index < collection.length) {\r\n                        return { done: false, value: collection[state.index++] };\r\n                    } else {\r\n                        return DONE_RESULT;\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    if (collections.length > 1) {\r\n        type State = { collIndex: number, iterator?: Iterator<T, undefined>, array?: ArrayLike<T>, arrIndex: number };\r\n        return new StreamImpl<State, T>(\r\n            () => ({ collIndex: 0, arrIndex: 0 }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (!next.done) {\r\n                            return next;\r\n                        }\r\n                        state.iterator = undefined;\r\n                    }\r\n                    if (state.array) {\r\n                        if (state.arrIndex < state.array.length) {\r\n                            return { done: false, value: state.array[state.arrIndex++] };\r\n                        }\r\n                        state.array = undefined;\r\n                        state.arrIndex = 0;\r\n                    }\r\n                    if (state.collIndex < collections.length) {\r\n                        const collection = collections[state.collIndex++];\r\n                        if (isIterable(collection)) {\r\n                            state.iterator = collection[Symbol.iterator]();\r\n                        } else if (collection && typeof collection.length === 'number') {\r\n                            state.array = collection;\r\n                        }\r\n                    }\r\n                } while (state.iterator || state.array || state.collIndex < collections.length);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n    return EMPTY_STREAM;\r\n}\r\n\r\n/**\r\n * A tree iterator adds the ability to prune the current iteration.\r\n */\r\nexport interface TreeIterator<T> extends IterableIterator<T> {\r\n    /**\r\n     * Skip the whole subtree below the last returned element. The iteration continues as if that\r\n     * element had no children.\r\n     */\r\n    prune(): void\r\n}\r\n\r\n/**\r\n * A tree stream is used to stream the elements of a tree, for example an AST or CST.\r\n */\r\nexport interface TreeStream<T> extends Stream<T> {\r\n    iterator(): TreeIterator<T>\r\n}\r\n\r\n/**\r\n * The default implementation of `TreeStream` takes a root element and a function that computes the\r\n * children of its argument. Whether the root node included in the stream is controlled with the\r\n * `includeRoot` option, which defaults to `false`.\r\n */\r\nexport class TreeStreamImpl<T>\r\n    extends StreamImpl<{ iterators: Array<Iterator<T>>, pruned: boolean }, T>\r\n    implements TreeStream<T> {\r\n\r\n    constructor(root: T, children: (node: T) => Iterable<T>, options?: { includeRoot?: boolean }) {\r\n        super(\r\n            () => ({\r\n                iterators: options?.includeRoot ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\r\n                pruned: false\r\n            }),\r\n            state => {\r\n                if (state.pruned) {\r\n                    state.iterators.pop();\r\n                    state.pruned = false;\r\n                }\r\n                while (state.iterators.length > 0) {\r\n                    const iterator = state.iterators[state.iterators.length - 1];\r\n                    const next = iterator.next();\r\n                    if (next.done) {\r\n                        state.iterators.pop();\r\n                    } else {\r\n                        state.iterators.push(children(next.value)[Symbol.iterator]());\r\n                        return next;\r\n                    }\r\n                }\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    override iterator(): TreeIterator<T> {\r\n        const iterator = {\r\n            state: this.startFn(),\r\n            next: () => this.nextFn(iterator.state),\r\n            prune: () => {\r\n                iterator.state.pruned = true;\r\n            },\r\n            [Symbol.iterator]: () => iterator\r\n        };\r\n        return iterator;\r\n    }\r\n}\r\n\r\n/**\r\n * A set of utility functions that reduce a stream to a single value.\r\n */\r\nexport namespace Reduction {\r\n\r\n    /**\r\n     * Compute the sum of a number stream.\r\n     */\r\n    export function sum(stream: Stream<number>): number {\r\n        return stream.reduce((a, b) => a + b, 0);\r\n    }\r\n\r\n    /**\r\n     * Compute the product of a number stream.\r\n     */\r\n    export function product(stream: Stream<number>): number {\r\n        return stream.reduce((a, b) => a * b, 0);\r\n    }\r\n\r\n    /**\r\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\r\n     */\r\n    export function min(stream: Stream<number>): number | undefined {\r\n        return stream.reduce((a, b) => Math.min(a, b));\r\n    }\r\n\r\n    /**\r\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\r\n     */\r\n    export function max(stream: Stream<number>): number | undefined {\r\n        return stream.reduce((a, b) => Math.max(a, b));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IToken } from '@chevrotain/types';\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { CstNode, CompositeCstNode, LeafCstNode } from '../syntax-tree.js';\r\nimport type { DocumentSegment } from '../workspace/documents.js';\r\nimport type { Stream, TreeStream } from './stream.js';\r\nimport { isCompositeCstNode, isLeafCstNode, isRootCstNode } from '../syntax-tree.js';\r\nimport { TreeStreamImpl } from './stream.js';\r\n\r\n/**\r\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\r\n * including the root node itself.\r\n */\r\nexport function streamCst(node: CstNode): TreeStream<CstNode> {\r\n    return new TreeStreamImpl(node, element => {\r\n        if (isCompositeCstNode(element)) {\r\n            return element.content;\r\n        } else {\r\n            return [];\r\n        }\r\n    }, { includeRoot: true });\r\n}\r\n\r\n/**\r\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\r\n */\r\nexport function flattenCst(node: CstNode): Stream<LeafCstNode> {\r\n    return streamCst(node).filter(isLeafCstNode);\r\n}\r\n\r\n/**\r\n * Determines whether the specified cst node is a child of the specified parent node.\r\n */\r\nexport function isChildNode(child: CstNode, parent: CstNode): boolean {\r\n    while (child.container) {\r\n        child = child.container;\r\n        if (child === parent) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function tokenToRange(token: IToken): Range {\r\n    // Chevrotain uses 1-based indices everywhere\r\n    // So we subtract 1 from every value to align with the LSP\r\n    return {\r\n        start: {\r\n            character: token.startColumn! - 1,\r\n            line: token.startLine! - 1\r\n        },\r\n        end: {\r\n            character: token.endColumn!, // endColumn uses the correct index\r\n            line: token.endLine! - 1\r\n        }\r\n    };\r\n}\r\n\r\nexport function toDocumentSegment(node: CstNode): DocumentSegment;\r\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined;\r\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined {\r\n    if (!node) {\r\n        return undefined;\r\n    }\r\n    const { offset, end, range } = node;\r\n    return {\r\n        range,\r\n        offset,\r\n        end,\r\n        length: end - offset\r\n    };\r\n}\r\n\r\nexport enum RangeComparison {\r\n    Before = 0,\r\n    After = 1,\r\n    OverlapFront = 2,\r\n    OverlapBack = 3,\r\n    Inside = 4,\r\n    Outside = 5,\r\n}\r\n\r\nexport function compareRange(range: Range, to: Range): RangeComparison {\r\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character <= to.start.character)) {\r\n        return RangeComparison.Before;\r\n    } else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character >= to.end.character)) {\r\n        return RangeComparison.After;\r\n    }\r\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\r\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\r\n    if (startInside && endInside) {\r\n        return RangeComparison.Inside;\r\n    } else if (startInside) {\r\n        return RangeComparison.OverlapBack;\r\n    } else if (endInside) {\r\n        return RangeComparison.OverlapFront;\r\n    } else {\r\n        return RangeComparison.Outside;\r\n    }\r\n}\r\n\r\nexport function inRange(range: Range, to: Range): boolean {\r\n    const comparison = compareRange(range, to);\r\n    return comparison > RangeComparison.After;\r\n}\r\n\r\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\r\n// Together with \\w it matches any kind of character which can commonly appear in IDs\r\nexport const DefaultNameRegexp = /^[\\w\\p{L}]$/u;\r\n\r\n/**\r\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\r\n * it will instead return the leaf node at the `offset - 1` position.\r\n *\r\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\r\n */\r\nexport function findDeclarationNodeAtOffset(cstNode: CstNode | undefined, offset: number, nameRegexp = DefaultNameRegexp): LeafCstNode | undefined {\r\n    if (cstNode) {\r\n        if (offset > 0) {\r\n            const localOffset = offset - cstNode.offset;\r\n            const textAtOffset = cstNode.text.charAt(localOffset);\r\n            if (!nameRegexp.test(textAtOffset)) {\r\n                offset--;\r\n            }\r\n        }\r\n        return findLeafNodeAtOffset(cstNode, offset);\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function findCommentNode(cstNode: CstNode | undefined, commentNames: string[]): CstNode | undefined {\r\n    if (cstNode) {\r\n        const previous = getPreviousNode(cstNode, true);\r\n        if (previous && isCommentNode(previous, commentNames)) {\r\n            return previous;\r\n        }\r\n        if (isRootCstNode(cstNode)) {\r\n            // Go from the first non-hidden node through all nodes in reverse order\r\n            // We do this to find the comment node which directly precedes the root node\r\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\r\n            for (let i = endIndex - 1; i >= 0; i--) {\r\n                const child = cstNode.content[i];\r\n                if (isCommentNode(child, commentNames)) {\r\n                    return child;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function isCommentNode(cstNode: CstNode, commentNames: string[]): boolean {\r\n    return isLeafCstNode(cstNode) && commentNames.includes(cstNode.tokenType.name);\r\n}\r\n\r\n/**\r\n * Finds the leaf CST node at the specified 0-based string offset.\r\n * Note that the given offset will be within the range of the returned leaf node.\r\n *\r\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\r\n *\r\n * @param node The CST node to search through.\r\n * @param offset The specified offset.\r\n * @returns The CST node at the specified offset.\r\n */\r\nexport function findLeafNodeAtOffset(node: CstNode, offset: number): LeafCstNode | undefined {\r\n    if (isLeafCstNode(node)) {\r\n        return node;\r\n    } else if (isCompositeCstNode(node)) {\r\n        const searchResult = binarySearch(node, offset, false);\r\n        if (searchResult) {\r\n            return findLeafNodeAtOffset(searchResult, offset);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Finds the leaf CST node at the specified 0-based string offset.\r\n * If no CST node exists at the specified position, it will return the leaf node before it.\r\n *\r\n * If there is no leaf node before the specified offset, this method will return `undefined`.\r\n *\r\n * @param node The CST node to search through.\r\n * @param offset The specified offset.\r\n * @returns The CST node closest to the specified offset.\r\n */\r\nexport function findLeafNodeBeforeOffset(node: CstNode, offset: number): LeafCstNode | undefined {\r\n    if (isLeafCstNode(node)) {\r\n        return node;\r\n    } else if (isCompositeCstNode(node)) {\r\n        const searchResult = binarySearch(node, offset, true);\r\n        if (searchResult) {\r\n            return findLeafNodeBeforeOffset(searchResult, offset);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction binarySearch(node: CompositeCstNode, offset: number, closest: boolean): CstNode | undefined {\r\n    let left = 0;\r\n    let right = node.content.length - 1;\r\n    let closestNode: CstNode | undefined = undefined;\r\n\r\n    while (left <= right) {\r\n        const middle = Math.floor((left + right) / 2);\r\n        const middleNode = node.content[middle];\r\n\r\n        if (middleNode.offset <= offset && middleNode.end > offset) {\r\n            // Found an exact match\r\n            return middleNode;\r\n        }\r\n\r\n        if (middleNode.end <= offset) {\r\n            // Update the closest node (less than offset) and move to the right half\r\n            closestNode = closest ? middleNode : undefined;\r\n            left = middle + 1;\r\n        } else {\r\n            // Move to the left half\r\n            right = middle - 1;\r\n        }\r\n    }\r\n\r\n    return closestNode;\r\n}\r\n\r\nexport function getPreviousNode(node: CstNode, hidden = true): CstNode | undefined {\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        let index = parent.content.indexOf(node);\r\n        while (index > 0) {\r\n            index--;\r\n            const previous = parent.content[index];\r\n            if (hidden || !previous.hidden) {\r\n                return previous;\r\n            }\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getNextNode(node: CstNode, hidden = true): CstNode | undefined {\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        let index = parent.content.indexOf(node);\r\n        const last = parent.content.length - 1;\r\n        while (index < last) {\r\n            index++;\r\n            const next = parent.content[index];\r\n            if (hidden || !next.hidden) {\r\n                return next;\r\n            }\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getStartlineNode(node: CstNode): CstNode {\r\n    if (node.range.start.character === 0) {\r\n        return node;\r\n    }\r\n    const line = node.range.start.line;\r\n    let last = node;\r\n    let index: number | undefined;\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        const selfIndex = index ?? parent.content.indexOf(node);\r\n        if (selfIndex === 0) {\r\n            node = parent;\r\n            index = undefined;\r\n        } else {\r\n            index = selfIndex - 1;\r\n            node = parent.content[index];\r\n        }\r\n        if (node.range.start.line !== line) {\r\n            break;\r\n        }\r\n        last = node;\r\n    }\r\n    return last;\r\n}\r\n\r\nexport function getInteriorNodes(start: CstNode, end: CstNode): CstNode[] {\r\n    const commonParent = getCommonParent(start, end);\r\n    if (!commonParent) {\r\n        return [];\r\n    }\r\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\r\n}\r\n\r\nfunction getCommonParent(a: CstNode, b: CstNode): CommonParent | undefined {\r\n    const aParents = getParentChain(a);\r\n    const bParents = getParentChain(b);\r\n    let current: CommonParent | undefined;\r\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\r\n        const aParent = aParents[i];\r\n        const bParent = bParents[i];\r\n        if (aParent.parent === bParent.parent) {\r\n            current = {\r\n                parent: aParent.parent,\r\n                a: aParent.index,\r\n                b: bParent.index\r\n            };\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    return current;\r\n}\r\n\r\ninterface CommonParent {\r\n    parent: CompositeCstNode\r\n    a: number\r\n    b: number\r\n}\r\n\r\nfunction getParentChain(node: CstNode): ParentLink[] {\r\n    const chain: ParentLink[] = [];\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        const index = parent.content.indexOf(node);\r\n        chain.push({\r\n            parent,\r\n            index\r\n        });\r\n        node = parent;\r\n    }\r\n    return chain.reverse();\r\n}\r\n\r\ninterface ParentLink {\r\n    parent: CompositeCstNode\r\n    index: number\r\n}\r\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nexport default baseHas;\n","import baseHas from './_baseHas.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nexport default has;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\n/**\r\n * A `Module<I>` is a description of possibly grouped service factories.\r\n *\r\n * Given a type I = { group: { service: A } },\r\n * Module<I> := { group: { service: (injector: I) => A } }\r\n *\r\n * Making `I` available during the creation of `I` allows us to create cyclic\r\n * dependencies.\r\n */\r\nexport type Module<I, T = I> = {\r\n    [K in keyof T]: Module<I, T[K]> | ((injector: I) => T[K])\r\n}\r\n\r\nexport namespace Module {\r\n    export const merge = <M1, M2, R extends M1 & M2>(m1: Module<R, M1>, m2: Module<R, M2>) => (_merge(_merge({}, m1), m2) as Module<R, M1 & M2>);\r\n}\r\n\r\n/**\r\n * Given a set of modules, the inject function returns a lazily evaluated injector\r\n * that injects dependencies into the requested service when it is requested the\r\n * first time. Subsequent requests will return the same service.\r\n *\r\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\r\n * by injecting a provider `() => T` instead of a `T`.\r\n *\r\n * Please note that the arguments may be objects or arrays. However, the result will\r\n * be an object. Using it with for..of will have no effect.\r\n *\r\n * @param module1 first Module\r\n * @param module2 (optional) second Module\r\n * @param module3 (optional) third Module\r\n * @param module4 (optional) fourth Module\r\n * @param module5 (optional) fifth Module\r\n * @param module6 (optional) sixth Module\r\n * @param module7 (optional) seventh Module\r\n * @param module8 (optional) eighth Module\r\n * @param module9 (optional) ninth Module\r\n * @returns a new object of type I\r\n */\r\nexport function inject<I1, I2, I3, I4, I5, I6, I7, I8, I9, I extends I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9>(\r\n    module1: Module<I, I1>, module2?: Module<I, I2>, module3?: Module<I, I3>, module4?: Module<I, I4>, module5?: Module<I, I5>, module6?: Module<I, I6>, module7?: Module<I, I7>, module8?: Module<I, I8>, module9?: Module<I, I9>\r\n): I {\r\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {}) as Module<I>;\r\n    return _inject(module);\r\n}\r\n\r\nconst isProxy = Symbol('isProxy');\r\n\r\n/**\r\n * Eagerly load all services in the given dependency injection container. This is sometimes\r\n * necessary because services can register event listeners in their constructors.\r\n */\r\nexport function eagerLoad<T>(item: T): T {\r\n    if (item && (item as any)[isProxy]) {\r\n        for (const value of Object.values(item)) {\r\n            eagerLoad(value);\r\n        }\r\n    }\r\n    return item;\r\n}\r\n\r\n/**\r\n * Helper function that returns an injector by creating a proxy.\r\n * Invariant: injector is of type I. If injector is undefined, then T = I.\r\n */\r\nfunction _inject<I, T>(module: Module<I, T>, injector?: any): T {\r\n    const proxy: any = new Proxy({} as any, {\r\n        deleteProperty: () => false,\r\n        set: () => {\r\n            throw new Error('Cannot set property on injected service container');\r\n        },\r\n        get: (obj, prop) => {\r\n            if (prop === isProxy) {\r\n                return true;\r\n            } else {\r\n                return _resolve(obj, prop, module, injector || proxy);\r\n            }\r\n        },\r\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)), // used by for..in\r\n        has: (_, prop) => prop in module, // used by ..in..\r\n        ownKeys: () => [...Object.getOwnPropertyNames(module)] // used by for..in\r\n    });\r\n    return proxy;\r\n}\r\n\r\n/**\r\n * Internally used to tag a requested dependency, directly before calling the factory.\r\n * This allows us to find cycles during instance creation.\r\n */\r\nconst __requested__ = Symbol();\r\n\r\n/**\r\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\r\n * the module description. The result of service factories is cached. Groups are\r\n * recursively proxied.\r\n *\r\n * @param obj an object holding all group proxies and services\r\n * @param prop the key of a value within obj\r\n * @param module an object containing groups and service factories\r\n * @param injector the first level proxy that provides access to all values\r\n * @returns the requested value `obj[prop]`\r\n * @throws Error if a dependency cycle is detected\r\n */\r\nfunction _resolve<I, T>(obj: any, prop: string | symbol | number, module: Module<I, T>, injector: I): T[keyof T] | undefined {\r\n    if (prop in obj) {\r\n        if (obj[prop] instanceof Error) {\r\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', {cause: obj[prop]});\r\n        }\r\n        if (obj[prop] === __requested__) {\r\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. Visit https://langium.org/docs/reference/configuration-services/#resolving-cyclic-dependencies');\r\n        }\r\n        return obj[prop];\r\n    } else if (prop in module) {\r\n        const value: Module<I, T[keyof T]> | ((injector: I) => T[keyof T]) = module[prop as keyof T];\r\n        obj[prop] = __requested__;\r\n        try {\r\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\r\n        } catch (error) {\r\n            obj[prop] = error instanceof Error ? error : undefined;\r\n            throw error;\r\n        }\r\n        return obj[prop];\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * Performs a deep-merge of two modules by writing source entries into the target module.\r\n *\r\n * @param target the module which is written\r\n * @param source the module which is read\r\n * @returns the target module\r\n */\r\nfunction _merge(target: Module<any>, source?: Module<any>): Module<unknown> {\r\n    if (source) {\r\n        for (const [key, value2] of Object.entries(source)) {\r\n            if (value2 !== undefined) {\r\n                const value1 = target[key];\r\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\r\n                    target[key] = _merge(value1, value2);\r\n                } else {\r\n                    target[key] = value2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AbstractElement, AbstractRule } from '../languages/generated/ast.js';\r\nimport type { CstNode } from '../syntax-tree.js';\r\nimport { isCrossReference, isRuleCall } from '../languages/generated/ast.js';\r\nimport { getCrossReferenceTerminal, getRuleType } from '../utils/grammar-utils.js';\r\n\r\n/**\r\n * Language-specific service for converting string values from the source text format into a value to be held in the AST.\r\n */\r\nexport interface ValueConverter {\r\n    /**\r\n     * Converts a string value from the source text format into a value to be held in the AST.\r\n     */\r\n    convert(input: string, cstNode: CstNode): ValueType;\r\n}\r\n\r\nexport type ValueType = string | number | boolean | bigint | Date;\r\n\r\nexport class DefaultValueConverter implements ValueConverter {\r\n\r\n    convert(input: string, cstNode: CstNode): ValueType {\r\n        let feature: AbstractElement | undefined = cstNode.grammarSource;\r\n        if (isCrossReference(feature)) {\r\n            feature = getCrossReferenceTerminal(feature);\r\n        }\r\n        if (isRuleCall(feature)) {\r\n            const rule = feature.rule.ref;\r\n            if (!rule) {\r\n                throw new Error('This cst node was not parsed by a rule.');\r\n            }\r\n            return this.runConverter(rule, input, cstNode);\r\n        }\r\n        return input;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected runConverter(rule: AbstractRule, input: string, cstNode: CstNode): ValueType {\r\n        switch (rule.name.toUpperCase()) {\r\n            case 'INT': return ValueConverter.convertInt(input);\r\n            case 'STRING': return ValueConverter.convertString(input);\r\n            case 'ID': return ValueConverter.convertID(input);\r\n        }\r\n        switch (getRuleType(rule)?.toLowerCase()) {\r\n            case 'number': return ValueConverter.convertNumber(input);\r\n            case 'boolean': return ValueConverter.convertBoolean(input);\r\n            case 'bigint': return ValueConverter.convertBigint(input);\r\n            case 'date': return ValueConverter.convertDate(input);\r\n            default: return input;\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace ValueConverter {\r\n\r\n    export function convertString(input: string): string {\r\n        let result = '';\r\n        for (let i = 1; i < input.length - 1; i++) {\r\n            const c = input.charAt(i);\r\n            if (c === '\\\\') {\r\n                const c1 = input.charAt(++i);\r\n                result += convertEscapeCharacter(c1);\r\n            } else {\r\n                result += c;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function convertEscapeCharacter(char: string): string {\r\n        switch (char) {\r\n            case 'b': return '\\b';\r\n            case 'f': return '\\f';\r\n            case 'n': return '\\n';\r\n            case 'r': return '\\r';\r\n            case 't': return '\\t';\r\n            case 'v': return '\\v';\r\n            case '0': return '\\0';\r\n            default: return char;\r\n        }\r\n    }\r\n\r\n    export function convertID(input: string): string {\r\n        if (input.charAt(0) === '^') {\r\n            return input.substring(1);\r\n        } else {\r\n            return input;\r\n        }\r\n    }\r\n\r\n    export function convertInt(input: string): number {\r\n        return parseInt(input);\r\n    }\r\n\r\n    export function convertBigint(input: string): bigint {\r\n        return BigInt(input);\r\n    }\r\n\r\n    export function convertDate(input: string): Date {\r\n        return new Date(input);\r\n    }\r\n\r\n    export function convertNumber(input: string): number {\r\n        return Number(input);\r\n    }\r\n\r\n    export function convertBoolean(input: string): boolean {\r\n        return input.toLowerCase() === 'true';\r\n    }\r\n\r\n}\r\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  PieGeneratedModule,\n  __name\n} from \"./chunk-4KMFLZZN.mjs\";\n\n// src/language/pie/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/pie/tokenBuilder.ts\nvar PieTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PieTokenBuilder\");\n  }\n  constructor() {\n    super([\"pie\", \"showData\"]);\n  }\n};\n\n// src/language/pie/valueConverter.ts\nvar PieValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"PieValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name !== \"PIE_SECTION_LABEL\") {\n      return void 0;\n    }\n    return input.replace(/\"/g, \"\").trim();\n  }\n};\n\n// src/language/pie/module.ts\nvar PieModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PieTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new PieValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPieServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Pie = inject(\n    createDefaultCoreModule({ shared }),\n    PieGeneratedModule,\n    PieModule\n  );\n  shared.ServiceRegistry.register(Pie);\n  return { shared, Pie };\n}\n__name(createPieServices, \"createPieServices\");\n\nexport {\n  PieModule,\n  createPieServices\n};\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationTokenSource = exports.CancellationToken = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nvar CancellationToken;\n(function (CancellationToken) {\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: events_1.Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: events_1.Event.None\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate === CancellationToken.None\n            || candidate === CancellationToken.Cancelled\n            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));\n    }\n    CancellationToken.is = is;\n})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);\n    return { dispose() { handle.dispose(); } };\n});\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new events_1.Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = undefined;\n        }\n    }\n}\nclass CancellationTokenSource {\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else {\n            this._token.cancel();\n        }\n    }\n    dispose() {\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\nexports.CancellationTokenSource = CancellationTokenSource;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CustomPatternMatcherFunc, ILexingError, TokenPattern, TokenType, TokenVocabulary } from 'chevrotain';\r\nimport type { AbstractRule, Grammar, Keyword, TerminalRule } from '../languages/generated/ast.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { Lexer } from 'chevrotain';\r\nimport { isKeyword, isParserRule, isTerminalRule } from '../languages/generated/ast.js';\r\nimport { streamAllContents } from '../utils/ast-utils.js';\r\nimport { getAllReachableRules, terminalRegex } from '../utils/grammar-utils.js';\r\nimport { getCaseInsensitivePattern, isWhitespace, partialMatches } from '../utils/regexp-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\n\r\nexport interface TokenBuilderOptions {\r\n    caseInsensitive?: boolean\r\n}\r\n\r\nexport interface TokenBuilder {\r\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary;\r\n    /**\r\n     * Produces a lexing report for the given text that was just tokenized using the tokens provided by this builder.\r\n     *\r\n     * @param text The text that was tokenized.\r\n     */\r\n    flushLexingReport?(text: string): LexingReport;\r\n}\r\n\r\n/**\r\n * A custom lexing report that can be produced by the token builder during the lexing process.\r\n * Adopters need to ensure that the any custom fields are serializable so they can be sent across worker threads.\r\n */\r\nexport interface LexingReport {\r\n    diagnostics: LexingDiagnostic[];\r\n}\r\n\r\nexport type LexingDiagnosticSeverity = 'error' | 'warning' | 'info' | 'hint';\r\n\r\nexport interface LexingDiagnostic extends ILexingError {\r\n    severity?: LexingDiagnosticSeverity;\r\n}\r\n\r\nexport class DefaultTokenBuilder implements TokenBuilder {\r\n    /**\r\n     * The list of diagnostics stored during the lexing process of a single text.\r\n     */\r\n    protected diagnostics: LexingDiagnostic[] = [];\r\n\r\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary {\r\n        const reachableRules = stream(getAllReachableRules(grammar, false));\r\n        const terminalTokens: TokenType[] = this.buildTerminalTokens(reachableRules);\r\n        const tokens: TokenType[] = this.buildKeywordTokens(reachableRules, terminalTokens, options);\r\n\r\n        terminalTokens.forEach(terminalToken => {\r\n            const pattern = terminalToken.PATTERN;\r\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && isWhitespace(pattern)) {\r\n                tokens.unshift(terminalToken);\r\n            } else {\r\n                tokens.push(terminalToken);\r\n            }\r\n        });\r\n        // We don't need to add the EOF token explicitly.\r\n        // It is automatically available at the end of the token stream.\r\n        return tokens;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    flushLexingReport(text: string): LexingReport {\r\n        return { diagnostics: this.popDiagnostics() };\r\n    }\r\n\r\n    protected popDiagnostics(): LexingDiagnostic[] {\r\n        const diagnostics = [...this.diagnostics];\r\n        this.diagnostics = [];\r\n        return diagnostics;\r\n    }\r\n\r\n    protected buildTerminalTokens(rules: Stream<AbstractRule>): TokenType[] {\r\n        return rules.filter(isTerminalRule).filter(e => !e.fragment)\r\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\r\n    }\r\n\r\n    protected buildTerminalToken(terminal: TerminalRule): TokenType {\r\n        const regex = terminalRegex(terminal);\r\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\r\n        const tokenType: TokenType = {\r\n            name: terminal.name,\r\n            PATTERN: pattern,\r\n        };\r\n        if (typeof pattern === 'function') {\r\n            tokenType.LINE_BREAKS = true;\r\n        }\r\n        if (terminal.hidden) {\r\n            // Only skip tokens that are able to accept whitespace\r\n            tokenType.GROUP = isWhitespace(regex) ? Lexer.SKIPPED : 'hidden';\r\n        }\r\n        return tokenType;\r\n    }\r\n\r\n    protected requiresCustomPattern(regex: RegExp): boolean {\r\n        if (regex.flags.includes('u') || regex.flags.includes('s')) {\r\n            // Unicode and dotall regexes are not supported by Chevrotain.\r\n            return true;\r\n        } else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\r\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    protected regexPatternFunction(regex: RegExp): CustomPatternMatcherFunc {\r\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\r\n        return (text, offset) => {\r\n            stickyRegex.lastIndex = offset;\r\n            const execResult = stickyRegex.exec(text);\r\n            return execResult;\r\n        };\r\n    }\r\n\r\n    protected buildKeywordTokens(rules: Stream<AbstractRule>, terminalTokens: TokenType[], options?: TokenBuilderOptions): TokenType[] {\r\n        return rules\r\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\r\n            .filter(isParserRule)\r\n            .flatMap(rule => streamAllContents(rule).filter(isKeyword))\r\n            .distinct(e => e.value).toArray()\r\n            // Sort keywords by descending length\r\n            .sort((a, b) => b.value.length - a.value.length)\r\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options?.caseInsensitive)));\r\n    }\r\n\r\n    protected buildKeywordToken(keyword: Keyword, terminalTokens: TokenType[], caseInsensitive: boolean): TokenType {\r\n        const keywordPattern = this.buildKeywordPattern(keyword, caseInsensitive);\r\n        const tokenType: TokenType = {\r\n            name: keyword.value,\r\n            PATTERN: keywordPattern,\r\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\r\n        };\r\n\r\n        if (typeof keywordPattern === 'function') {\r\n            tokenType.LINE_BREAKS = true;\r\n        }\r\n\r\n        return tokenType;\r\n    }\r\n\r\n    protected buildKeywordPattern(keyword: Keyword, caseInsensitive: boolean): TokenPattern {\r\n        return caseInsensitive ?\r\n            new RegExp(getCaseInsensitivePattern(keyword.value)) :\r\n            keyword.value;\r\n    }\r\n\r\n    protected findLongerAlt(keyword: Keyword, terminalTokens: TokenType[]): TokenType[] {\r\n        return terminalTokens.reduce((longerAlts: TokenType[], token) => {\r\n            const pattern = token?.PATTERN as RegExp;\r\n            if (pattern?.source && partialMatches('^' + pattern.source + '$', keyword.value)) {\r\n                longerAlts.push(token);\r\n            }\r\n            return longerAlts;\r\n        }, []);\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { URI } from '../utils/uri-utils.js';\r\n\r\nexport interface FileSystemNode {\r\n    readonly isFile: boolean;\r\n    readonly isDirectory: boolean;\r\n    readonly uri: URI;\r\n}\r\n\r\nexport type FileSystemFilter = (node: FileSystemNode) => boolean;\r\n\r\n/**\r\n * Provides methods to interact with an abstract file system. The default implementation is based on the node.js `fs` API.\r\n */\r\nexport interface FileSystemProvider {\r\n    /**\r\n     * Reads a document asynchronously from a given URI.\r\n     * @returns The string content of the file with the specified URI.\r\n     */\r\n    readFile(uri: URI): Promise<string>;\r\n    /**\r\n     * Reads the directory information for the given URI.\r\n     * @returns The list of file system entries that are contained within the specified directory.\r\n     */\r\n    readDirectory(uri: URI): Promise<FileSystemNode[]>;\r\n}\r\n\r\nexport class EmptyFileSystemProvider implements FileSystemProvider {\r\n\r\n    readFile(): Promise<string> {\r\n        throw new Error('No file system is available.');\r\n    }\r\n\r\n    async readDirectory(): Promise<FileSystemNode[]> {\r\n        return [];\r\n    }\r\n\r\n}\r\n\r\nexport const EmptyFileSystem = {\r\n    fileSystemProvider: () => new EmptyFileSystemProvider()\r\n};\r\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  PacketGeneratedModule,\n  __name\n} from \"./chunk-4KMFLZZN.mjs\";\n\n// src/language/packet/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/packet/tokenBuilder.ts\nvar PacketTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PacketTokenBuilder\");\n  }\n  constructor() {\n    super([\"packet\"]);\n  }\n};\n\n// src/language/packet/module.ts\nvar PacketModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PacketTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPacketServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Packet = inject(\n    createDefaultCoreModule({ shared }),\n    PacketGeneratedModule,\n    PacketModule\n  );\n  shared.ServiceRegistry.register(Packet);\n  return { shared, Packet };\n}\n__name(createPacketServices, \"createPacketServices\");\n\nexport {\n  PacketModule,\n  createPacketServices\n};\n"],"names":["array","length","baseExtremum","identity","baseLt","undefined","_ral","RAL","Error","Object","defineProperty","exports","value","install","ral","ArchitectureTokenBuilder","AbstractMermaidTokenBuilder","__name","this","constructor","super","ArchitectureValueConverter","AbstractMermaidValueConverter","runCustomConverter","rule","input","_cstNode","name","replace","trim","ArchitectureModule","parser","TokenBuilder","ValueConverter","createArchitectureServices","context","arguments","EmptyFileSystem","shared","inject","createDefaultSharedCoreModule","MermaidGeneratedSharedModule","Architecture","createDefaultCoreModule","ArchitectureGeneratedModule","ServiceRegistry","register","cc","char","charCodeAt","insertToSet","item","set","Array","isArray","forEach","subItem","push","addFlag","flagObj","flagKey","ASSERT_EXISTS","obj","ASSERT_NEVER_REACH_HERE","isCharacter","digitsCharCodes","i","wordCharCodes","concat","whitespaceCodes","hexDigitPattern","decimalPattern","decimalPatternNoZero","RegExpParser","idx","groupIdx","saveState","restoreState","newState","pattern","consumeChar","disjunction","flags","type","loc","begin","end","global","ignoreCase","multiLine","unicode","sticky","isRegExpFlag","popChar","substring","alts","alternative","peekChar","terms","isTerm","term","isAssertion","assertion","atom","quantifier","range","isBacktracking","atLeast","atMost","Infinity","integerIncludingZero","isDigit","greedy","dotAll","atomEscape","characterClass","group","isPatternCharacter","patternCharacter","isQuantifier","complement","decimalEscapeAtom","characterClassEscape","controlEscapeAtom","controlLetterEscapeAtom","nulCharacterAtom","hexEscapeSequenceAtom","regExpUnicodeEscapeSequenceAtom","identityEscapeAtom","positiveInteger","escapeCode","letter","test","toUpperCase","parseHexDigits","classPatternCharacterAtom","isClassAtom","from","classAtom","isRangeDash","to","classEscape","capturing","groupAst","number","parseInt","nextChar","howMuch","isAtom","prevState","e","howMany","hexString","hexChar","BaseRegExpVisitor","visitChildren","node","key","child","hasOwnProperty","visit","subChild","visitPattern","visitFlags","visitDisjunction","visitAlternative","visitStartAnchor","visitEndAnchor","visitWordBoundary","visitNonWordBoundary","visitLookahead","visitNegativeLookahead","visitCharacter","visitSet","visitGroup","visitGroupBackReference","visitQuantifier","other","InfoTokenBuilder","InfoModule","CommonValueConverter","createInfoServices","Info","InfoGeneratedModule","buildATNKey","occurrence","AbstractTransition","target","isEpsilon","AtomTransition","tokenType","EpsilonTransition","RuleTransition","ruleStart","followState","createATN","rules","atn","decisionMap","decisionStates","ruleToStartState","Map","ruleToStopState","states","ruleLength","start","stop","createRuleStartAndStopATNStates","ruleBlock","block","buildRuleHandle","production","Terminal","tokenRef","terminalType","NonTerminal","currentRule","nonTerminal","referencedRule","get","left","right","call","addTransition","ruleRef","Alternation","alternation","defineDecisionState","map","definition","handle","makeAlts","Option","option","optional","epsilon","Repetition","repetition","starState","star","RepetitionWithSeparator","sep","separator","repetitionSep","RepetitionMandatory","plusState","plus","repetitionMandatory","RepetitionMandatoryWithSeparator","repetitionMandatorySep","handles","filter","altsLength","transition","transitions","isRuleTransition","ruleTransition","next","removeState","first","last","makeBlock","blkStart","blkEnd","loop","loopback","entry","loopEnd","state","decision","_len","_key","alt","getProdType","a","b","partial","t","assign","epsilonOnlyTransitions","nextTokenWithinRule","stateNumber","splice","indexOf","DFA_ERROR","ATNConfigSet","configs","size","finalize","add","config","getATNConfigKey","elements","k","stack","toString","join","iteratee","baseUniq","baseIteratee","createDFACache","startState","predicateSet","existing","atnStartState","PredicateSet","predicates","is","index","EMPTY_PREDICATES","LLStarLookaheadStrategy","LLkLookaheadStrategy","options","logging","_a","message","console","log","initialize","dfas","decisionLength","decisionToDFA","initATNSimulator","validateAmbiguousAlternationAlternatives","validateEmptyOrAlternatives","buildLookaheadForAlternation","prodOccurrence","hasPredicates","dynamicTokensEnabled","decisionIndex","partialAlts","getLookaheadPaths","maxLookahead","prodType","currAlt","path","isLL1Sequence","choiceToAlt","reduce","result","currTokType","tokenTypeIdx","categoryMatches","currExtendingType","orAlts","nextToken","LA","prediction","gate","GATE","adaptivePredict","buildLookaheadForOptional","g","singleTokensTypes","flatten","isEmpty","expectedTokenUniqueKey","sequences","allowEmpty","fullSet","Set","altSet","tokType","indices","has","dfaCaches","dfa","addDFAState","newDFAState","computeStartState","performLookahead","apply","s0","previousD","d","getExistingTargetState","computeLookaheadTarget","buildAdaptivePredictError","isAcceptState","token","lookahead","reach","intermediate","skippedStopStates","c","transitionLength","getReachableTarget","closure","hasConfigInRuleStopState","computeReachSet","addDFAEdge","predictedAlt","getUniqueAlt","uniqueAlt","allConfigsInRuleStopStates","altSets","configToAlts","getConflictingAltSets","values","keys","hasConflictingAltSet","hasStateAssociatedWithOneAlt","hasConflictTerminatingPrediction","min","reportLookaheadAmbiguity","ambiguityIndices","prefixPath","atnState","pathMsg","currtok","tokenLabel","currMessage","prod","getProductionDslName","topLevelRule","buildAmbiguityError","previous","current","nextTransitions","flatMap","actualToken","possibleTokenTypes","uniqBy","tokenPath","edges","tokenMatcher","mapKey","numberOfTransitions","p","atnStack","pop","getEpsilonTarget","DocumentUri","URI","integer","uinteger","Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","DiagnosticTag","CodeDescription","Diagnostic","Command","TextEdit","ChangeAnnotation","ChangeAnnotationIdentifier","AnnotatedTextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","TextDocumentIdentifier","VersionedTextDocumentIdentifier","OptionalVersionedTextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItemKind","InsertTextFormat","CompletionItemTag","InsertReplaceEdit","InsertTextMode","CompletionItemLabelDetails","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolTag","SymbolInformation","WorkspaceSymbol","DocumentSymbol","CodeActionKind","CodeActionTriggerKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentLink","SelectionRange","SemanticTokenTypes","SemanticTokenModifiers","SemanticTokens","InlineValueText","InlineValueVariableLookup","InlineValueEvaluatableExpression","InlineValueContext","InlayHintKind","InlayHintLabelPart","InlayHint","StringValue","InlineCompletionItem","InlineCompletionList","InlineCompletionTriggerKind","SelectedCompletionInfo","InlineCompletionContext","WorkspaceFolder","MIN_VALUE","MAX_VALUE","create","line","character","Number","candidate","Is","objectLiteral","one","two","three","four","uri","string","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","numberRange","color","label","textEdit","additionalTextEdits","typedArray","Comment","Imports","Region","startLine","endLine","startCharacter","endCharacter","kind","collapsedText","defined","location","Warning","Information","Hint","Unnecessary","Deprecated","href","severity","code","source","relatedInformation","codeDescription","title","command","args","newText","insert","position","del","needsConfirmation","description","boolean","annotation","annotationId","textDocument","edits","overwrite","ignoreIfExists","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","every","change","version","languageId","text","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","asIs","adjustIndentation","detail","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","_len2","parameters","_key2","Read","Write","Namespace","Package","String","Boolean","Key","Null","containerName","selectionRange","children","deprecated","tags","Empty","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","SourceFixAll","Invoked","Automatic","diagnostics","only","triggerKind","kindOrCommandOrEdit","checkKind","edit","isPreferred","data","tabSize","insertSpaces","parent","resultId","variableName","caseSensitiveLookup","expression","frameId","stoppedLocation","Type","Parameter","tooltip","textEdits","paddingLeft","paddingRight","createSnippet","insertText","filterText","selectedCompletionInfo","TextDocument","mergeSort","compare","slice","leftIdx","rightIdx","ret","content","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","diff","lastModifiedOffset","startOffset","endOffset","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","Math","max","low","high","mid","floor","lineOffset","nextLineOffset","prototype","check","CstNodeBuilder","nodeStack","rootNode","buildRootNode","RootCstNodeImpl","root","buildCompositeNode","feature","compositeNode","CompositeCstNodeImpl","grammarSource","buildLeafNode","leafNode","LeafCstNodeImpl","image","tokenToRange","removeNode","container","addHiddenNodes","tokens","nodes","added","unshift","construct","$type","astNode","$cstNode","AbstractCstNode","hidden","_astNode","_b","element","fullText","_offset","_length","_hidden","_tokenType","_range","CstNodeContainer","firstNonHiddenNode","lastNonHiddenNode","firstNode","lastNode","_rangeCache","firstRange","lastRange","setPrototypeOf","addParents","count","_len3","_key3","_text","DatatypeSymbol","Symbol","isDataTypeNode","withRuleSuffix","endsWith","AbstractLangiumParser","services","_unorderedGroups","allRules","lexer","Lexer","LanguageMetaData","mode","wrapper","ChevrotainWrapper","ParserConfig","skipValidations","errorMessageProvider","ParserErrorMessageProvider","alternatives","choices","wrapOr","callback","wrapOption","many","wrapMany","atLeastOne","wrapAtLeastOne","getRule","isRecording","IS_RECORDING","unorderedGroups","getRuleStack","RULE_STACK","wrapSelfAnalysis","LangiumParser","nodeBuilder","assignmentMap","linker","references","Linker","converter","astReflection","AstReflection","impl","computeRuleType","ruleMethod","DEFINE_RULE","startImplementation","bind","mainRule","fragment","isDataTypeRule","explicit","getExplicitRuleType","parse","lexerResult","tokenize","clear","lexerErrors","errors","lexerReport","report","parserErrors","implementation","createNode","err","extractHiddenTokens","hiddenTokens","consume","wrapConsume","isValidToken","assignment","isCrossRef","getAssignment","convertedValue","isKeyword","convert","operator","isInsertedInRecovery","isNaN","subrule","cstNode","subruleResult","wrapSubrule","performSubruleAssignment","newItem","assignWithoutOverride","action","linkContentToContainer","assignMandatoryProperties","getContainerOfType","isAssignment","isCrossReference","terminal","buildReference","existingValue","entries","newValue","targetCstNode","definitionErrors","AbstractParserErrorMessageProvider","buildMismatchTokenMessage","defaultParserErrorProvider","buildNotAllInputParsedMessage","buildNoViableAltMessage","buildEarlyExitMessage","LangiumParserErrorMessageProvider","_ref","expected","actual","LABEL","_ref2","firstRedundant","LangiumCompletionParser","elementStack","lastElementStack","nextTokenIndex","stackSize","resetState","tokenIndex","keepStackSize","resetStackSize","removeUnexpectedElements","currIdx","before","after","lastIndexOf","defaultConfig","recoveryEnabled","nodeLocationTracking","EmbeddedActionsParser","useDefaultLookahead","lookaheadStrategy","RECORDING_PHASE","RULE","performSelfAnalysis","ARGS","or","createParser","grammar","parserContext","reachable","getAllReachableRules","parserRules","stream","isParserRule","ctx","buildElement","buildRules","ruleNames","method","ignoreGuard","keyword","buildKeyword","isAction","actionType","getTypeName","buildAction","buildCrossReference","isRuleCall","ruleCall","ref","predicate","namedArgs","buildPredicate","ruleArgs","ruleTarget","buildRuleCallPredicate","isTerminalRule","getToken","ErrorWithLocation","$refText","assertUnreachable","buildRuleCall","isAlternatives","methods","predicatedMethod","ALT","guard","getGuardCondition","buildAlternatives","isUnorderedGroup","orIdx","idFunc","lParser","groupState","trackedAlternatives","wrapped","wrap","delete","buildUnorderedGroup","isGroup","buildGroup","isEndOfFile","EOF","cardinality","condition","isDisjunction","isConjunction","isNegation","isParameterReference","parameter","isBooleanLiteral","true","guardCondition","crossRef","terminalRule","findNameAssignment","assignTerminal","EMPTY_ALT","DEF","$container","ruleName","getRuleName","createLangiumParser","Grammar","prepareLangiumParser","lastTick","globalInterruptionPeriod","OperationCancelled","isOperationCancelled","async","interruptAndCheck","CancellationToken","None","performance","now","Promise","resolve","setImmediate","setTimeout","isCancellationRequested","Deferred","promise","reject","arg","isIncremental","getWellformedRange","addedLineOffsets","computeLineOffsets","len","isFull","ensureBeforeEOL","isEOL","rangeLength","isAtLineStart","textOffset","getWellformedEdit","spans","substr","DocumentState","DefaultLangiumDocumentFactory","serviceRegistry","textDocuments","workspace","TextDocuments","fileSystemProvider","FileSystemProvider","fromUri","cancellationToken","readFile","createAsync","fromTextDocument","fromString","fromModel","model","$model","parseResult","createLangiumDocument","cancelToken","parseAsync","Parsed","textDocumentGetter","createTextDocumentGetter","$document","oldText","getServices","AsyncParser","textDoc","DefaultLangiumDocuments","documentMap","langiumDocumentFactory","LangiumDocumentFactory","all","addDocument","uriString","getDocument","getOrCreateDocument","createDocument","then","hasDocument","invalidateDocument","langiumDoc","unlink","Changed","precomputedScopes","deleteDocument","ref_resolving","DefaultLinker","reflection","langiumDocuments","LangiumDocuments","scopeProvider","ScopeProvider","astNodeLocator","AstNodeLocator","link","streamAst","streamReferences","doLink","refInfo","reference","getCandidate","isLinkingError","_nodeDescription","documentUri","linkedNode","loadAstNode","createLinkingError","error","errorMessage","getScope","getElement","property","refNode","refText","$refNode","isAstNode","isAstNodeDescription","findRootNode","refData","getLinkedNode","ComputedScopes","descr","getAstNodePath","$nodeDescription","nodeDescription","doc","getAstNode","targetDescription","warn","referenceType","getReferenceType","DefaultNameProvider","getName","isNamed","getNameNode","findNodeForProperty","UriUtils","basename","Utils","dirname","extname","joinPath","resolvePath","equals","relative","fromPath","toPath","fromParts","split","toParts","repeat","normalize","DefaultReferences","nameProvider","NameProvider","IndexManager","nodeLocator","findDeclaration","sourceCstNode","findAssignment","nodeElem","isReference","nameNode","isChildNode","findDeclarationNode","targetNode","findReferences","refs","includeDeclaration","getReferenceToSelf","indexReferences","findAllReferences","sourceUri","sourcePath","targetPath","segment","toDocumentSegment","local","MultiMap","Reduction","sum","addAll","callbackfn","iterator","flat","entriesGroupedByKey","BiMap","inverse","getKey","DefaultScopeComputation","descriptions","AstNodeDescriptionProvider","computeExports","computeExportsForNode","parentNode","streamContents","exportNode","createDescription","computeLocalScopes","scopes","streamAllContents","processNode","StreamScope","outerScope","caseInsensitive","getAllElements","find","toLowerCase","MapScope","localName","elementStream","DisposableCache","toDispose","isDisposed","onDispose","disposable","dispose","throwIfDisposed","SimpleCache","cache","provider","ContextCache","contextKey","cacheForContext","contextCache","documentCache","WorkspaceCache","sharedServices","DocumentBuilder","onBuildPhase","onUpdate","_changed","deleted","DefaultScopeProvider","indexManager","globalScopeCache","precomputed","currentNode","allDescriptions","desc","isSubtype","getGlobalScope","createScope","createScopeForNodes","s","nonNullable","_context","allElements","isIntermediateReference","DefaultJsonSerializer","ignoreProperties","commentProvider","CommentProvider","serialize","serializeOptions","specificReplacer","replacer","defaultReplacer","currentDocument","JSON","stringify","space","deserialize","deserializeOptions","linkNode","sourceText","textRegions","comments","uriConverter","refValue","targetDocument","$ref","$error","addAstNodeRegionWithAssignmentsTo","$textRegion","documentURI","_c","$sourceText","_d","comment","getComment","$comment","createDocumentSegment","assignments","startsWith","propertyAssignments","findNodesForProperty","containerProperty","containerIndex","propertyName","reviveReference","mutable","$containerProperty","$containerIndex","getRefNode","fragmentIndex","DefaultServiceRegistry","fileExtensionMap","languageIdMap","ext","fileExtensions","singleton","hasServices","diagnosticData","ValidationCategory","DocumentValidator","ValidationRegistry","entriesBefore","entriesAfter","checksRecord","thisObj","category","callbacks","wrapValidationException","addEntry","accept","handleException","functionality","messageContext","subtype","getAllSubTypes","getChecks","categories","checks","includes","registerBeforeDocument","checkBefore","wrapPreparationException","registerAfterDocument","checkAfter","checksBefore","checksAfter","DefaultDocumentValidator","validationRegistry","validation","metadata","validateDocument","processLexingErrors","stopAfterLexingErrors","some","LexingError","processParsingErrors","stopAfterParsingErrors","ParsingError","processLinkingErrors","stopAfterLinkingErrors","LinkingError","validateAst","_options","lexerDiagnostics","lexerDiagnostic","diagnostic","toDiagnosticSeverity","column","toDiagnosticData","getSource","parserError","previousToken","endColumn","linkingError","info","containerType","toDiagnostic","validationItems","acceptor","validateAstBefore","validateAstNodes","validateAstAfter","getDiagnosticRange","findNodeForKeyword","LexingWarning","LexingInfo","LexingHint","DefaultAstNodeDescriptionProvider","nameNodeSegment","nameSegmentGetter","nameSegment","selectionSegment","DefaultReferenceDescriptionProvider","createDescriptions","targetNodeDescr","refCstNode","docUri","DefaultAstNodeLocator","segmentSeparator","indexSeparator","containerPath","newSegment","getPathSegment","previousValue","currentValue","propertyIndex","arrayIndex","Disposable","DefaultConfigurationProvider","_ready","settings","workspaceConfig","onConfigurationSectionUpdateEmitter","Emitter","ready","params","capabilities","configuration","initialized","languages","section","lang","toSectionName","fetchConfiguration","configToUpdate","conf","updateSectionConfiguration","updateConfiguration","fire","getConfiguration","sectionName","onConfigurationSectionUpdate","DefaultDocumentBuilder","updateBuildOptions","updateListeners","buildPhaseListeners","documentPhaseListeners","buildState","documentBuildWaiters","currentState","build","documents","Validated","IndexedReferences","previousCategories","validationChecks","completed","emitUpdate","buildDocuments","changed","deletedUri","remove","changedUri","newDocument","allChangedUris","toSet","shouldRelink","rebuildDocuments","sortDocuments","Linked","toArray","listener","hasTextDocument","changedUris","isAffected","prepareBuild","runCancelable","IndexedContent","updateContent","scopeComputation","ScopeComputation","updateReferences","toBeValidated","shouldValidate","validate","targetState","filtered","notifyDocumentPhase","targetStateDocs","notifyBuildPhase","onDocumentPhase","waitUntil","uriOrToken","buildDisposable","cancelDisposable","onCancellationRequested","listenersCopy","getBuildOptions","validator","validationSetting","newCategories","DefaultIndexManager","symbolIndex","symbolByTypeIndex","referenceIndex","astNodePath","targetDocUri","docRefs","refDescr","nodeType","uris","documentUris","getFileDescriptions","indexData","ReferenceDescriptionProvider","DefaultWorkspaceManager","initialBuildOptions","documentBuilder","mutex","WorkspaceLock","workspaceFolders","folders","_params","write","initializeWorkspace","performStartup","collector","loadAdditionalDocuments","wf","getRootFolder","traverseFolder","_folders","_collector","workspaceFolder","folderPath","readDirectory","includeEntry","isDirectory","isFile","_workspaceFolder","DefaultLexerErrorMessageProvider","buildUnexpectedCharactersMessage","defaultLexerErrorProvider","buildUnableToPopLexerModeMessage","DefaultLexer","LexerErrorMessageProvider","tokenBuilder","buildTokens","tokenTypes","toTokenTypeDictionary","lexerTokens","isTokenTypeDictionary","chevrotainLexer","ChevrotainLexer","positionTracking","chevrotainResult","groups","flushLexingReport","isIMultiModeLexerDefinition","modes","res","tokenVocabulary","isTokenTypeArray","parseJSDoc","opts","currentLine","currentCharacter","lines","match","exec","lastCharacter","skipWhitespace","tagRegex","lastIndex","tagMatch","fullMatch","rest","inlineTagMatches","matchAll","inlineTagRegex","buildInlineTokens","getLines","normalizeOptions","startPosition","JSDocCommentImpl","parseJSDocElement","parseJSDocComment","NEWLINE_REGEXP","lineIndex","characterIndex","matchIndex","startContent","tagName","endContent","nonWhitespaceRegex","whitespaceEndRegex","parseJSDocTag","parseJSDocText","JSDocLineImpl","inlines","appendEmptyLine","firstToken","lastToken","parseJSDocInline","JSDocTextImpl","parseJSDocLine","inline","tagToken","docLine","JSDocTagImpl","normalizeOption","escaped","escapeRegExp","RegExp","getTag","getAllTags","getTags","fillNewlines","toMarkdown","renderTag","toMarkdownDefault","rendered","tag","display","displayStart","renderedLink","renderLink","renderLinkDefault","renderInlineTag","marker","JSDocDocumentationProvider","getDocumentation","normalizedOptions","firstRegex","lastRegex","isJSDoc","documentationLinkRenderer","documentationTagRenderer","findNameInPrecomputedScopes","findNameInGlobalScope","with","_node","_tag","DefaultCommentProvider","grammarConfig","GrammarConfig","isAstNodeWithComment","findCommentNode","multilineCommentRules","DefaultAsyncParser","syncParser","_cancelToken","DefaultWorkspaceLock","previousTokenSource","CancellationTokenSource","writeQueue","readQueue","done","cancelWrite","tokenSource","enqueue","read","queue","deferred","performNextOperation","shift","cancel","DefaultHydrator","grammarElementIdMap","tokenTypeIdMap","dehydrate","dehydrateLexerReport","dehydrateAstNode","createDehyrationContext","astNodes","cstNodes","streamCst","dehydrateCstNode","arr","dehydrateReference","isRootCstNode","getGrammarElementId","isCompositeCstNode","isLeafCstNode","startColumn","hydrate","createHydrationContext","hydrateCstNode","hydrateAstNode","cst","hydrateCstLeafNode","setParent","hydrateReference","num","cstNodeObj","getGrammarElement","hydrated","getTokenType","createGrammarElementIdMap","id","isAbstractElement","DocumentationProvider","isCommentTerminal","isMultilineComment","terminalRegex","nameRegexp","DefaultNameRegexp","createGrammarConfig","CompletionParser","createCompletionParser","DefaultValueConverter","DefaultTokenBuilder","References","serializer","Hydrator","JsonSerializer","WorkspaceManager","ConfigurationProvider","baseFlatten","regexpParser","TerminalRegExpVisitor","isStarting","endRegexpStack","multiline","endRegex","reset","regex","startRegexp","fromCharCode","escapedChar","visitor","regexp","whitespaceCharacters","isWhitespace","ws","getCaseInsensitivePattern","partialMatches","re","process","tmp","appendRaw","nbChars","appendOptional","partialRegExp","findIndexFunc","collection","fromIndex","iterable","isArrayLike","nativeMax","createFind","toInteger","baseFindIndex","typePredicate","StreamImpl","keyIndex","isAstNodeInRange","DONE_RESULT","TreeStreamImpl","includeRoot","nodeRange","inRange","typeMetaData","getTypeMetaData","genericNode","properties","defaultValue","copyDefaultValue","propertyType","AbstractRule","AbstractType","Condition","TypeDefinition","ValueLiteral","AbstractElement","isInstance","ArrayLiteral","ArrayType","BooleanLiteral","Conjunction","Disjunction","GrammarImport","InferredType","isInferredType","isInterface","NamedArgument","Negation","NumberLiteral","ParameterReference","ParserRule","ReferenceType","ReturnType","isReturnType","SimpleType","isSimpleType","StringLiteral","TerminalRule","isType","TypeAttribute","UnionType","Action","Alternatives","Assignment","CharacterRange","isCharacterRange","CrossReference","EndOfFile","Group","NegatedToken","isNegatedToken","RegexToken","isRegexToken","RuleCall","TerminalAlternatives","isTerminalAlternatives","TerminalGroup","isTerminalGroup","TerminalRuleCall","isTerminalRuleCall","UnorderedGroup","UntilToken","isUntilToken","Wildcard","isWildcard","LangiumGrammarAstReflection","AbstractAstReflection","getAllTypes","computeIsSubtype","supertype","referenceId","GitGraphTokenBuilder","GitGraphModule","createGitGraphServices","GitGraph","GitGraphGeneratedModule","objectProto","baseRest","object","sources","isIterateeCall","props","keysIn","propsIndex","propsLength","eq","reWhitespace","reTrimStart","trimmedEndIndex","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","isSymbol","isObject","valueOf","baseTrim","isBinary","INFINITY","toNumber","ral_1","require","_disposable","CallbackList","bucket","_callbacks","_contexts","foundCallbackWithDifferentContext","invoke","contexts","default","_event","thisArgs","disposables","onFirstListenerAdd","_noop","onLastListenerRemove","TreemapTokenBuilder","classDefRegex","TreemapValueConverter","parseFloat","className","styleText","registerValidationChecks","TreemapValidator","registry","Treemap","checkSingleRoot","rootNodeIndentation","row","TreemapRows","indent","TreemapModule","createTreemapServices","TreemapGeneratedModule","allTerminals","entryRule","ast","getEntryRule","topMostRules","getHiddenRules","ruleDfs","visitedSet","refRule","getCrossReferenceTerminal","nameAssigment","findNodesForPropertyInternal","nodeFeature","findNodesForKeywordInternal","treeIterator","keywordNodes","childNode","prune","startNode","findNameAssignmentInternal","go","refType","childAssignment","typeRef","isDataTypeRuleInternal","visited","inferredType","dataType","returnType","getActionType","getRuleType","u","abstractElementToRegex","flagText","WILDCARD","withCardinality","keywordToRegex","characterRangeToRegex","negate","until","lastSlash","regexFlags","RadarTokenBuilder","RadarModule","createRadarServices","Radar","RadarGeneratedModule","subtypes","allSubtypes","nested","allTypes","types","possibleSubType","_","toFinite","remainder","minimalGrammarModule","minimalSharedGrammarModule","loadGrammarFromJson","json","createMinimalGrammarServices","__defProp","configurable","Statement","Axis","Branch","Checkout","CherryPicking","ClassDefStatement","Commit","Curve","Edge","Entry","Item","Junction","Merge","Packet","PacketBlock","Pie","PieSection","Service","loadedInfoGrammar","loadedPacketGrammar","loadedPieGrammar","loadedArchitectureGrammar","loadedGitGraphGrammar","loadedRadarGrammar","loadedTreemapGrammar","TreemapRow","Direction","Leaf","Section","MermaidAstReflection","InfoGrammar","PacketGrammar","PieGrammar","ArchitectureGrammar","GitGraphGrammar","RadarGrammar","TreemapGrammar","InfoLanguageMetaData","PacketLanguageMetaData","PieLanguageMetaData","ArchitectureLanguageMetaData","GitGraphLanguageMetaData","RadarLanguageMetaData","TreemapLanguageMetaData","PacketGeneratedModule","PieGeneratedModule","rulesRegexes","ACC_DESCR","ACC_TITLE","TITLE","runConverter","runCommonConverter","_rule","_input","keywords","buildKeywordTokens","terminalTokens","PATTERN","customizer","castPath","toKey","objValue","isIndex","assignValue","paths","baseGet","baseSet","comparator","computed","parsers","initializers","createInfoServices2","packet","createPacketServices","createPacketServices2","pie","createPieServices","createPieServices2","architecture","createArchitectureServices2","gitGraph","createGitGraphServices2","radar","createRadarServices2","treemap","createTreemapServices2","diagramType","initializer","MermaidParseError","toFastProperties","toBecomeFast","FakeConstructor","fakeInstance","fakeAccess","bar","n","baseSlice","createAssigner","isPrototype","copyObject","arrayMap","getAllKeysIn","prop","basePickBy","isObjectLike","baseGetTag","nodeIsRegExp","nodeUtil","isRegExp","baseUnary","baseIsRegExp","isString","AbstractProduction","_definition","pickBy","v","Rule","orgText","Alternative","ignoreAmbiguities","serializeProduction","convertDefinition","serializedNonTerminal","nonTerminalName","serializedTerminal","terminalLabel","GAstVisitor","nodeAny","visitNonTerminal","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","baseEach","arraySome","baseSome","baseIndexOf","arrayEvery","baseEvery","isOptionalProd","alreadyVisited","subProd","RestWalker","walk","prevRest","currRest","drop","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","refProd","flatProd","fullOrRest","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","prodWrapper","repSepProd","isSequenceProd","firstSet","seq","currSubProd","nextSubProdIdx","hasInnerProdsRemaining","isLastInnerProdOptional","uniq","firstForSequence","isBranchingProd","allAlternativesFirsts","innerProd","firstForBranching","IN","ResyncFollowsWalker","topProd","follows","startWalking","followName","inner","occurenceInParent","fullRest","t_in_topProd_follows","TypeError","arrayFilter","baseFilter","arrayIncludes","isCommon","valuesLength","arrayIncludesWith","cacheHas","SetCache","outer","valuesIndex","isArrayLikeObject","baseDifference","resIndex","PRINT_ERROR","msg","PRINT_WARNING","regExpAstCache","regExpParser","getRegExpAst","regExp","regExpStr","regExpAst","complementErrorMessage","failedOptimizationPrefixMsg","getOptimizedStartCodesIndices","ensureOptimizations","firstCharOptimizedIndices","msgSuffix","addOptimizedIdxToResult","rangeCode","minOptimizationVal","minUnOptVal","maxUnOptVal","minOptIdx","charCodeToOptimizedIndex","maxOptIdx","currOptIdx","isOptionalQuantifier","isWholeOptional","optimizedCharIdx","upperChar","lowerChar","handleIgnoreCase","findCode","setNode","targetCharCodes","codeOrRange","targetCode","CharCodeFinder","found","canMatchCharCode","charCodes","charCodeFinder","DEFAULT_MODE","MODES","SUPPORT_STICKY","analyzeTokenTypes","tracer","defaults","useSticky","debug","safeMode","lineTerminatorCharacters","onlyRelevantTypes","charCodeToOptimizedIdxMap","initCharCodeToOptimizedIndexMap","currType","NA","allTransformedPatterns","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","patternIdxToCanLineTerminator","patternIdxToIsCustom","patternIdxToShort","emptyGroups","patternIdxToConfig","hasCustom","currPattern","regExpSource","addStickyFlag","addStartOfInput","isFunction","escapedRegExpString","wrappedRegExp","clazz","groupName","GROUP","SKIPPED","isUndefined","longerAltType","LONGER_ALT","PUSH_MODE","lineTerminatorCharCodes","getCharCodes","LINE_BREAKS","checkLineBreaksIssues","isCustomPattern","isShortPattern","acc","x","longerAlt","canLineTerminator","isCustom","short","canBeOptimized","charCodeToPatternIdxToConfig","optimizedIdx","addToMapOfArrays","START_CHARS_HINT","lastOptimizedIdx","charOrInt","currOptimizedIdx","optimizedCodes","validatePatterns","validModesNames","missingResult","tokenTypesWithMissingPattern","LexerDefinitionErrorType","MISSING_PATTERN","valid","difference","findMissingPatterns","invalidResult","tokenTypesWithInvalidPattern","INVALID_PATTERN","findInvalidPatterns","validTokenTypes","withRegExpPatterns","EndAnchorFinder","invalidRegex","regexpAst","endAnchorVisitor","end_of_input","EOI_ANCHOR_FOUND","findEndOfInputAnchor","StartAnchorFinder","startAnchorVisitor","start_of_input","SOI_ANCHOR_FOUND","findStartOfInputAnchor","invalidFlags","UNSUPPORTED_FLAGS_FOUND","findUnsupportedFlags","identicalPatterns","outerType","innerType","compact","duplicatePatterns","currIdenticalSet","setOfIdentical","tokenTypeNames","DUPLICATE_PATTERNS_FOUND","findDuplicatePatterns","matchesEmptyString","EMPTY_MATCH_PATTERN","findEmptyMatchRegExps","validateRegExpPattern","invalidTypes","INVALID_GROUP_TYPE_FOUND","findInvalidGroupType","validModes","invalidModes","PUSH_MODE_DOES_NOT_EXIST","findModesThatDoNotExist","canBeTested","str","metaChars","noMetaChar","testIdx","regExpArray","testTokenType","UNREACHABLE_PATTERN","findUnreachablePatterns","performWarningRuntimeChecks","lexerDefinition","trackLines","warnings","hasAnyLineBreak","allTokenTypes","concreteTokenTypes","terminatorCharCodes","currIssue","details","issue","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","buildLineBreakIssueMessage","warningDescriptor","NO_LINE_BREAKS_FLAGS","LineTerminatorOptimizedTester","charsOrCodes","numOrString","charCode","timer","Date","getTime","val","time","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypesAndParents","clone","searching","CATEGORIES","expandCategories","hasShortKeyProperty","hasCategoriesProperty","hasExtendingTokensTypesMapProperty","assignTokenDefaultProps","singleAssignCategoriesToksMap","assignCategoriesMapProp","assignCategoriesTokensProp","nextNode","pathNode","nextCategory","newPath","isTokenType","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","lineTerminatorsPattern","traceInitPerf","freeze","lexerDefinitionErrors","lexerDefinitionWarning","trackStartLines","trackEndLines","canModeBeOptimized","TRACE_INIT","phaseDesc","phaseImpl","traceInitIndent","traceInitMaxIdent","traceMethod","traceInitVal","actualDefinition","hasOnlySingleMode","defaultMode","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","currModeValue","currModeName","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","currLongerAlt","MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE","performRuntimeChecks","allModeNames","currModDef","currModName","currAnalyzeResult","allErrMessagesString","chopInput","matchWithTest","updateLastIndex","noop","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","initialMode","tokenizeInternal","j","matchAltImage","matchedImage","payload","altPayload","imageLength","newToken","errLength","orgLength","matchedTokensIndex","guessedNumberOfTokens","matchedTokens","clonedResult","groupKeys","currKey","currGroupValue","cloneEmptyGroups","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","possiblePatterns","pop_mode","popToken","newMode","modeCanBeOptimized","push_mode","currConfig","nextCharCode","chosenPatternIdxToConfig","chosenPatternsLength","singleCharCode","longerAltLength","longerAltConfig","longerAltPattern","foundTerminator","lastLTEndOffset","numOfLTsInMatch","errorStartOffset","errorLine","errorColumn","foundResyncPoint","pushMode","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","oldColumn","tokenVector","tokenToAdd","hasTokenLabel","PARENT","POP_MODE","createToken","createTokenInternal","_ref3","expectedPathsPerAlt","customUserDescription","errPrefix","errSuffix","allLookAheadPaths","currAltPaths","nextValidTokenSequences","currPath","currTokenType","itemMsg","_ref4","expectedIterationPaths","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","undefinedRule","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","topLevelName","duplicateProd","dslName","extraArgument","buildNamespaceConflictError","buildAlternationPrefixAmbiguityError","currTok","buildAlternationAmbiguityError","buildEmptyRepetitionError","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","buildLeftRecursionError","leftRecursionPath","currRule","buildInvalidRuleNameError","buildDuplicateRuleNameError","grammarName","GastRefResolverVisitor","nameToTopRule","errMsgProvider","resolveRefs","currTopLevel","ParserDefinitionErrorType","UNRESOLVED_SUBRULE_REF","unresolvedRefName","setter","accumulator","arrayAggregator","baseAggregator","createAggregator","baseAssignValue","AbstractNextPossibleTokensWalker","possibleTokTypes","nextProductionName","nextProductionOccurrence","isAtEndOfPath","ruleStack","reverse","occurrenceStack","updateExpectedNext","NextAfterTokenWalker","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","restProd","AbstractNextTerminalAfterProductionWalker","topRule","isEndOfRule","NextTerminalAfterManyWalker","firstAfterMany","_first","NextTerminalAfterManySepWalker","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","getAlternativesForProd","newDef","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currRuleStack","currOccurrenceStack","nextPath","dropRight","nextIdx","nextTokenType","nextTokenOccurrence","newRuleStack","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack","PROD_TYPE","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","getLookaheadPathsForOr","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","numOfAlts","areAllOneTokenLookahead","currNumOfPaths","currPredicate","currPathLength","singleTokenAlts","buildSingleAlternativeLookaheadFunction","numOfPaths","RestDefinitionFinderWalker","targetOccurrence","targetProdType","restDef","checkIsTarget","expectedProdType","InsideDefinitionFinderVisitor","targetRef","expectedProdName","initializeArrayOfArrays","pathToHashKeys","longerKeys","currShorterKey","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","lookAheadSequenceFromAlternatives","altsDefs","finalResult","altsHashes","dict","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","prefixKeys","currAltResult","containsPath","newPartialPathsAndSuffixes","ruleGrammar","insideDefVisitor","insideDef","afterDef","AlternativeGAST","searchPath","compareOtherPath","otherPath","searchTok","otherTok","areTokenCategoriesNotUsed","lookAheadPaths","singleAltPaths","singlePath","validateGrammar","topLevels","duplicateErrors","collectorVisitor","OccurrenceValidationCollector","allRuleProductions","allProductions","productionGroups","groupBy","identifyProductionForDuplicates","duplicates","currGroup","currDuplicates","firstProd","defError","DUPLICATE_PRODUCTIONS","param","getExtraProductionArgument","validateDuplicateProductions","termsNamespaceConflictErrors","tokenNames","currToken","currRuleName","CONFLICT_TOKENS_RULES_NAMESPACE","checkTerminalAndNoneTerminalsNameSpace","tooManyAltsErrors","curRule","orCollector","OrCollector","ors","alternations","currOr","TOO_MANY_ALTS","validateTooManyAlts","duplicateRulesError","occurrences","DUPLICATE_RULE_NAME","validateRuleDoesNotAlreadyExist","manySep","atLeastOneSep","validateNoLeftRecursion","nextNonTerminals","getFirstNoneTerminal","LEFT_RECURSION","validNextSteps","errorsFromNextSteps","currRefRule","currSubDef","isFirstOptional","hasMore","globalMaxLookahead","currOccurrence","actualMaxLookahead","altsAmbiguityErrors","foundAmbiguousPaths","identicalAmbiguities","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","currErrors","currAmbDescriptor","ambgIndices","AMBIGUOUS_ALTS","checkAlternativesAmbiguities","altsPrefixAmbiguityErrors","pathsAndIndices","currPathsAndIdx","currPathAndIdx","targetIdx","prefixAmbiguitiesPathsAndIndices","searchPathAndIdx","prefix","otherTokType","currAmbPathAndIdx","AMBIGUOUS_PREFIX_ALTS","checkPrefixAlternativesAmbiguities","RepetitionCollector","resolveGrammar","actualOptions","topRulesTable","refResolver","orgResolveGrammar","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","isRecognitionException","RecognitionException","resyncedTokens","captureStackTrace","MismatchedTokenException","NoViableAltException","NotAllInputParsedException","EarlyExitException","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","attemptInRepetitionRecovery","prodFunc","lookaheadFunc","dslMethodIdx","nextToksWalker","notStuck","getKeyForAutomaticLookahead","firstAfterRepInfo","firstAfterRepMap","getCurrRuleFullName","getGAstProductions","expectTokAfterLastMatch","nextTokIdx","shouldInRepetitionRecoveryBeTried","tryInRepetitionRecovery","AT_LEAST_ONE_IDX","MANY_SEP_IDX","AT_LEAST_ONE_SEP_IDX","ruleIdx","DEFAULT_PARSER_CONFIG","leftRecursionErrors","emptyAltErrors","ambiguousAltsErrors","emptyRepetitionErrors","validateSomeNonEmptyLookaheadPath","currTopRule","exceptLast","currAlternative","possibleFirstInAlt","NONE_LAST_EMPTY_ALT","validateEmptyOrAlternative","topLevelRules","currProd","pathsInsideProduction","NO_NON_EMPTY_LOOKAHEAD","laFuncBuilder","buildLookaheadFuncForOr","lookaheadBuilder","buildLookaheadFuncForOptionalProd","dslMethods","repetitionWithSeparator","repetitionMandatoryWithSeparator","setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","setNodeLocationFull","defineNameProp","nameValue","enumerable","writable","defaultVisit","childrenNames","childrenNamesLength","currChildArray","currChildArrayLength","currChild","createBaseSemanticVisitorConstructor","derivedConstructor","semanticProto","validateVisitor","semanticDefinitionErrors","visitorInstance","missingErrors","missingRuleNames","CstVisitorDefinitionError","MISSING_METHOD","methodName","validateMissingCstMethods","errorMessages","currDefError","_RULE_NAMES","RECORDING_NULL_OBJECT","HANDLE_SEPARATOR","MAX_METHOD_IDX","pow","RFT","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","recordProd","prodConstructor","mainProdArg","handleSep","assertMethodIdxIsValid","prevProd","peek","recordingProdStack","grammarAction","newProd","SEP","MAX_LOOKAHEAD","recordOrProd","hasOptions","newOrProd","IGNORE_AMBIGUITIES","currAltFlat","getIdxSuffix","KNOWN_RECORDER_ERROR","END_OF_FILE","NaN","outputCst","DEFAULT_RULE_CONFIG","recoveryValueFunc","resyncEnabled","derivedCtor","Parser","parserInstance","defErrorsMsgs","selfAnalysisDone","enableRecording","definedRulesNames","originalGrammarAction","recordedRuleGast","topLevelRuleRecord","gastProductionsCache","disableRecording","resolverErrors","validationErrors","tokensMap","orgValidateGrammar","lookaheadValidationErrors","lookaheadValidationErrorMessages","CUSTOM_LOOKAHEAD_VALIDATION","validateLookahead","allFollows","topProductions","reSyncFollows","currRefsFollow","computeAllProdsFollows","resyncFollows","preComputeLookaheadFunctions","DEFER_DEFINITION_ERRORS_HANDLING","that","initErrorHandler","initLexerAdapter","initLooksAhead","initRecognizerEngine","initRecoverable","initTreeBuilder","initContentAssist","initGastRecorder","initPerformanceTracer","getTokenToInsert","tokToInsert","canTokenTypeBeInsertedInRecovery","canTokenTypeBeDeletedInRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","passedResyncPoint","nextTokenWithoutResync","generateErrorMessage","SAVE_ERROR","SKIP_TOKEN","addToResyncTokens","importLexerState","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","getNextPossibleTokenTypes","tryInRuleRecovery","canRecoverWithSingleTokenInsertion","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","mismatchedTok","possibleFollowsTokType","isInCurrentRuleReSyncSet","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","foundMatch","resyncTokType","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","buildFullFollowKeyStack","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","followStack","resyncTokens","reSyncTo","getHumanReadableRuleStack","currShortName","lookAheadFuncsCache","collectMethods","prodIdx","laFunc","fullRuleNameToShort","setLaFuncCache","computeLookaheadFunc","prodKey","prodMaxLookahead","dslMethodName","getLaFuncFromCache","CST_STACK","setNodeLocationFromToken","setNodeLocationFromNode","cstPostRule","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","fullRuleName","ruleCstNode","prevToken","consumedToken","rootCst","tokenTypeName","ruleCstResult","preCstNode","ruleResult","addNoneTerminalToCst","getBaseCstVisitorConstructor","baseCstVisitorConstructor","newBaseCstVisitorConstructor","getBaseCstVisitorConstructorWithDefaults","baseCstVisitorWithDefaultsConstructor","newConstructor","baseConstructor","withDefaultsProto","createBaseVisitorConstructorWithDefaults","tokVector","tokVectorLength","newInput","soughtIdx","resetLexerState","moveToTerminatedState","getLexerPosition","shortRuleNameToFull","ruleShortNameIdx","subruleIdx","isBackTrackingStack","uniqueTokens","noTokenCategoriesUsed","tokenConstructor","defineRule","shortName","BITS_FOR_METHOD_TYPE","invokeRuleWithTry","ruleInvocationStateUpdate","invokeRuleCatch","ruleFinallyStateUpdate","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","recogError","partialCstResult","recoveredNode","optionInternal","actionORMethodDef","optionInternalLogic","orgLookaheadFunction","atLeastOneInternal","laKey","atLeastOneInternalLogic","raiseEarlyExitException","ERR_MSG","doSingleRepetition","atLeastOneSepFirstInternal","atLeastOneSepFirstInternalLogic","separatorLookAheadFunc","CONSUME","repetitionSepSecondInternal","manyInternal","manyInternalLogic","lookaheadFunction","manySepFirstInternal","manySepFirstInternalLogic","nextTerminalAfterWalker","beforeIteration","orInternal","altsOrOpts","altIdxToTake","raiseNoAltException","isAtEndOfInput","firstRedundantTok","subruleInternal","ruleToCall","subruleInternalError","consumeInternal","consumeInternalError","eFromConsumption","consumeInternalRecovery","eFromInRuleRecovery","saveRecogState","savedErrors","savedRuleStack","lexerState","reloadRecogState","fullName","ACTION","CONSUME1","CONSUME2","CONSUME3","CONSUME4","CONSUME5","CONSUME6","CONSUME7","CONSUME8","CONSUME9","SUBRULE","SUBRULE1","SUBRULE2","SUBRULE3","SUBRULE4","SUBRULE5","SUBRULE6","SUBRULE7","SUBRULE8","SUBRULE9","OPTION1","OPTION2","OPTION3","OPTION4","OPTION5","OPTION6","OPTION7","OPTION8","OPTION9","OR","OR1","OR2","OR3","OR4","OR5","OR6","OR7","OR8","OR9","MANY","MANY1","MANY2","MANY3","MANY4","MANY5","MANY6","MANY7","MANY8","MANY9","MANY_SEP","MANY_SEP1","MANY_SEP2","MANY_SEP3","MANY_SEP4","MANY_SEP5","MANY_SEP6","MANY_SEP7","MANY_SEP8","MANY_SEP9","AT_LEAST_ONE","AT_LEAST_ONE1","AT_LEAST_ONE2","AT_LEAST_ONE3","AT_LEAST_ONE4","AT_LEAST_ONE5","AT_LEAST_ONE6","AT_LEAST_ONE7","AT_LEAST_ONE8","AT_LEAST_ONE9","AT_LEAST_ONE_SEP","AT_LEAST_ONE_SEP1","AT_LEAST_ONE_SEP2","AT_LEAST_ONE_SEP3","AT_LEAST_ONE_SEP4","AT_LEAST_ONE_SEP5","AT_LEAST_ONE_SEP6","AT_LEAST_ONE_SEP7","AT_LEAST_ONE_SEP8","AT_LEAST_ONE_SEP9","ruleImplementation","OVERRIDE_RULE","ruleErrors","INVALID_RULE_OVERRIDE","validateRuleIsOverridden","BACKTRACK","orgState","getSerializedGastProductions","topRules","_errors","ruleOccurrenceStack","newErrors","userDefinedErrMsg","insideProdPaths","actualTokens","errMsgTypes","lookAheadPathsPerAlternative","computeContentAssist","startRuleName","precedingInput","startRuleGast","topRuleName","topProduction","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION_RECORD","BACKTRACK_RECORD","LA_RECORD","newTopLevelRule","originalError","mutabilityError","newNoneTerminal","userTraceInitPerf","traceIsNumber","baseCtor","baseProto","getOwnPropertyNames","propName","basePropDescriptor","getOwnPropertyDescriptor","configClone","r","o","h","cwd","isAbsolute","f","l","_makeLong","format","dir","base","delimiter","win32","posix","toStringTag","platform","navigator","userAgent","scheme","authority","query","isUri","fsPath","m","C","file","y","toJSON","revive","_formatted","external","_fsPath","_sep","$mid","encodeURIComponent","decodeURIComponent","w","A","P","startFn","nextFn","toMap","keyFn","valueFn","entryStream","firstDone","addSeparator","searchElement","initialValue","reduceRight","recursiveReduce","findIndex","mapped","isIterable","depth","head","tail","skipCount","limit","maxSize","distinct","by","internalState","exclude","otherKeySet","ownKey","EMPTY_STREAM","collections","collIndex","arrIndex","iterators","pruned","product","RangeComparison","comparison","Before","After","startInside","endInside","Inside","OverlapBack","OverlapFront","Outside","compareRange","commentNames","getPreviousNode","isCommentNode","hasPath","baseHas","module1","module2","module3","module4","module5","module6","module7","module8","module9","_inject","_merge","merge","m1","m2","isProxy","module","injector","proxy","Proxy","deleteProperty","_resolve","ownKeys","__requested__","cause","value2","value1","convertInt","convertString","convertID","convertNumber","convertBoolean","convertBigint","convertDate","convertEscapeCharacter","BigInt","baseClone","PieTokenBuilder","PieValueConverter","PieModule","baseMap","stringArray","elem","events_1","Cancelled","shortcutEvent","MutableToken","_isCancelled","_emitter","_token","reachableRules","buildTerminalTokens","terminalToken","popDiagnostics","buildTerminalToken","requiresCustomPattern","regexPatternFunction","stickyRegex","sort","buildKeywordToken","keywordPattern","buildKeywordPattern","findLongerAlt","longerAlts","EmptyFileSystemProvider","PacketTokenBuilder","PacketModule"],"sourceRoot":""}